Location_nursery_vs_CCC.fc$lfc=source[,"log2FoldChange"]
head(Location_nursery_vs_CCC.fc)
write.csv(Location_nursery_vs_CCC.fc,file="nursery_vs_CCC_fc.csv",row.names=F,quote=F)
save(nursery_vs_CCC.fc,file="Rdata_files/nursery_vs_CCC.fc.RData")
# signed log FDR-adjusted p-values: -log(p-adj)* direction:
nursery_vs_CCC.p=data.frame("gene"=row.names(source))
nursery_vs_CCC.p$lpv=-log(source[,"padj"],10)
nursery_vs_CCC.p$lpv[source$stat<0]=nursery_vs_CCC.p$lpv[source$stat<0]*-1
head(nursery_vs_CCC.p)
write.csv(nursery_vs_CCC.p,file="nursery_vs_CCC_lpv.csv",row.names=F,quote=F)
save(nursery_vs_CCC.p,file="Rdata_files/nursery_vs_CCC_lpv.RData")
Location_nursery_vs_CCC
#Untreated vs. Initial
Location_nursery_vs_CCC %>%
as.data.frame() %>%
rownames_to_column(var="gene") %>%
mutate(lpv = -log(padj, base = 10)) %>%
mutate(lpv = if_else(stat < 0, lpv * -1, lpv)) %>%
filter(abs(lpv) >= 1.3) %>%
left_join(read.table(file = "bioinformatics/Acervicornis_iso2geneName.tab",
sep = "\t",
quote="", fill=FALSE) %>%
mutate(gene = V1,
annot = V2) %>%
dplyr::select(-V1, -V2), by = c("gene" = "gene")) %>% write_csv("Location_nursery_vs_CCC_annotatedDGEs.csv")
#Untreated vs. Initial
Location_nursery_vs_CCC %>%
as.data.frame() %>%
rownames_to_column(var="gene") %>%
mutate(lpv = -log(padj, base = 10)) %>%
mutate(lpv = if_else(stat < 0, lpv * -1, lpv)) %>%
filter(abs(lpv) >= 1.3) %>%
left_join(read.table(file = "bioinformatics/Acervicornis_iso2geneName.tab",
sep = "\t",
quote="", fill=FALSE) %>%
mutate(gene = V1,
annot = V2) %>%
dplyr::select(-V1, -V2), by = c("gene" = "gene")) %>% write_csv("Location_nursery_vs_CCC_annotatedDGEs.csv") %>% str()
#Untreated vs. Initial
Location_nursery_vs_CCC %>%
as.data.frame() %>%
rownames_to_column(var="gene") %>%
mutate(lpv = -log(padj, base = 10)) %>%
mutate(lpv = if_else(stat < 0, lpv * -1, lpv)) %>%
filter(abs(lpv) >= 1.3) %>%
left_join(read.table(file = "bioinformatics/Acervicornis_iso2geneName.tab",
sep = "\t",
quote="", fill=FALSE) %>%
mutate(gene = V1,
annot = V2) %>%
dplyr::select(-V1, -V2), by = c("gene" = "gene")) view()
#Untreated vs. Initial
Location_nursery_vs_CCC %>%
as.data.frame() %>%
rownames_to_column(var="gene") %>%
mutate(lpv = -log(padj, base = 10)) %>%
mutate(lpv = if_else(stat < 0, lpv * -1, lpv)) %>%
filter(abs(lpv) >= 1.3) %>%
left_join(read.table(file = "bioinformatics/Acervicornis_iso2geneName.tab",
sep = "\t",
quote="", fill=FALSE) %>%
mutate(gene = V1,
annot = V2) %>%
dplyr::select(-V1, -V2), by = c("gene" = "gene")) %>% view()
g1 <- ggplot(vst_PCAdata, aes(PC1, PC2, color=Location, shape=Genotype)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A.cervicornis") +
theme_classic() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())  +
scale_color_manual(values=c("CCC"="red", "Nursery"="darkblue"))
ggplot(vst_PCAdata, aes(PC1, PC2, color=Location, shape=Genotype)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A.cervicornis") +
theme_classic() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())  +
scale_color_manual(values=c("CCC"="red", "Nursery"="darkblue"))
ggplot(vst_PCAdata, aes(PC1, PC2, color=Location, shape=Genotype)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A.cervicornis") +
theme_classic() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())  +
scale_color_manual(values=c("CCC"="red", "nursery"="darkblue"))
ggplot(vst_PCAdata, aes(PC1, PC2, color=Location, shape=Genotype)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A.cervicornis") +
theme_classic() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())  +
scale_color_manual(values=c("CCC"="red", "nursery"="navy"))
ggplot(vst_PCAdata, aes(PC1, PC2, color=Location, shape=Genotype)) +
geom_point(size=5) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A.cervicornis") +
theme_classic() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())  +
scale_color_manual(values=c("CCC"="red", "nursery"="navy"))
ggplot(vst_PCAdata, aes(PC1, PC2, color=Location, shape=Genotype)) +
geom_point(size=4) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A.cervicornis") +
theme_classic() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())  +
scale_color_manual(values=c("CCC"="red", "nursery"="navy"))
ggplot(vst_PCAdata, aes(PC1, PC2, color=Location, shape=Genotype)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A.cervicornis") +
theme_classic() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())  +
scale_color_manual(values=c("CCC"="red", "nursery"="navy"))
ggsave("PCA_allgenets.pdf")
ggplot(vst_PCAdata, aes(PC1, PC2, color=Location, shape=Genotype)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A.cervicornis") +
theme_classic() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())  +
scale_color_manual(values=c("CCC"="red", "nursery"="navy"))
ggplot(vst_PCAdata, aes(PC1, PC2, color=Location, shape=Genotype)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A.cervicornis") +
theme_classic() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())  +
scale_color_manual(values=c("CCC"="red", "nursery"="navy")) +
stat_ellipse()
ggplot(vst_PCAdata, aes(PC1, PC2, color=Location)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A.cervicornis") +
theme_classic() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())  +
scale_color_manual(values=c("CCC"="red", "nursery"="navy")) +
stat_ellipse()
ggplot(vst_PCAdata, aes(PC1, PC2, color=Location)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A.cervicornis") +
theme_classic() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())  +
scale_color_manual(values=c("CCC"="red", "nursery"="navy"))
ggplot(vst_PCAdata, aes(PC1, PC2, color=Location, shape=Genotype)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A.cervicornis") +
theme_classic() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())  +
scale_color_manual(values=c("CCC"="red", "nursery"="navy"))
library(pheatmap)
pdf(file="heatmap_fullmodel.pdf", width=15, height=15)
head(vsd)
pheatmap(cor(vsd))
dev.off()
library(vegan)
# library(rgl)
library(ape)
conditions=design
colnames(vsd)
rownames(conditions)
# creating a PCoA eigenvalue matrix
dds.pcoa=pcoa(dist(t(vsd),method="manhattan")/1000)
scores=dds.pcoa$vectors
# copy this table for % variation explained by each axis (Relative_eig column)
dds.pcoa$values
pdf(file="PCoA_Manhattan.pdf", width=6, height=6)
plot(dds.pcoa$values$Relative_eig)
points(dds.pcoa$values$Broken_stick,col="red",pch=3)
dev.off()
conditions$Genotype
pdf(file="plots/PCoA_LocationGenotype.pdf", width=12, height=6)
par(mfrow=c(1,2))
plot(scores[,1], scores[,2],col=c("red","blue")[as.numeric(as.factor(conditions$Location))],pch=c(15,17)[as.numeric((as.factor(conditions$Genotype)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=F, col=c("red","blue"))
legend("topright", legend=c("Nursery", "CCC"), fill = c("red","blue"), bty="n")
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), pch=c(15,17,25), bty="n")
plot(scores[,1], scores[,2],col=c("red","blue")[as.numeric(as.factor(conditions$Location))],pch=c(15,17)[as.numeric((as.factor(conditions$Genotype)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=F, col=c("red","blue"))
legend("topright", legend=c("Nursery", "CCC"), fill = c("red","blue"), bty="n")
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), pch=c(15,17,25), bty="n")
plot(scores[,1], scores[,2],col=c("red","blue")[as.numeric(as.factor(conditions$Location))],pch=c(15,17)[as.numeric((as.factor(conditions$Genotype)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
dev.off()
dev.off()
plot(scores[,1], scores[,2],col=c("red","blue")[as.numeric(as.factor(conditions$Location))],pch=c(15,17)[as.numeric((as.factor(conditions$Genotype)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=F, col=c("red","blue"))
legend("topright", legend=c("Nursery", "CCC"), fill = c("red","blue"), bty="n")
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), pch=c(15,17,25), bty="n")
plot(scores[,1], scores[,2],col=c("red","blue")[as.numeric(as.factor(conditions$Location))],pch=c(15,17.25)[as.numeric((as.factor(conditions$Genotype)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=F, col=c("red","blue"))
legend("topright", legend=c("Nursery", "CCC"), fill = c("red","blue"), bty="n")
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), pch=c(15,17,25), bty="n")
dev.off()
plot(scores[,1], scores[,2],col=c("red","blue")[as.numeric(as.factor(conditions$Location))],pch=c(15,17.25)[as.numeric((as.factor(conditions$Genotype)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=F, col=c("red","blue"))
legend("topright", legend=c("Nursery", "CCC"), fill = c("red","blue"), bty="n")
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), pch=c(15,17,25), bty="n")
plot(scores[,1], scores[,2],col=c("red","blue")[as.numeric(as.factor(conditions$Location))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Genotype)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=F, col=c("red","blue"))
legend("topright", legend=c("Nursery", "CCC"), fill = c("red","blue"), bty="n")
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), pch=c(15,17,25), bty="n")
scores[,1]
par(mfrow=c(1,2))
plot(scores[,1], scores[,2],col=c("red","blue")[as.numeric(as.factor(conditions$Location))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Genotype)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=T, col=c("red","blue"))
legend("topright", legend=c("CCC", "Nursery"), fill = c("red","blue"), bty="n")
ggplot(vst_PCAdata, aes(PC1, PC2, color=Location, shape=Genotype)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A.cervicornis") +
theme_classic() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())
dev.off()
dev.off()
ggplot(vst_PCAdata, aes(PC1, PC2, color=Location, shape=Genotype)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A.cervicornis") +
theme_classic() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())
plot(scores[,1], scores[,2],col=c("red","blue")[as.numeric(as.factor(conditions$Location))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Genotype)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=T, col=c("red","blue"))
legend("topright", legend=c("CCC", "Nursery"), fill = c("red","blue"), bty="n")
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), pch=c(15,17,25), bty="n")
colnames(vsd)
rownames(conditions)
str(design)
str(design) #15 samples left
str(vsd)
str(Vsd)
plot(scores[,1], scores[,2],col=c("red","blue")[as.numeric(as.factor(conditions$Location))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Genotype)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=T, col=c("red","blue"))
conditions$Location)
conditions$Location
conditions$Genotype
# importing a design .csv file
design = readxl::read_xlsx("sample_metadata.xlsx")
design
design %>%
filter(!Sample_ID %in% c("1087", "1088", "1096", "2264", "2383"))
design %>%
mutate(Sample_ID = paste("Acer_", Sample_ID, sep = "")) -> design
column_to_rownames(design, var="Sample_ID") -> design
design$Genotype <- as.factor(design$Genotype)
design$Genotype <- factor(gsub("-", "_", design$Genotype)) #DESeq2 does not like hyphens in factor names
design$Location <- as.factor(design$Location)
design$Genotype <- factor(gsub("'", "", design$Genotype)) #DESeq2 does not like hyphens in factor names
design$Genotype <- factor(gsub(" ", "", design$Genotype)) #DESeq2 does not like hyphens in factor names
str(design)
design
design = readxl::read_xlsx("sample_metadata.xlsx")
design %>%
filter(!Sample_ID %in% c("1087", "1088", "1096", "2264", "2383")) -> design
design %>%
mutate(Sample_ID = paste("Acer_", Sample_ID, sep = "")) -> design
column_to_rownames(design, var="Sample_ID") -> design
design$Genotype <- as.factor(design$Genotype)
design$Genotype <- factor(gsub("-", "_", design$Genotype)) #DESeq2 does not like hyphens in factor names
design$Location <- as.factor(design$Location)
design$Genotype <- factor(gsub("'", "", design$Genotype)) #DESeq2 does not like hyphens in factor names
design$Genotype <- factor(gsub(" ", "", design$Genotype)) #DESeq2 does not like hyphens in factor names
str(design)
design$Genotype
design=design[-outs,]
design
save(vsd,design,file="vsd.RData")
# save all these dataframes as an Rdata package so you don't need to rerun each time
save(dds,design,countData,Vsd,counts4wgcna,file="initial_fullddsdesigncountsVsdcountsWGCNA.RData")
conditions=design
# creating a PCoA eigenvalue matrix
dds.pcoa=pcoa(dist(t(vsd),method="manhattan")/1000)
scores=dds.pcoa$vectors
# copy this table for % variation explained by each axis (Relative_eig column)
dds.pcoa$values
plot(dds.pcoa$values$Relative_eig)
points(dds.pcoa$values$Broken_stick,col="red",pch=3)
dev.off()
plot(dds.pcoa$values$Relative_eig)
points(dds.pcoa$values$Broken_stick,col="red",pch=3)
plot(scores[,1], scores[,2],col=c("red","blue")[as.numeric(as.factor(conditions$Location))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Genotype)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=T, col=c("red","blue"))
conditions$Genotype
plot(scores[,1], scores[,2],col=c("orange","lightblue", "pink")[as.numeric(as.factor(conditions$Genotype))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Treatment)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Genotype")
ordispider(scores, conditions$Genotype, label=F, col=c("orange","lightblue", "pink"))
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), fill = c("orange","lightblue", "pink"), bty="n")
legend("topright", legend=c("CCC", "Nursery"), pch=c(15,17,25), bty="n")
plot(scores[,1], scores[,2],col=c("orange","lightblue", "pink")[as.numeric(as.factor(conditions$Genotype))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Location)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Genotype")
ordispider(scores, conditions$Genotype, label=F, col=c("orange","darkblue", "magenta"))
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), fill = c("orange","darkblue", "magenta"), bty="n")
plot(scores[,1], scores[,2],col=c("orange","lightblue", "pink")[as.numeric(as.factor(conditions$Genotype))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Location)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Genotype")
ordispider(scores, conditions$Genotype, label=F, col=c("orange","darkblue", "magenta"))
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), fill = c("orange","darkblue", "magenta"), bty="n")
legend("topright", legend=c("CCC", "Nursery"), pch=c(15,17,25), bty="n")
par(mfrow=c(1,2))
plot(scores[,1], scores[,2],col=c("red","blue")[as.numeric(as.factor(conditions$Location))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Genotype)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=T, col=c("red","blue"))
legend("topright", legend=c("CCC", "Nursery"), fill = c("red","blue"), bty="n")
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), pch=c(15,17,25), bty="n")
plot(scores[,1], scores[,2],col=c("orange","lightblue", "pink")[as.numeric(as.factor(conditions$Genotype))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Location)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Genotype")
ordispider(scores, conditions$Genotype, label=F, col=c("orange","darkblue", "magenta"))
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), fill = c("orange","darkblue", "magenta"), bty="n")
legend("topright", legend=c("CCC", "Nursery"), pch=c(15,17,25), bty="n")
par(mfrow=c(1,2))
plot(scores[,1], scores[,2],col=c("red","blue")[as.numeric(as.factor(conditions$Location))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Genotype)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=T, col=c("red","blue"))
legend("topright", legend=c("CCC", "Nursery"), fill = c("red","blue"), bty="n")
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), pch=c(15,17,25), bty="n")
plot(scores[,1], scores[,2],col=c("orange","lightblue", "pink")[as.numeric(as.factor(conditions$Genotype))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Location)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Genotype")
ordispider(scores, conditions$Genotype, label=T, col=c("orange","darkblue", "magenta"))
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), fill = c("orange","darkblue", "magenta"), bty="n")
legend("topright", legend=c("CCC", "Nursery"), pch=c(15,17,25), bty="n")
par(mfrow=c(1,2))
plot(scores[,1], scores[,2],col=c("red","blue")[as.numeric(as.factor(conditions$Location))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Genotype)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=F, col=c("red","blue"))
legend("topright", legend=c("CCC", "Nursery"), fill = c("red","blue"), bty="n")
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), pch=c(15,17,25), bty="n")
plot(scores[,1], scores[,2],col=c("orange","lightblue", "pink")[as.numeric(as.factor(conditions$Genotype))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Location)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Genotype")
ordispider(scores, conditions$Genotype, label=F, col=c("orange","darkblue", "magenta"))
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), fill = c("orange","darkblue", "magenta"), bty="n")
legend("topright", legend=c("CCC", "Nursery"), pch=c(15,17,25), bty="n")
plot(scores[,1], scores[,2],col=c("red","blue")[as.numeric(as.factor(conditions$Location))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=F, col=c("red","blue"))
legend("topleft", legend=c("CCC", "Nursery"), fill = c("red","blue"), bty="n")
dev.off()
plot(scores[,1], scores[,2],col=c("red","blue")[as.numeric(as.factor(conditions$Location))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=F, col=c("red","blue"))
legend("topleft", legend=c("CCC", "Nursery"), fill = c("red","blue"), bty="n")
tre=nj(dist(scores[,1:4]))
plot(tre,cex=0.8)
# formal analysis of variance in distance matricies:
ad=adonis2(t(vsd)~Genotype + Location,data=design,method="manhattan",permutations=1e6)
summary(ad)
as.data.frame(ad)
ad
as.data.frame(ad)
as.data.frame(ad) %>% write_csv("permanova_results.csv")
pie(ad$R2[1:4],labels=row.names(as.data.frame(ad)),col=cols,main="Genotype vs Location")
cols=c("blue","orange","lightblue","grey80")
pdf(file="ANOVA_pie.pdf", width=6, height=6)
pie(ad$R2[1:4],labels=row.names(as.data.frame(ad)),col=cols,main="Genotype vs Location")
dev.off()
means=apply(vsd,1,mean)
plot(density(means))
lines(density(means[degs_Treatment_Untreated_vs_Initial]),col="blue")
plot(density(means))
lines(density(means[degs_Location_nursery_vs_CCC]),col="blue")
library(EnhancedVolcano)
load("RData_files/nursery_vs_CCC_lpv.RData")
View(nursery_vs_CCC.p)
load("RData_files/initial_fullddsdesigncountsVsdcountsWGCNA.RData")
load("RData_files/realModels_Acer.RData")
load("RData_files/vsd.RData")
load("Rdata_files/realModels_Acer.RData")
read.table(file = "bioinformatics/Acervicornis_iso2geneName.tab",
sep = "\t",
quote="", fill=FALSE) %>%
rename(gene = V1,
annot = V2) -> iso2geneName
Location_nursery_vs_CCC=results(dds,contrast=c("Location","nursery","CCC"))
summary(Location_nursery_vs_CCC, alpha = 0.05)
degs_Location_nursery_vs_CCC=row.names(Location_nursery_vs_CCC)[Location_nursery_vs_CCC$padj<0.05 & !(is.na(Location_nursery_vs_CCC$padj))]
length(degs_Location_nursery_vs_CCC)
save(Location_nursery_vs_CCC, degs_Location_nursery_vs_CCC, file="pvals.RData")
load("Rdata_files/pvals.RData")
View(Location_nursery_vs_CCC)
Location_nursery_vs_CCC_annotated <- as.data.frame(Location_nursery_vs_CCC) %>%
rownames_to_column(var="gene") %>%
left_join(read.table(file = "bioinformatics/Acervicornis_iso2geneName.tab",
sep = "\t",
quote="", fill=FALSE) %>%
mutate(gene = V1,
annot = V2) %>%
dplyr::select(-V1, -V2), by = c("gene" = "gene"))
str(Location_nursery_vs_CCC_annotated) #25003 x 8
keyvals <- ifelse(
Location_nursery_vs_CCC_annotated$log2FoldChange < 0 & Location_nursery_vs_CCC_annotated$padj < 0.05, 'royalblue',
ifelse(Location_nursery_vs_CCC_annotated$log2FoldChange > 0 & Location_nursery_vs_CCC_annotated$padj < 0.05, 'red',
'grey'))
keyvals[is.na(keyvals)] <- 'grey'
names(keyvals)[keyvals == 'red'] <- 'significantly high (padj < 0.05 and L2FC > 0)'
names(keyvals)[keyvals == 'grey'] <- 'L2FC=0 and padj > 0.05'
names(keyvals)[keyvals == 'royalblue'] <- 'significantly low (padj < 0.05 and L2FC < 0)'
EnhancedVolcano(Location_nursery_vs_CCC_annotated,
lab = NA,
title = "Nursery vs. CCC",
x = 'log2FoldChange',
y = 'padj',
ylab = bquote(~-Log[10]~ 'FDR P-adjusted'),
legendPosition = 'right',
pCutoff = 10e-2,
FCcutoff = 0.25,
legendIconSize = 5.0,
labSize = 6.0,
colCustom = keyvals,
colAlpha = 0.5)
pdf(file="volcanoplot.pdf", width = 12, height = 6)
EnhancedVolcano(Location_nursery_vs_CCC_annotated,
lab = NA,
title = "Nursery vs. CCC",
x = 'log2FoldChange',
y = 'padj',
ylab = bquote(~-Log[10]~ 'FDR P-adjusted'),
legendPosition = 'right',
pCutoff = 10e-2,
FCcutoff = 0.25,
legendIconSize = 5.0,
labSize = 6.0,
colCustom = keyvals,
colAlpha = 0.5)
library(KOGMWU)
library(tidyverse)
#### loading KOG and gene annotations ####
gene2kog=read.table("bioinformatics/Acervicornis_iso2kogClass.tab",sep="\t", fill=T) #iso2kogClass.tab not iso2kogClass1.tab because that file has an "error" when you try to view it using the terminal
head(gene2kog)
gene2kog %>%
rename(gene = V1, KOG = V2) -> gene2kog_table
read.table(file = "bioinformatics/Acervicornis_iso2geneName.tab",
sep = "\t",
quote="", fill=FALSE) %>%
rename(gene = V1,
annot = V2) -> iso2geneName
load("RData_files/realModels_Acer.RData")
source=Location_nursery_vs_CCC[!is.na(Location_nursery_vs_CCC$padj),]
Location_nursery_vs_CCC.fc=data.frame("gene"=row.names(source))
Location_nursery_vs_CCC.fc$lfc=source[,"log2FoldChange"]
head(Location_nursery_vs_CCC.fc)
save(nursery_vs_CCC.fc,file="Rdata_files/nursery_vs_CCC_fc.RData")
save(Location_nursery_vs_CCC.fc,file="Rdata_files/nursery_vs_CCC_fc.RData")
Location_nursery_vs_CCC.fc=kog.mwu(Location_nursery_vs_CCC.fc,gene2kog)
fc.Location_nursery_vs_CCC=kog.mwu(Location_nursery_vs_CCC.fc,gene2kog)
load("RData_files/nursery_vs_CCC_fc.RData")
fc.Location_nursery_vs_CCC=kog.mwu(Location_nursery_vs_CCC.fc,gene2kog)
View(fc.Location_nursery_vs_CCC)
write_csv(fc.Location_nursery_vs_CCC, "KOG_pvalues_fc_nurseryvsCCC.csv")
full_join(Location_nursery_vs_CCC.fc, gene2kog_table, by="gene") %>%
drop_na() %>%
filter(!KOG == "" & !KOG == "Function Unknown") %>%
rename(term = KOG) %>%
full_join(., fc.Location_nursery_vs_CCC, by = "term") %>%
full_join(., iso2geneName, by = "gene") %>%
select(gene, annot, lfc, term, nseqs:padj) %>%
rename(KOG = term) %>%
drop_na() %>%
write_csv("KOGterms_allgenes_pvalues_fc_nurseryvsCCC.csv")
full_join(Location_nursery_vs_CCC.fc, gene2kog_table, by="gene") %>%
drop_na() %>%
filter(!KOG == "" & !KOG == "Function Unknown") %>%
rename(term = KOG) %>%
full_join(., fc.Location_nursery_vs_CCC, by = "term") %>%
full_join(., iso2geneName, by = "gene") %>%
select(gene, annot, lfc, term, nseqs:padj) %>%
rename(KOG = term) %>%
drop_na()
fc.Location_nursery_vs_CCC %>%
filter(!term == "" & !term == "Function Unknown") -> fc.Location_nursery_vs_CCC
fc.Location_nursery_vs_CCC %>%
select(term, padj) %>%
rename(padj_nursery_vs_CCC = padj) -> df1
df1
# compiling a table of delta-ranks to compare these results:
ktable=makeDeltaRanksTable(list("nursery_vs_CCC"=fc.Location_nursery_vs_CCC))
library(RColorBrewer)
color = colorRampPalette(rev(c(brewer.pal(n = 7, name ="RdBu"),"royalblue","darkblue")))(100)
# Making a heatmap with hierarchical clustering trees:
#pdf(file="KOG_Acer_host_fc.pdf", width=7, height=8)
pheatmap(as.matrix(ktable),clustering_distance_cols="correlation",color=color, cellwidth=15, cellheight=15)
# Making a heatmap with hierarchical clustering trees:
#pdf(file="KOG_Acer_host_fc.pdf", width=7, height=8)
pheatmap(as.matrix(ktable),color=color, cellwidth=15, cellheight=15)
