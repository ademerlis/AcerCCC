cures_frame_tilt_temp %>%
group_by(Datetime_EST) %>%
dplyr::mutate(Temperature = mean(Temperature)) %>%
distinct() -> cures_frame_tilt_temp
#temps after this date start looking off and like the tiltmeter is mis-reading it
cures_frame_tilt_temp %>%
filter(as.Date(Datetime_EST) <= "2021-12-07")  -> cures_frame_tilt_temp
str(cures_frame_tilt_temp)
#Temperature
#Datetime_EST (ymd_hms)
#site
# Define the window size (e.g., for a couple of days, window_size = 2)
window_size <- 3
# Calculate the rolling maximum temperature within the specified range
cures_data<- cures_frame_tilt_temp %>%
drop_na(Temperature) %>%
separate(Datetime_EST, into = c("Date", "Time"), sep = " ") %>%
mutate(Time = hms(Time)) %>%
mutate(Time_of_day = case_when(Time >= "7 H" & Time <= "18 H" ~ "Day",
TRUE ~ "Night")) %>%
dplyr::group_by(Date, Time_of_day) %>%
dplyr::mutate(mean_temp_day = mean(Temperature)) %>%
arrange(Date) %>%
mutate(RollingMax = rollmax(mean_temp_day, window_size, fill = NA, align = "right"),
RollingMin = rollapply(mean_temp_day, window_size, min, fill = NA, align = "right"),
MaxThreshold = RollingMax + 1,
MinThreshold = RollingMin - 1)
# Filter out temperatures exceeding the threshold (+3 degrees from the rolling max)
filtered_cures_data <- cures_data %>%
filter(Temperature <= MaxThreshold & Temperature >= MinThreshold)
filtered_cures_data %>%
ggplot(., aes(x=as.Date(Date), y=Temperature, color=site)) +
geom_point()
#ok this looks better
filtered_cures_data$Date <- ymd(filtered_cures_data$Date)
rows_to_replace <- grepl("0S", filtered_cures_data$Time) & !grepl("H|M", filtered_cures_data$Time)
filtered_cures_data$Time <- as.character(filtered_cures_data$Time)
filtered_cures_data$Time[rows_to_replace] <- gsub("0S", "00:00:00", filtered_cures_data$Time[rows_to_replace])
filtered_cures_data %>%
unite(Datetime_EST, Date, Time, sep = " ") %>%
mutate(Datetime_EST = ymd_hms(Datetime_EST)) -> filtered_cures_data
#HOBO logs every two hours
KB_01092018<-read_csv("KBNursery_2018_01_09.csv", skip = 1)
convertFtoC <- function(F) {
C <- (F - 32) * 5/9
return(C)
}
KB_01092018  %>%
select(!`#`) %>%
mutate(Datetime_EST=with_tz(mdy_hms(`Date Time, GMT-05:00`, tz = "Etc/GMT+5"), tzone = "Etc/GMT+5")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
dplyr::rename(Temperature = `Temp, °F (LGR S/N: 20194578, SEN S/N: 20194578)`) %>%
dplyr::rename(Light = `Intensity, lum/ft² (LGR S/N: 20194578, SEN S/N: 20194578)`) %>%
select(Temperature, Light, Datetime_EST) %>%
mutate(Temperature=convertFtoC(Temperature)) -> KB_01092018
KB_07092019<-read_csv("KBNursery_2019_07_09.csv", skip = 1)
KB_07092019  %>%
select(!`#`) %>%
mutate(Datetime_EST=with_tz(mdy_hms(`Date Time, GMT-04:00`, tz = "Etc/GMT+4"), tzone = "Etc/GMT+4")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
dplyr::rename(Temperature = `Temp, °C (LGR S/N: 10795158, SEN S/N: 10795158)`) %>%
dplyr::rename(Light = `Intensity, lum/ft² (LGR S/N: 10795158, SEN S/N: 10795158)`) %>%
select(Temperature, Light, Datetime_EST) -> KB_07092019
KB_10152019<-read_csv("KBNursery_2019_10_15.csv", skip = 1)
KB_10152019 %>%
select(!`#`) %>%
mutate(Datetime_EST=with_tz(mdy_hms(`Date Time, GMT-04:00`, tz = "Etc/GMT+4"), tzone = "Etc/GMT+4")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
dplyr::rename(Temperature = `Temp, °C (LGR S/N: 20518526, SEN S/N: 20518526)`) %>%
dplyr::rename(Light = `Intensity, lum/ft² (LGR S/N: 20518526, SEN S/N: 20518526)`) %>%
select(Temperature, Light, Datetime_EST) -> KB_10152019
KB_01162020<-read_csv("KBNursery_2020_01_16.csv", skip = 1)
KB_01162020 %>%
select(!`#`) %>%
mutate(Datetime_EST=with_tz(mdy_hms(`Date Time, GMT-05:00`, tz = "Etc/GMT+5"), tzone = "Etc/GMT+5")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
dplyr::rename(Temperature = `Temp, °C (LGR S/N: 20473194, SEN S/N: 20473194)`) %>%
dplyr::rename(Light = `Intensity, lum/ft² (LGR S/N: 20473194, SEN S/N: 20473194)`) %>%
select(Temperature, Light, Datetime_EST) -> KB_01162020
KB_03062020<-read_csv("KBNursery_2020_03_06.csv", skip = 1)
KB_03062020 %>%
mutate(Datetime_EST=with_tz(mdy_hms(`Date Time, GMT-05:00`, tz = "Etc/GMT+5"), tzone = "Etc/GMT+5")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
dplyr::rename(Temperature = `Temp, °C (LGR S/N: 20685544, SEN S/N: 20685544)`) %>%
dplyr::rename(Light = `Intensity, lum/ft² (LGR S/N: 20685544, SEN S/N: 20685544)`) %>%
select(Temperature, Light, Datetime_EST) -> KB_03062020
KB_05012020<-read_csv("KBNursery_2020_05_01.csv", skip = 1)
KB_05012020 %>%
mutate(Datetime_EST=with_tz(mdy_hms(`Date Time, GMT-04:00`, tz = "Etc/GMT+4"), tzone = "Etc/GMT+4")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
dplyr::rename(Temperature = `Temp, °C (LGR S/N: 20685559, SEN S/N: 20685559)`) %>%
dplyr::rename(Light = `Intensity, lum/ft² (LGR S/N: 20685559, SEN S/N: 20685559)`) %>%
select(Temperature, Light, Datetime_EST) -> KB_05012020
KB_09112020<-read_csv("KBNursery_2020_09_11.csv", skip = 1)
KB_09112020 %>%
mutate(Datetime_EST=with_tz(mdy_hm(`Date Time, GMT-04:00`, tz = "Etc/GMT+4"), tzone = "Etc/GMT+4")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
dplyr::rename(Temperature = `Temp, °C (LGR S/N: 20597589, SEN S/N: 20597589)`) %>%
dplyr::rename(Light = `Intensity, lum/ft² (LGR S/N: 20597589, SEN S/N: 20597589)`) %>%
select(Temperature, Light, Datetime_EST) -> KB_09112020
KB_02102021 <- read_csv("KBNursery_2021_02_10.csv", skip = 1)
KB_02102021 %>%
mutate(Datetime_EST=with_tz(mdy_hms(`Date Time, GMT-05:00`, tz = "Etc/GMT+5"), tzone = "Etc/GMT+5")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
dplyr::rename(Temperature = `Temp, °C (LGR S/N: 20976501, SEN S/N: 20976501)`) %>%
dplyr::rename(Light = `Intensity, lum/ft² (LGR S/N: 20976501, SEN S/N: 20976501)`) %>%
select(Temperature, Light, Datetime_EST) -> KB_02102021
KB_05282021 <- read_csv("KBNursery_2021_05_28.csv", skip = 1)
KB_05282021 %>%
mutate(Datetime_EST=with_tz(mdy_hms(`Date Time, GMT-04:00`, tz = "Etc/GMT+4"), tzone = "Etc/GMT+4")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
dplyr::rename(Temperature = `Temp, °C (LGR S/N: 21085862, SEN S/N: 21085862)`) %>%
select(Temperature, Datetime_EST) %>%
mutate(Light = NA) -> KB_05282021
KB_08112021 <- read_csv("KBNursery_2021_08_11.csv", skip = 1)
KB_08112021 %>%
mutate(Datetime_EST=with_tz(mdy_hm(`Date Time, GMT-04:00`, tz = "Etc/GMT+4"), tzone = "Etc/GMT+4")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
dplyr::rename(Temperature = `Temp, °C (LGR S/N: 20831178, SEN S/N: 20831178)`) %>%
dplyr::rename(Light = `Intensity, lum/ft² (LGR S/N: 20831178, SEN S/N: 20831178)`) %>%
select(Temperature, Light, Datetime_EST) -> KB_08112021
KB_120821 <- read_csv("KBNursery_2021_12_08.csv", skip = 1)
KB_120821%>%
mutate(Datetime_EST=with_tz(mdy_hm(`Date Time, GMT-05:00`, tz = "Etc/GMT+5"), tzone = "Etc/GMT+5")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
dplyr::rename(Temperature = `Temp, °C (LGR S/N: 21236769, SEN S/N: 21236769)`) %>%
dplyr::rename(Light = `Intensity, lum/ft² (LGR S/N: 21236769, SEN S/N: 21236769)`) %>%
select(Temperature, Light, Datetime_EST) -> KB_120821
rbind(KB_01092018, KB_07092019, KB_10152019, KB_01162020, KB_03062020, KB_05012020, KB_09112020, KB_02102021, KB_05282021, KB_08112021, KB_120821) -> all_KB_data
all_KB_data %>%
mutate(site = "Nursery") -> all_KB_data
all_KB_data$Temperature <- as.numeric(all_KB_data$Temperature)
#there are some outliers in the KB Nursery data that need to be filtered out
all_KB_data %>%
separate(Datetime_EST, into = c("Date", "Time"), sep = " ") %>%
drop_na(Temperature) %>%
dplyr::group_by(Date) %>%
dplyr::mutate(mean_temp_day = mean(Temperature)) %>%
pivot_longer(c("Temperature", "mean_temp_day"), names_to = "name", values_to = "temp") %>%
ggplot(., aes(x=Date, y=temp, color=name)) +
geom_point()
#lots of outliers
# Define the window size (e.g., for a couple of days, window_size = 2)
window_size <- 3
# Calculate the rolling maximum temperature within the specified range
data <- all_KB_data %>%
drop_na(Temperature) %>%
separate(Datetime_EST, into = c("Date", "Time"), sep = " ") %>%
mutate(Time = hms(Time)) %>%
mutate(Time_of_day = case_when(Time >= "7 H" & Time <= "18 H" ~ "Day",
TRUE ~ "Night")) %>%
dplyr::group_by(Date, Time_of_day) %>%
dplyr::mutate(mean_temp_day = mean(Temperature)) %>%
arrange(Date) %>%
mutate(RollingMax = rollmax(mean_temp_day, window_size, fill = NA, align = "right"),
RollingMin = rollapply(mean_temp_day, window_size, min, fill = NA, align = "right"),
MaxThreshold = RollingMax + 1,
MinThreshold = RollingMin - 1)
# Filter out temperatures exceeding the threshold (+3 degrees from the rolling max)
filtered_data <- data %>%
filter(Temperature <= MaxThreshold & Temperature >= MinThreshold)
filtered_data %>%
ggplot(., aes(x=as.Date(Date), y=Temperature, color=site)) +
geom_point()
#ok this looks better
filtered_data %>%
filter(Date >= "2019-07-01") -> filtered_data
rows_to_replace <- grepl("0S", filtered_data$Time) & !grepl("H|M", filtered_data$Time)
filtered_data$Time <- as.character(filtered_data$Time)
filtered_data$Time[rows_to_replace] <- gsub("0S", "00:00:00", filtered_data$Time[rows_to_replace])
filtered_data %>%
unite(Datetime_EST, Date, Time, sep = " ") %>%
mutate(Datetime_EST = ymd_hms(Datetime_EST)) -> filtered_data
full_join(filtered_data, filtered_cures_data) %>%
dplyr::select(!Light) %>%
drop_na(Temperature) -> all_temp_data
# Summary statistics per year per season
#2019 (nursery only: July-Dec)
all_temp_data %>%
filter(Datetime_EST < "2020-01-01 00:00:00")  %>%
mutate(Season = case_when(Datetime_EST < "2019-05-01 00:00:00" ~ "Dry",
Datetime_EST >= "2019-05-01 00:00:00" ~ "Wet")) %>%
dplyr::group_by(Time_of_day, site, Season) %>%
dplyr::summarise(mean_temp = mean(Temperature), sd_temp = sd(Temperature), min_temp = min(Temperature), max_temp = max(Temperature))
#2020
all_temp_data %>%
filter(Datetime_EST < "2021-01-01 00:00:00" & Datetime_EST > "2019-12-31 00:00:00") %>%
mutate(Season = case_when(Datetime_EST < "2020-05-01 00:00:00" ~ "Dry",
Datetime_EST >= "2020-05-01 00:00:00" ~ "Wet")) %>%
dplyr::group_by(Time_of_day, site, Season) %>%
dplyr::summarise(mean_temp = mean(Temperature), sd_temp = sd(Temperature), min_temp = min(Temperature), max_temp = max(Temperature))
#2021
all_temp_data %>%
filter(Datetime_EST < "2022-01-01 00:00:00" & Datetime_EST > "2020-12-31 00:00:00") %>%
mutate(Season = case_when(Datetime_EST < "2021-05-01 00:00:00" ~ "Dry",
Datetime_EST >= "2021-05-01 00:00:00" ~ "Wet")) %>%
dplyr::group_by(Time_of_day, site, Season) %>%
dplyr::summarise(mean_temp = mean(Temperature), sd_temp = sd(Temperature), min_temp = min(Temperature), max_temp = max(Temperature))
all_temp_data %>%
filter(Datetime_EST < "2022-01-01 00:00:00" & Datetime_EST > "2020-12-31 00:00:00") %>%
mutate(Season = case_when(Datetime_EST < "2021-05-01 00:00:00" ~ "Dry",
Datetime_EST >= "2021-05-01 00:00:00" ~ "Wet")) %>%
dplyr::group_by(site, Season) %>%
dplyr::group_by(site, Season) %>%
dplyr::summarise(mean_temp = mean(Temperature), sd_temp = sd(Temperature), min_temp = min(Temperature), max_temp = max(Temperature)) %>%
ggplot(., aes(x=Season,y=mean_temp,color=site)) +
geom_point(position = position_dodge(width = 0.3)) +
geom_errorbar(aes(ymin=mean_temp-sd_temp, ymax=mean_temp+sd_temp, fill=site), width = 0.2,position = position_dodge(width = 0.3)) +
theme_classic() +
scale_color_manual(values = c("CURES" = "orange", "Nursery" = "darkblue"))
filtered_data %>%
filter(Datetime_EST < "2021-12-08 00:00:00" & Datetime_EST > "2020-10-12 00:00:00") %>%
full_join(., filtered_cures_data) %>%
mutate(Season = case_when(Datetime_EST < "2021-05-01 00:00:00" & Datetime_EST > "2020-10-01 00:00:00" ~ "Dry",
Datetime_EST >= "2021-05-01 00:00:00" & Datetime_EST <= "2021-10-01 00:00:00" ~ "Wet",
Datetime_EST > "2021-10-01 00:00:00" ~ "Dry")) %>%
ungroup() %>%
dplyr::select(Temperature, Datetime_EST, site, Season) -> alldata_2020_2021
temp.summary<- summaryBy(Temperature ~ site + Season, data = alldata_2020_2021,
FUN = function(x) { c(max = max(x), min = min(x)) } )
temp.summary$Temp.seasonal <- temp.summary$Temperature.max - temp.summary$Temperature.min
alldata_2020_2021 %>%
separate(Datetime_EST, into = c("Date", "Time"), sep = " ") -> alldata_2020_2021_sep
# Daily Range
Daily.range <- summaryBy(Temperature ~ Date + site + Season, data=alldata_2020_2021_sep, FUN=c(max,min,mean,sd))
Daily.range$temp.daily.range <- Daily.range$Temperature.max - Daily.range$Temperature.min
temp.d.range <- summaryBy(temp.daily.range ~ site + Season, data = Daily.range,
FUN = function(x) { c(mean = mean(x)) } )
Daily.range %>%
filter(Temperature.max > 30.5) %>%
group_by(site, Season) %>%
dplyr::summarise(d.above.30.5 = n()) -> temp.d.30.5
full_join(temp.summary, temp.d.range) %>%
full_join(., temp.d.30.5) -> temp_summary
temp.d.range
Daily.range
temp_summary
temp.summary<- summaryBy(Temperature ~ site, data = alldata_2020_2021,
FUN = function(x) { c(max = max(x), min = min(x)) } )
temp.summary$Temp.seasonal <- temp.summary$Temperature.max - temp.summary$Temperature.min
alldata_2020_2021 %>%
separate(Datetime_EST, into = c("Date", "Time"), sep = " ") -> alldata_2020_2021_sep
# Daily Range
Daily.range <- summaryBy(Temperature ~ Date + site, data=alldata_2020_2021_sep, FUN=c(max,min,mean,sd))
Daily.range$temp.daily.range <- Daily.range$Temperature.max - Daily.range$Temperature.min
temp.d.range <- summaryBy(temp.daily.range ~ site, data = Daily.range,
FUN = function(x) { c(mean = mean(x)) } )
Daily.range %>%
filter(Temperature.max > 30.5) %>%
group_by(site) %>%
dplyr::summarise(d.above.30.5 = n()) -> temp.d.30.5
full_join(temp.summary, temp.d.range) %>%
full_join(., temp.d.30.5) -> temp_summary
scale_by_max <- function(x) {
x * 100 / max(x, na.rm = TRUE)
}
colnames(temp_summary) <- c("site", "Max", "Min", "Seasonal", "Daily", "30.5°C")
temp_summary %>%
column_to_rownames(var="site") -> temp_summary
temp_summary %>%
dplyr::mutate(across(everything(), as.numeric)) %>%
dplyr::mutate(across(everything(), scale_by_max)) -> temp_summary_percent
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each variable to show on the plot!
temp_summary_percent <- rbind(rep(100,5), rep(0,5), temp_summary_percent)
# Color vector
colors_border=c("orange", "darkblue")
colors_in=c("orange", "darkblue")
# Define colors with transparency using adjustcolor
colors_border <- c(adjustcolor("orange", alpha = 0.9), adjustcolor("darkblue", alpha = 0.9))
colors_in <- c(adjustcolor("orange", alpha = 0.4), adjustcolor("darkblue", alpha = 0.4))
library(fmsb)
# plot with default options:
#pdf("radarchart_alldata_30_5.pdf")
radarchart(temp_summary_percent, axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,100,25), cglwd=0.8,
#custom labels
vlcex=0.9
)
# plot with default options:
#pdf("radarchart_alldata_30_5.pdf")
radarchart(temp_summary_percent, axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(50,100,25), cglwd=0.8,
#custom labels
vlcex=0.9
)
# plot with default options:
#pdf("radarchart_alldata_30_5.pdf")
radarchart(temp_summary_percent, axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,100,25), cglwd=0.8,
#custom labels
vlcex=0.9
)
# plot with default options:
#pdf("radarchart_alldata_30_5.pdf")
radarchart(temp_summary_percent, axistype=2 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,100,25), cglwd=0.8,
#custom labels
vlcex=0.9
)
# plot with default options:
#pdf("radarchart_alldata_30_5.pdf")
radarchart(temp_summary_percent, axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,100,25), cglwd=0.8,
#custom labels
vlcex=0.9
)
library(GGally)
install.packages("GGally")
temp_summary
temp_summary %>%
rownames_to_column(var = "Location") -> temp_summary
temp_summary
ggparcoord(
temp_summary,
columns = 2:5, groupColumn = 1, order = "anyClass",
showPoints = TRUE,
title = "Parallel Coordinate Plot for the Iris Data",
alphaLines = 0.3
) +
theme_bw() +
theme(legend.position = "top")
library(GGally)
ggparcoord(
temp_summary,
columns = 2:5, groupColumn = 1, order = "anyClass",
showPoints = TRUE,
title = "Parallel Coordinate Plot for the Iris Data",
alphaLines = 0.3
) +
theme_bw() +
theme(legend.position = "top")
ggparcoord(
temp_summary,
columns = 2:5, groupColumn = 1,
showPoints = TRUE,
title = "Parallel Coordinate Plot for the Iris Data",
alphaLines = 0.3
) +
theme_bw() +
theme(legend.position = "top")
temp_summary
ggparcoord(
temp_summary,
columns = 2:5, groupColumn = 1,
showPoints = TRUE,
title = "Parallel Coordinate Plot for the Iris Data",
alphaLines = 0.3
) +
theme_bw() +
theme(legend.position = "top")
ggparcoord(
temp_summary,
columns = 2:5, groupColumn = 1,
showPoints = TRUE,
title = "Parallel Coordinate Plot for the Iris Data",
alphaLines = 0.3
) +
theme_bw() +
theme(legend.position = "top")
temp_summary
temp_summary
temp_summary %>%
pivot_longer(Max:`30.5ºC`, names_to = "Field", values_to = "value")
temp_summary
temp_summary %>%
pivot_longer(Max:`30.5°C`, names_to = "Field", values_to = "value")
temp_summary %>%
pivot_longer(Max:`30.5°C`, names_to = "Field", values_to = "value") -> temp_summary
ggdotchart(
temp_summary, x = "Field", y = "value",
group = "Location", color = "Location", palette = "jco",
add = "segment", position = position_dodge(0.3),
sorting = "descending"
)
library(ggpubr)
ggdotchart(
temp_summary, x = "Field", y = "value",
group = "Location", color = "Location", palette = "jco",
add = "segment", position = position_dodge(0.3),
sorting = "descending"
)
library(raster)
library(parallel)
library(ncdf4)
# Read climatology file
Climatology_MMM <- "ct5km_climatology_v3.1.nc"
MMM.data <- brick(Climatology_MMM)
#MMM.data
# KB Nursery
lat_KB <- (25.6763)
lon_KB <- (-80.0987)
extract.pts_KB <- cbind(lon_KB,lat_KB)
#CCC
lat.CCC <- (25.766626)
lon.CCC <- (-80.144812)
extract_CCC <- cbind(lon.CCC, lat.CCC)
#MMM <- raster::extract(MMM.data, extract.pts,method="bilinear")
MMM <- raster::extract(MMM.data, extract.pts_KB,method="simple")
MMM_CCC <- raster::extract(MMM.data, extract_CCC,method="simple")
#since MMM is the sam,e use MMM
MMM
#since MMM is the sam,e use MMM
MMM_CCC
#since MMM is the sam,e use MMM
MMM_
#since MMM is the sam,e use MMM
MMM
#since MMM is the sam,e use MMM
MMM_CCC
View(MMM_CCC)
View(MMM)
View(MMM_CCC)
View(alldata_2020_2021_sep)
View(alldata_2020_2021)
alldata_2020_2021_sep$HotSpot <- alldata_2020_2021_sep$Temperature-(29.5)
alldata_2020_2021_sep
alldata_2020_2021_sep
alldata_2020_2021_sep %>%
mutate(HotSpot = case_when(site == "Nursery" ~ (Temperature - 29.53)))
alldata_2020_2021_sep %>%
mutate(HotSpot = case_when(site == "Nursery" ~ (Temperature - 29.53),
site == "CCC" ~ (Temperature - 29.54)))
alldata_2020_2021_sep %>%
filter(site == "CCC")
alldata_2020_2021_sep %>%
mutate(HotSpot = case_when(site == "Nursery" ~ (Temperature - 29.53),
site == "CURES" ~ (Temperature - 29.54)))
alldata_2020_2021_sep %>%
filter(site == "CURES")
29.49530-29.54
alldata_2020_2021_sep %>%
mutate(HotSpot = case_when(site == "Nursery" ~ (Temperature - 29.53),
site == "CURES" ~ (Temperature - 29.54)))
alldata_2020_2021_sep %>%
mutate(HotSpot = case_when(site == "Nursery" ~ (Temperature - 29.53),
site == "CURES" ~ (Temperature - 29.54))) -> alldata_2020_2021_sep
alldata_2020_2021_sep %>%
filter(site == "CURES")
alldata_2020_2021_sep$HotSpot<-ifelse(alldata_2020_2021_sep$HotSpot>=0,
alldata_2020_2021_sep$HotSpot, 0)# REMOVE NEGATIVE ANOMALIES
alldata_2020_2021_sep
alldata_2020_2021_sep$Stress<-ifelse(alldata_2020_2021_sep$HotSpot>=1,
alldata_2020_2021_sep$HotSpot, 0) # REMOVE HotSpot lower than 1
alldata_2020_2021_sep
alldata_2020_2021_sep$W_Stress<-(alldata_2020_2021_sep$Stress/7) # DHDays to DHWeeks
alldata_2020_2021_sep
alldata_2020_2021_sep
alldata_2020_2021_sep %>%
group_by(Date, site) %>%
summarise(mean_temp = mean(Temperature))
alldata_2020_2021_sep %>%
dplyr::group_by(Date, site) %>%
summarise(mean_temp = mean(Temperature))
alldata_2020_2021_sep %>%
dplyr::group_by(Date, site)
alldata_2020_2021_sep %>%
dplyr::group_by(Date, site) %>%
summarise(mean_temp = mean(Temperature))
alldata_2020_2021_sep %>%
dplyr::group_by(Date, site)
alldata_2020_2021
alldata_2020_2021_sep %>%
dplyr::group_by(Date, site) %>%
summarise(mean_temp = mean(Temperature))
alldata_2020_2021_sep %>%
tidyr::group_by(Date, site) %>%
summarise(mean_temp = mean(Temperature))
alldata_2020_2021_sep %>%
group_by(Date, site) %>%
summarise(mean_temp = mean(Temperature))
alldata_2020_2021_sep %>%
group_by(Date, site)
alldata_2020_2021_sep %>%
select(!Time,Season,HotSpot,Stress,W_Stress)
alldata_2020_2021_sep %>%
dplyr::select(!Time,Season,HotSpot,Stress,W_Stress)
alldata_2020_2021_sep %>%
dplyr::select(!c(Time,Season,HotSpot,Stress,W_Stress))
alldata_2020_2021_sep %>%
dplyr::select(!c(Time,Season,HotSpot,Stress,W_Stress)) %>%
group_by(Date, site) %>%
summarise(mean_temp = mean(Temperature))
alldata_2020_2021_sep %>%
dplyr::select(!c(Time,Season,HotSpot,Stress,W_Stress)) %>%
dplyr::group_by(Date, site) %>%
summarise(mean_temp = mean(Temperature))
alldata_2020_2021_sep %>%
dplyr::select(!c(Time,Season,HotSpot,Stress,W_Stress)) %>%
dplyr::group_by(Date, site)
alldata_2020_2021_sep %>%
dplyr::select(!c(Time,Season,HotSpot,Stress,W_Stress)) %>%
mutate(Date = as.Date(Date))
alldata_2020_2021_sep %>%
dplyr::select(!c(Time,Season,HotSpot,Stress,W_Stress)) %>%
mutate(Date = as.Date(Date)) %>%
dplyr::group_by(Date, site) %>%
summarise(mean_temp = mean(Temperature))
