colors_in <- c(adjustcolor("orange", alpha = 0.4), adjustcolor("darkblue", alpha = 0.4))
full_join(temp.summary, temp.d.range) %>%
full_join(., temp.d.30) -> temp_summary
colnames(temp_summary) <- c("site", "Max", "Min", "Seasonal", "Daily", "30Â°C")
temp_summary %>%
column_to_rownames(var="site") -> temp_summary
temp_summary %>%
mutate(across(everything(), as.numeric)) %>%
mutate(across(everything(), fn))
fn <- function(x) x * 100/max(x, na.rm = TRUE)
fn(c(0,1,0))
temp_summary %>%
mutate(across(everything(), as.numeric)) %>%
mutate(across(everything(), fn))
scale_by_max <- function(x) {
x * 100 / max(x, na.rm = TRUE)
}
temp_summary %>%
mutate(across(everything(), as.numeric)) %>%
mutate(across(everything(), scale_by_max))
temp_summary %>%
dplyr::mutate(across(everything(), as.numeric)) %>%
dplyr::mutate(across(everything(), scale_by_max))
temp_summary %>%
dplyr::mutate(across(everything(), as.numeric)) %>%
dplyr::mutate(across(everything(), scale_by_max)) -> temp_summary_percent
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each variable to show on the plot!
temp_summary_percent <- rbind(rep(100,5), rep(0,5), temp_summary_percent)
colors_border=c("orange", "darkblue")
colors_in=c("orange", "darkblue")
# Define colors with transparency using adjustcolor
colors_border <- c(adjustcolor("orange", alpha = 0.9), adjustcolor("darkblue", alpha = 0.9))
colors_in <- c(adjustcolor("orange", alpha = 0.4), adjustcolor("darkblue", alpha = 0.4))
# plot with default options:
radarchart(temp_summary_percent, axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,100,25), cglwd=0.8,
#custom labels
vlcex=0.9
)
# Add a legend
legend(x=0.9, y=0.9, legend = rownames(temp_summary_percent[-c(1,2),]), bty = "n", pch=20 , col=colors_border , text.col = "black", cex=1.2, pt.cex=3)
radarchart(temp_summary_percent, axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,100,25), cglwd=0.8,
#custom labels
vlcex=0.9
)
dev.off()
# Add a legend
legend(x=0.9, y=0.9, legend = rownames(temp_summary_percent[-c(1,2),]), bty = "n", pch=20 , col=colors_border , text.col = "black", cex=1.2, pt.cex=3)
alldata_2020_2021
filtered_data %>%
filter(as.Date(Datetime_EST) < "2021-12-08" & as.Date(Datetime_EST) > "2020-10-12") %>%
full_join(., filtered_cures_data) %>%
filtered_data %>%
filter(as.Date(Datetime_EST) < "2021-12-08" & as.Date(Datetime_EST) > "2020-10-12") %>%
full_join(., filtered_cures_data) %>%
ungroup()
filtered_data %>%
filter(as.Date(Datetime_EST) < "2021-12-08" & as.Date(Datetime_EST) > "2020-10-12") %>%
mutate(Season = case_when(as.Date(Datetime_EST) < "2021-05-01" ~ "Dry",
as.Date(Datetime_EST) >= "2021-05-01" & =< "2021-10-01" ~ "Wet")) %>%
filtered_data %>%
filter(as.Date(Datetime_EST) < "2021-12-08" & as.Date(Datetime_EST) > "2020-10-12") %>%
mutate(Season = case_when(as.Date(Datetime_EST) < "2021-05-01" ~ "Dry",
as.Date(Datetime_EST) >= "2021-05-01" & as.Date(Datetime_EST) =< "2021-10-01" ~ "Wet"))
filtered_data %>%
filter(as.Date(Datetime_EST) < "2021-12-08" & as.Date(Datetime_EST) > "2020-10-12") %>%
mutate(Season = case_when(as.Date(Datetime_EST) < "2021-05-01" ~ "Dry",
as.Date(Datetime_EST) >= "2021-05-01" & as.Date(Datetime_EST) <= "2021-10-01" ~ "Wet"))
filtered_data %>%
filter(as.Date(Datetime_EST) < "2021-12-08" & as.Date(Datetime_EST) > "2020-10-12") %>%
mutate(Season = case_when(as.Date(Datetime_EST) < "2021-05-01" & as.Date(Datetime_EST) > "2020-10-01" ~ "Dry",
as.Date(Datetime_EST) >= "2021-05-01" & as.Date(Datetime_EST) <= "2021-10-01" ~ "Wet"))
full_join(., filtered_cures_data) %>%
ungroup() %>%
dplyr::select(Temperature, Datetime_EST, site, Season) -> alldata_2020_2021
filtered_data %>%
filter(as.Date(Datetime_EST) < "2021-12-08" & as.Date(Datetime_EST) > "2020-10-12") %>%
mutate(Season = case_when(as.Date(Datetime_EST) < "2021-05-01" & as.Date(Datetime_EST) > "2020-10-01" ~ "Dry",
as.Date(Datetime_EST) >= "2021-05-01" & as.Date(Datetime_EST) <= "2021-10-01" ~ "Wet")) %>%
full_join(., filtered_cures_data) %>%
ungroup() %>%
dplyr::select(Temperature, Datetime_EST, site, Season) -> alldata_2020_2021
alldata_2020_2021
View(alldata_2020_2021)
filtered_data %>%
filter(as.Date(Datetime_EST) < "2021-12-08" & as.Date(Datetime_EST) > "2020-10-12") %>%
mutate(Season = case_when(as.Date(Datetime_EST) < "2021-05-01" & as.Date(Datetime_EST) > "2020-10-01" ~ "Dry",
as.Date(Datetime_EST) >= "2021-05-01" & as.Date(Datetime_EST) <= "2021-10-01" ~ "Wet",
as.Date(Datetime_EST) > "2021-10-01" ~ "Dry")) %>%
full_join(., filtered_cures_data) %>%
ungroup() %>%
dplyr::select(Temperature, Datetime_EST, site, Season) -> alldata_2020_2021
View(alldata_2020_2021)
filtered_data %>%
filter(as.Date(Datetime_EST) < "2021-12-08" & as.Date(Datetime_EST) > "2020-10-12") %>%
mutate(Season = case_when(as.Date(Datetime_EST) < "2021-05-01" & as.Date(Datetime_EST) > "2020-10-01" ~ "Dry",
as.Date(Datetime_EST) >= "2021-05-01" & as.Date(Datetime_EST) <= "2021-10-01" ~ "Wet",
as.Date(Datetime_EST) > "2021-10-01" ~ "Dry"))
filtered_cures_data
filtered_data %>%
filter(as.Date(Datetime_EST) < "2021-12-08" & as.Date(Datetime_EST) > "2020-10-12") %>%
full_join(., filtered_cures_data) %>%
mutate(Season = case_when(as.Date(Datetime_EST) < "2021-05-01" & as.Date(Datetime_EST) > "2020-10-01" ~ "Dry",
as.Date(Datetime_EST) >= "2021-05-01" & as.Date(Datetime_EST) <= "2021-10-01" ~ "Wet",
as.Date(Datetime_EST) > "2021-10-01" ~ "Dry")) %>%
ungroup() %>%
dplyr::select(Temperature, Datetime_EST, site, Season) -> alldata_2020_2021
View(alldata_2020_2021)
temp.summary<- summaryBy(Temperature ~ site + Season, data = alldata_2020_2021,
FUN = function(x) { c(max = max(x), min = min(x)) } )
temp.summary
filtered_data %>%
filter(as.Date(Datetime_EST) < "2021-12-08" & as.Date(Datetime_EST) > "2020-10-12") %>%
full_join(., filtered_cures_data) %>%
mutate(Season = case_when(as.Date(Datetime_EST) < "2021-05-01" & as.Date(Datetime_EST) > "2020-10-01" ~ "Dry",
as.Date(Datetime_EST) >= "2021-05-01" & as.Date(Datetime_EST) <= "2021-10-01" ~ "Wet",
as.Date(Datetime_EST) > "2021-10-01" ~ "Dry")) %>%
is.na(Season)
filtered_data %>%
filter(as.Date(Datetime_EST) < "2021-12-08" & as.Date(Datetime_EST) > "2020-10-12") %>%
full_join(., filtered_cures_data) %>%
mutate(Season = case_when(as.Date(Datetime_EST) < "2021-05-01" & as.Date(Datetime_EST) > "2020-10-01" ~ "Dry",
as.Date(Datetime_EST) >= "2021-05-01" & as.Date(Datetime_EST) <= "2021-10-01" ~ "Wet",
as.Date(Datetime_EST) > "2021-10-01" ~ "Dry")) %>%
view(is.na(Season))
filtered_data %>%
filter(as.Date(Datetime_EST) < "2021-12-08" & as.Date(Datetime_EST) > "2020-10-12") %>%
full_join(., filtered_cures_data) %>%
mutate(Season = case_when(as.Date(Datetime_EST) < "2021-05-01" & as.Date(Datetime_EST) > "2020-10-01" ~ "Dry",
as.Date(Datetime_EST) >= "2021-05-01" & as.Date(Datetime_EST) <= "2021-10-01" ~ "Wet",
as.Date(Datetime_EST) > "2021-10-01" ~ "Dry")) %>%
filter(Season = is.na())
filtered_data %>%
filter(as.Date(Datetime_EST) < "2021-12-08" & as.Date(Datetime_EST) > "2020-10-12") %>%
full_join(., filtered_cures_data) %>%
mutate(Season = case_when(as.Date(Datetime_EST) < "2021-05-01" & as.Date(Datetime_EST) > "2020-10-01" ~ "Dry",
as.Date(Datetime_EST) >= "2021-05-01" & as.Date(Datetime_EST) <= "2021-10-01" ~ "Wet",
as.Date(Datetime_EST) > "2021-10-01" ~ "Dry")) %>%
filter(Season == is.na())
filtered_data %>%
filter(as.Date(Datetime_EST) < "2021-12-08" & as.Date(Datetime_EST) > "2020-10-12") %>%
full_join(., filtered_cures_data) %>%
mutate(Season = case_when(as.Date(Datetime_EST) < "2021-05-01" & as.Date(Datetime_EST) > "2020-10-01" ~ "Dry",
as.Date(Datetime_EST) >= "2021-05-01" & as.Date(Datetime_EST) <= "2021-10-01" ~ "Wet",
as.Date(Datetime_EST) > "2021-10-01" ~ "Dry")) %>%
ungroup() %>%
filter(Season == is.na())
alldata_2020_2021
alldata_2020_2021 %>%
drop_na(Season)
alldata_2020_2021 %>%
filter(Season == "NA")
alldata_2020_2021 %>%
filter(is.na(Season))
all_KB_data %>%
drop_na(Temperature) %>%
dplyr::group_by(as.Date(Datetime_EST)) %>%
dplyr::mutate(mean_temp_day = mean(Temperature))
all_KB_data %>%
drop_na(Temperature) %>%
dplyr::group_by(ymd(Datetime_EST)) %>%
dplyr::mutate(mean_temp_day = mean(Temperature))
filtered_cures_data
filtered_cures_data %>%
ggplot(., aes(x=Datetime_EST, y=Temperature, color=site)) +
geom_point()
# Filter out temperatures exceeding the threshold (+3 degrees from the rolling max)
filtered_cures_data <- cures_data %>%
filter(Temperature <= MaxThreshold & Temperature >= MinThreshold)
filtered_cures_data %>%
ggplot(., aes(x=Datetime_EST, y=Temperature, color=site)) +
geom_point()
filtered_cures_data
filtered_cures_data %>%
ggplot(., aes(x=as.Date(Date), y=Temperature, color=site)) +
geom_point()
filtered_cures_data$Date <- ymd(filtered_cures_data$Date)
filtered_cures_data %>%
unite(Datetime_EST, Date, Time, sep = " ")
filtered_cures_data <- gsub(" 0S", " 00:00:00", filtered_cures_data)
filtered_cures_data
# Filter out temperatures exceeding the threshold (+3 degrees from the rolling max)
filtered_cures_data <- cures_data %>%
filter(Temperature <= MaxThreshold & Temperature >= MinThreshold)
filtered_cures_data$Date <- ymd(filtered_cures_data$Date)
filtered_cures_data$Time <- gsub(" 0S", " 00:00:00", filtered_cures_data$Time)
View(filtered_cures_data)
# Filter out temperatures exceeding the threshold (+3 degrees from the rolling max)
filtered_cures_data <- cures_data %>%
filter(Temperature <= MaxThreshold & Temperature >= MinThreshold)
filtered_cures_data$Date <- ymd(filtered_cures_data$Date)
filtered_cures_data$Time <- gsub("0S", " 00:00:00", filtered_cures_data$Time)
# Filter out temperatures exceeding the threshold (+3 degrees from the rolling max)
filtered_cures_data <- cures_data %>%
filter(Temperature <= MaxThreshold & Temperature >= MinThreshold)
filtered_cures_data$Date <- ymd(filtered_cures_data$Date)
rows_to_replace <- grepl("0S", filtered_cures_data$Time) & !grepl("H|M", filtered_cures_data$Time)
filtered_cures_data$Time[rows_to_replace] <- gsub("0S", "00:00:00", filtered_cures_data$Time[rows_to_replace])
View(filtered_cures_data)
View(filtered_cures_data)
rows_to_replace
filtered_cures_data
filtered_cures_data$Time <- as.character(filtered_cures_data$Time)
View(filtered_cures_data)
filtered_cures_data
filtered_cures_data$Time[rows_to_replace] <- gsub("0S", "00:00:00", filtered_cures_data$Time[rows_to_replace])
filtered_cures_data
filtered_cures_data %>%
unite(Datetime_EST, Date, Time, sep = " ") %>%
mutate(Datetime_EST = ymd_hms(Datetime_EST))
filtered_cures_data %>%
unite(Datetime_EST, Date, Time, sep = " ") %>%
mutate(Datetime_EST = ymd_hms(Datetime_EST)) -> filtered_cures_data
full_join(filtered_data, filtered_cures_data) %>%
select(!Light) %>%
ggplot(., aes(x=Datetime_EST, y=Temperature, color = site)) +
geom_line() +
theme_minimal() +
labs(x="Date", y = "Temp (ÂºC)") +
scale_color_manual(values = c("CURES" = "orange", "Nursery" = "darkblue"))
filtered_data
# Filter out temperatures exceeding the threshold (+3 degrees from the rolling max)
filtered_data <- data %>%
filter(Temperature <= MaxThreshold & Temperature >= MinThreshold)
filtered_data
filtered_data %>%
filter(Date >= "2019-07-01") -> filtered_data
filtered_data
rows_to_replace <- grepl("0S", filtered_data$Time) & !grepl("H|M", filtered_data$Time)
filtered_data$Time <- as.character(filtered_data$Time)
filtered_data$Time[rows_to_replace] <- gsub("0S", "00:00:00", filtered_data$Time[rows_to_replace])
filtered_data
filtered_data %>%
unite(Datetime_EST, Date, Time, sep = " ") %>%
mutate(Datetime_EST = ymd_hms(Datetime_EST))
filtered_data %>%
unite(Datetime_EST, Date, Time, sep = " ") %>%
mutate(Datetime_EST = ymd_hms(Datetime_EST)) -> filtered_data
full_join(filtered_data, filtered_cures_data) %>%
select(!Light) %>%
ggplot(., aes(x=Datetime_EST, y=Temperature, color = site)) +
geom_line() +
theme_minimal() +
labs(x="Date", y = "Temp (ÂºC)") +
scale_color_manual(values = c("CURES" = "orange", "Nursery" = "darkblue"))
ggsave("CURES_nursery_temp_together.pdf")
full_join(filtered_data, filtered_cures_data) %>%
select(!Light) %>%
filter(as.Date(Datetime_EST) > "2021-06-10" & as.Date(Datetime_EST) < "2021-12-07") %>%
ggplot(., aes(x=Datetime_EST, y=Temperature, color = site)) +
geom_line() +
theme_minimal() +
labs(x="Date", y = "Temp (ÂºC)") +
scale_color_manual(values = c("CURES" = "orange", "Nursery" = "darkblue"))
ggsave("CURES_nursery_temp_junedec2021.pdf")
full_join(filtered_data, filtered_cures_data) %>%
select(!Light) %>%
filter(as.Date(Datetime_EST) > "2021-10-10" & as.Date(Datetime_EST) < "2021-10-13") %>%
ggplot(., aes(x=Datetime_EST, y=Temperature, color = site)) +
geom_point() +
theme_minimal() +
labs(x="Date", y = "Temp (ÂºC)") +
scale_color_manual(values = c("CURES" = "orange", "Nursery" = "darkblue"))
full_join(filtered_data, filtered_cures_data) %>%
select(!Light) %>%
drop_na(Temperature) -> all_temp_data
#2019 (nursery only: July-Dec)
all_temp_data %>%
filter(Datetime_EST < "2020-01-01 00:00:00")  %>%
mutate(Season = case_when(Datetime_EST < "2019-05-01 00:00:00" ~ "Dry",
Datetime_EST >= "2019-05-01 00:00:00" ~ "Wet")) %>%
dplyr::group_by(Time_of_day, site, Season) %>%
dplyr::summarise(mean_temp = mean(Temperature), sd_temp = sd(Temperature), min_temp = min(Temperature), max_temp = max(Temperature))
#2020
all_temp_data %>%
filter(Datetime_EST < "2021-01-01 00:00:00" & Datetime_EST > "2019-12-31 00:00:00") %>%
mutate(Season = case_when(Datetime_EST < "2020-05-01 00:00:00" ~ "Dry",
Datetime_EST >= "2020-05-01 00:00:00" ~ "Wet")) %>%
dplyr::group_by(Time_of_day, site, Season) %>%
dplyr::summarise(mean_temp = mean(Temperature), sd_temp = sd(Temperature), min_temp = min(Temperature), max_temp = max(Temperature))
#2021
all_temp_data %>%
filter(Datetime_EST < "2022-01-01 00:00:00" & Datetime_EST > "2020-12-31 00:00:00") %>%
mutate(Season = case_when(Datetime_EST < "2021-05-01 00:00:00" ~ "Dry",
Datetime_EST >= "2021-05-01 00:00:00" ~ "Wet")) %>%
dplyr::group_by(Time_of_day, site, Season) %>%
dplyr::summarise(mean_temp = mean(Temperature), sd_temp = sd(Temperature), min_temp = min(Temperature), max_temp = max(Temperature))
all_temp_data %>%
filter(Datetime_EST < "2022-01-01 00:00:00" & Datetime_EST > "2020-12-31 00:00:00") %>%
mutate(Season = case_when(Datetime_EST < "2021-05-01 00:00:00" ~ "Dry",
Datetime_EST >= "2021-05-01 00:00:00" ~ "Wet")) %>%
dplyr::group_by(site, Season) %>%
dplyr::group_by(site, Season) %>%
dplyr::summarise(mean_temp = mean(Temperature), sd_temp = sd(Temperature), min_temp = min(Temperature), max_temp = max(Temperature)) %>%
ggplot(., aes(x=Season,y=mean_temp,color=site)) +
geom_point(position = position_dodge(width = 0.3)) +
geom_errorbar(aes(ymin=mean_temp-sd_temp, ymax=mean_temp+sd_temp, fill=site), width = 0.2,position = position_dodge(width = 0.3)) +
theme_classic() +
scale_color_manual(values = c("CURES" = "orange", "Nursery" = "darkblue"))
filtered_data %>%
filter(Datetime_EST < "2021-12-08 00:00:00" & Datetime_EST > "2020-10-12 00:00:00") %>%
full_join(., filtered_cures_data) %>%
mutate(Season = case_when(Datetime_EST < "2021-05-01 00:00:00" & Datetime_EST > "2020-10-01 00:00:00" ~ "Dry",
Datetime_EST >= "2021-05-01 00:00:00" & Datetime_EST <= "2021-10-01 00:00:00" ~ "Wet",
Datetime_EST > "2021-10-01 00:00:00" ~ "Dry")) %>%
ungroup() %>%
dplyr::select(Temperature, Datetime_EST, site, Season) -> alldata_2020_2021
alldata_2020_2021 %>%
filter(is.na(Season))
temp.summary<- summaryBy(Temperature ~ site + Season, data = alldata_2020_2021,
FUN = function(x) { c(max = max(x), min = min(x)) } )
temp.summary$Temp.seasonal <- temp.summary$Temperature.max - temp.summary$Temperature.min
alldata_2020_2021 %>%
separate(Datetime_EST, into = c("Date", "Time"), sep = " ") -> alldata_2020_2021_sep
# Daily Range
Daily.range <- summaryBy(Temperature ~ Date + site, data=alldata_2020_2021_sep, FUN=c(max,min,mean,sd))
Daily.range$temp.daily.range <- Daily.range$Temperature.max - Daily.range$Temperature.min
temp.d.range <- summaryBy(temp.daily.range ~ site, data = Daily.range,
FUN = function(x) { c(mean = mean(x)) } )
temp.d.30 <- summaryBy(Temperature.max ~ site, data = Daily.range,
FUN = function(x) { c(d.above.30 = count(x>30)) } )
Daily.range %>%
filter(Temperature.max > 30) %>%
group_by(site) %>%
dplyr::summarise(d.above.30 = n()) -> temp.d.30
full_join(temp.summary, temp.d.range) %>%
full_join(., temp.d.30) -> temp_summary
temp_summary
scale_by_max <- function(x) {
x * 100 / max(x, na.rm = TRUE)
}
colnames(temp_summary) <- c("site", "Max", "Min", "Seasonal", "Daily", "30Â°C")
temp_summary %>%
column_to_rownames(var="site") -> temp_summary
temp_summary
colnames(temp_summary) <- c("site", "season", "Max", "Min", "Seasonal", "Daily", "30Â°C")
temp_summary %>%
column_to_rownames(var="site") -> temp_summary
temp_summary
temp_summary %>%
column_to_rownames(var="site")
temp_summary
temp_summary_dry %>%
filter(seaon == "Dry")
temp_summary %>%
filter(seaon == "Dry")
temp_summary %>%
filter(season == "Dry")
temp_summary
Daily.range %>%
filter(Temperature.max > 30) %>%
group_by(site, Season) %>%
dplyr::summarise(d.above.30 = n()) -> temp.d.30
# Daily Range
Daily.range <- summaryBy(Temperature ~ Date + site + Season, data=alldata_2020_2021_sep, FUN=c(max,min,mean,sd))
Daily.range$temp.daily.range <- Daily.range$Temperature.max - Daily.range$Temperature.min
temp.d.range <- summaryBy(temp.daily.range ~ site + Season, data = Daily.range,
FUN = function(x) { c(mean = mean(x)) } )
temp.d.30 <- summaryBy(Temperature.max ~ site + Season, data = Daily.range,
FUN = function(x) { c(d.above.30 = count(x>30)) } )
temp.d.30
Daily.range %>%
filter(Temperature.max > 30) %>%
group_by(site, Season) %>%
dplyr::summarise(d.above.30 = n()) -> temp.d.30
temp.d.30
Daily.range %>%
filter(Temperature.max > 30)
Daily.range %>%
filter(Temperature.max > 30) %>%
group_by(site, Season) %>%
dplyr::summarise(d.above.30 = n()) -> temp.d.30
temp.d.30
full_join(temp.summary, temp.d.range) %>%
full_join(., temp.d.30) -> temp_summary
temp_summary
temp_summary %>%
filter(season == "Dry") -> temp_summary_dry
temp_summary
colnames(temp_summary) <- c("site", "Season", "Max", "Min", "Seasonal", "Daily", "30Â°C")
temp_summary %>%
filter(Season == "Dry") -> temp_summary_dry
temp_summary_dry
temp_summary_dry %>%
column_to_rownames(var="site") -> temp_summary_dry
temp_summary_dry %>%
dplyr::mutate(across(everything(), as.numeric)) %>%
dplyr::mutate(across(everything(), scale_by_max)) -> temp_summary_dry_percent
temp_summary_dry %>%
dplyr::mutate(across(everything(), as.numeric))
temp_summary_dry %>%
dplyr::mutate(across(everything(), as.numeric)) %>%
select(!`30Â°C`)
temp_summary_dry %>%
dplyr::mutate(across(everything(), as.numeric)) %>%
select(!`30Â°C`)
temp_summary_dry
temp_summary_dry %>%
column_to_rownames(var="site") %>%
select(!Season) -> temp_summary_dry
temp_summary %>%
filter(Season == "Dry") -> temp_summary_dry
temp_summary_dry %>%
column_to_rownames(var="site") %>%
select(!Season) -> temp_summary_dry
temp_summary_dry %>%
dplyr::mutate(across(everything(), as.numeric)) %>%
select(!`30Â°C`)
temp_summary_dry %>%
dplyr::mutate(across(everything(), as.numeric)) %>%
select(!`30Â°C`) %>%
dplyr::mutate(across(everything(), scale_by_max)) -> temp_summary_dry_percent
temp_summary_dry_percent
temp_summary_dry_percent <- rbind(rep(100,5), rep(0,5), temp_summary_dry_percent)
# Color vector
colors_border=c("orange", "darkblue")
colors_in=c("orange", "darkblue")
# Define colors with transparency using adjustcolor
colors_border <- c(adjustcolor("orange", alpha = 0.9), adjustcolor("darkblue", alpha = 0.9))
colors_in <- c(adjustcolor("orange", alpha = 0.4), adjustcolor("darkblue", alpha = 0.4))
library(fmsb)
# plot with default options:
radarchart(temp_summary_dry_percent, axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,100,25), cglwd=0.8,
#custom labels
vlcex=0.9
)
temp_summary %>%
filter(Season == "Wet") -> temp_summary_wet
temp_summary_wet %>%
column_to_rownames(var="site") %>%
select(!Season) -> temp_summary_wet
temp_summary_wet
temp_summary_wet %>%
dplyr::mutate(across(everything(), as.numeric)) %>%
dplyr::mutate(across(everything(), scale_by_max)) -> temp_summary_wet_percent
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each variable to show on the plot!
temp_summary_wet_percent <- rbind(rep(100,5), rep(0,5), temp_summary_wet_percent)
# plot with default options:
radarchart(temp_summary_wet_percent, axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,100,25), cglwd=0.8,
#custom labels
vlcex=0.9
)
dev.off()
pdf("radarchart_wetseason.pdf")
radarchart(temp_summary_wet_percent, axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,100,25), cglwd=0.8,
#custom labels
vlcex=0.9
)
dev.off()
pdf("radarchart_dryseason.pdf")
radarchart(temp_summary_dry_percent, axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,100,25), cglwd=0.8,
#custom labels
vlcex=0.9
)
temp.summary<- summaryBy(Temperature ~ site, data = alldata_2020_2021,
FUN = function(x) { c(max = max(x), min = min(x)) } )
temp.summary$Temp.seasonal <- temp.summary$Temperature.max - temp.summary$Temperature.min
alldata_2020_2021 %>%
separate(Datetime_EST, into = c("Date", "Time"), sep = " ") -> alldata_2020_2021_sep
# Daily Range
Daily.range <- summaryBy(Temperature ~ Date + site, data=alldata_2020_2021_sep, FUN=c(max,min,mean,sd))
Daily.range$temp.daily.range <- Daily.range$Temperature.max - Daily.range$Temperature.min
temp.d.range <- summaryBy(temp.daily.range ~ site, data = Daily.range,
FUN = function(x) { c(mean = mean(x)) } )
Daily.range %>%
filter(Temperature.max > 30) %>%
group_by(site) %>%
dplyr::summarise(d.above.30 = n()) -> temp.d.30
full_join(temp.summary, temp.d.range) %>%
full_join(., temp.d.30) -> temp_summary
colnames(temp_summary) <- c("site", "Max", "Min", "Seasonal", "Daily", "30Â°C")
temp_summary %>%
column_to_rownames(var="site") -> temp_summary
temp_summary %>%
dplyr::mutate(across(everything(), as.numeric)) %>%
dplyr::mutate(across(everything(), scale_by_max)) -> temp_summary_percent
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each variable to show on the plot!
temp_summary_percent <- rbind(rep(100,5), rep(0,5), temp_summary_percent)
pdf("radarchart_alldata.pdf")
radarchart(temp_summary_percent, axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,100,25), cglwd=0.8,
#custom labels
vlcex=0.9
)
temp_summary
temp_summary_wet
