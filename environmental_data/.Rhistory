treat_outliers
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3) %>%
as.matrix() -> treat_outliers
treat_outliers
#remove outliers
daily_variability %>%
arrange(desc(daily_variability))
treat_outliers
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
treat_model <- lm(log(daily_variability) ~ site*season, data = daily_variability)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # very significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ site*season, data = treat_model_metrics) #significant
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
#remove outliers
daily_variability %>%
arrange(desc(daily_variability))
treat_model_metrics
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
#remove outliers
daily_variability %>%
arrange(desc(daily_variability))
#need to do non-parametric kruskal wallis test
kruskal_test(daily_variability ~ site*season, data = daily_variability)
daily_variability
#need to do non-parametric kruskal wallis test
kruskal_test(daily_variability ~ site, data = daily_variability)
daily_variability$site_season <- interaction(daily_variability$site, daily_variability$season)
daily_variability
kruskal.test(daily_variability ~ site_season, data = daily_variability)
library(dunn.test)
# Perform Dunn's test with Holm correction
dunn.test(daily_variability$daily_variability, daily_variability$site_season, method = "BH")
kruskal.test(daily_variability ~ site_season, data = daily_variability) # significant
# Perform Dunn's test with Holm correction
dunn.test(daily_variability$daily_variability, daily_variability$site_season, method = "BH")
# Perform Dunn's test with Holm correction
dunn.test(daily_variability$daily_variability, daily_variability$site_season, method = "BH") %>%
as.data.frame()
tidy_KB_CCC_data %>%
filter(as.Date(Datetime_EST) < "2021-12-01" & as.Date(Datetime_EST) > "2020-12-01") %>%
group_by(as.Date(Datetime_EST), site) %>%
summarise(daily_variability = (max(Temperature)-min(Temperature))) %>%
mutate(season = case_when(`as.Date(Datetime_EST)` <= "2021-05-25" ~ "Dry",
`as.Date(Datetime_EST)` >= "2021-05-26" & `as.Date(Datetime_EST)` <= "2021-10-15" ~ "Wet",
`as.Date(Datetime_EST)` >= "2021-10-16" ~ "Dry")) %>%
group_by(site, season) %>%
mutate(mean_variability = mean(daily_variability), sd_variability = sd(daily_variability)) %>%
ggplot(., aes(x=site, y=daily_variability, fill = site)) +
geom_violin() +
theme_bw() +
scale_fill_manual(values = c("CCC" = "orange", "Nursery" = "darkblue")) +
facet_wrap(~season) +
stat_summary(fun.y=mean, geom="point", shape=18,
size=3, color="black")
tidy_KB_CCC_data %>%
filter(as.Date(Datetime_EST) < "2021-12-01" & as.Date(Datetime_EST) > "2020-12-01") %>%
group_by(as.Date(Datetime_EST), site) %>%
summarise(daily_variability = (max(Temperature)-min(Temperature))) %>%
mutate(season = case_when(`as.Date(Datetime_EST)` <= "2021-05-25" ~ "Dry",
`as.Date(Datetime_EST)` >= "2021-05-26" & `as.Date(Datetime_EST)` <= "2021-10-15" ~ "Wet",
`as.Date(Datetime_EST)` >= "2021-10-16" ~ "Dry")) %>%
ggplot(., aes(x=site, y=daily_variability, fill = site)) +
geom_violin() +
theme_bw() +
scale_fill_manual(values = c("CCC" = "orange", "Nursery" = "darkblue")) +
facet_wrap(~season) +
stat_summary(fun.y=mean, geom="point", shape=18,
size=3, color="black")
kruskal.test(daily_variability ~ site_season, data = daily_variability) # significant
# Perform Dunn's test with Bonferonni correction
dunn.test(daily_variability$daily_variability, daily_variability$site_season, method = "BH") %>%
as.data.frame()
capture.output(as.data.frame(dunn.test(daily_variability$daily_variability, daily_variability$site_season, method = "BH")))
# Perform Dunn's test with Bonferonni correction
dunn.test(daily_variability$daily_variability, daily_variability$site_season, method = "BH") %>%
as.data.frame() %>%
write_csv("dailyvariability_siteseason_posthoc.csv")
tidy_KB_CCC_data %>%
filter(as.Date(Datetime_EST) < "2021-12-01" & as.Date(Datetime_EST) > "2020-12-01") %>%
group_by(as.Date(Datetime_EST), site) %>%
summarise(daily_variability = (max(Temperature)-min(Temperature))) %>%
mutate(season = case_when(`as.Date(Datetime_EST)` <= "2021-05-25" ~ "Dry",
`as.Date(Datetime_EST)` >= "2021-05-26" & `as.Date(Datetime_EST)` <= "2021-10-15" ~ "Wet",
`as.Date(Datetime_EST)` >= "2021-10-16" ~ "Dry")) %>%
ggplot(., aes(x=site, y=daily_variability, fill = site)) +
geom_violin() +
theme_bw() +
scale_fill_manual(values = c("CCC" = "orange", "Nursery" = "darkblue")) +
facet_wrap(~season) +
stat_summary(fun.y=mean, geom="point", shape=18,
size=3, color="black")
tidy_KB_CCC_data %>%
filter(as.Date(Datetime_EST) < "2021-12-01" & as.Date(Datetime_EST) > "2020-12-01") %>%
group_by(as.Date(Datetime_EST), site) %>%
summarise(daily_variability = (max(Temperature)-min(Temperature))) %>%
mutate(season = case_when(`as.Date(Datetime_EST)` <= "2021-05-25" ~ "Dry",
`as.Date(Datetime_EST)` >= "2021-05-26" & `as.Date(Datetime_EST)` <= "2021-10-15" ~ "Wet",
`as.Date(Datetime_EST)` >= "2021-10-16" ~ "Dry")) %>%
ggplot(., aes(x=site, y=daily_variability, fill = site)) +
geom_violin() +
theme_classic() +
scale_fill_manual(values = c("CCC" = "orange", "Nursery" = "darkblue")) +
facet_wrap(~season) +
stat_summary(fun.y=mean, geom="point", shape=18,
size=3, color="black")
ggsave("averagedailyvariabilitybyseason.pdf")
tidy_KB_CCC_data %>%
filter(as.Date(Datetime_EST) < "2021-12-01" & as.Date(Datetime_EST) > "2020-12-01") %>%
group_by(as.Date(Datetime_EST), site) %>%
summarise(daily_variability = (max(Temperature)-min(Temperature))) %>%
mutate(season = case_when(`as.Date(Datetime_EST)` <= "2021-05-25" ~ "Dry",
`as.Date(Datetime_EST)` >= "2021-05-26" & `as.Date(Datetime_EST)` <= "2021-10-15" ~ "Wet",
`as.Date(Datetime_EST)` >= "2021-10-16" ~ "Dry")) %>%
group_by(site, season) %>%
summarise(sample_size = n(), mean_daily_variability = mean(daily_variability), sd_variability = sd(daily_variability))
tidy_KB_CCC_data %>%
filter(as.Date(Datetime_EST) < "2021-12-01" & as.Date(Datetime_EST) > "2020-12-01") %>%
group_by(as.Date(Datetime_EST), site) %>%
summarise(daily_variability = (max(Temperature)-min(Temperature))) %>%
mutate(season = case_when(`as.Date(Datetime_EST)` <= "2021-05-25" ~ "Dry",
`as.Date(Datetime_EST)` >= "2021-05-26" & `as.Date(Datetime_EST)` <= "2021-10-15" ~ "Wet",
`as.Date(Datetime_EST)` >= "2021-10-16" ~ "Dry")) %>%
group_by(site, season) %>%
summarise(sample_size = n(), mean_daily_variability = mean(daily_variability), sd_variability = sd(daily_variability), range = (max(daily_variability)-min(daily_variability)))
tidy_KB_CCC_data %>%
filter(as.Date(Datetime_EST) < "2021-12-01" & as.Date(Datetime_EST) > "2020-12-01") %>%
group_by(as.Date(Datetime_EST), site) %>%
mutate(season = case_when(`as.Date(Datetime_EST)` <= "2021-05-25" ~ "Dry",
`as.Date(Datetime_EST)` >= "2021-05-26" & `as.Date(Datetime_EST)` <= "2021-10-15" ~ "Wet",
`as.Date(Datetime_EST)` >= "2021-10-16" ~ "Dry")) %>%
group_by(site, season) %>%
summarise(sample_size = n(), mean_temp = mean(Temperature), sd_temp = sd(Temperature), range = (max(Temperature)-min(Temperature)))
tidy_KB_CCC_data %>%
filter(as.Date(Datetime_EST) < "2021-12-01" & as.Date(Datetime_EST) > "2020-12-01") %>%
group_by(as.Date(Datetime_EST), site) %>%
mutate(season = case_when(`as.Date(Datetime_EST)` <= "2021-05-25" ~ "Dry",
`as.Date(Datetime_EST)` >= "2021-05-26" & `as.Date(Datetime_EST)` <= "2021-10-15" ~ "Wet",
`as.Date(Datetime_EST)` >= "2021-10-16" ~ "Dry")) %>%
group_by(site, season) %>%
summarise(sample_size = n(), mean_temp = mean(Temperature), sd_temp = sd(Temperature), max_temp = max(Temperature), min_temp =min(Temperature))
tidy_KB_CCC_data %>%
filter(as.Date(Datetime_EST) < "2021-12-01" & as.Date(Datetime_EST) > "2020-12-01") %>%
group_by(as.Date(Datetime_EST), site) %>%
mutate(season = case_when(`as.Date(Datetime_EST)` <= "2021-05-25" ~ "Dry",
`as.Date(Datetime_EST)` >= "2021-05-26" & `as.Date(Datetime_EST)` <= "2021-10-15" ~ "Wet",
`as.Date(Datetime_EST)` >= "2021-10-16" ~ "Dry")) %>%
group_by(site, season) %>%
summarise(sample_size = n(), mean_temp = mean(Temperature), sd_temp = sd(Temperature), max_temp = max(Temperature), min_temp =min(Temperature)) %>%
write_csv("summary_stats_temp_data.csv")
tidy_KB_CCC_data %>%
filter(as.Date(Datetime_EST) < "2021-12-01" & as.Date(Datetime_EST) > "2020-12-01") %>%
group_by(as.Date(Datetime_EST), site) %>%
summarise(daily_variability = (max(Temperature)-min(Temperature))) %>%
mutate(season = case_when(`as.Date(Datetime_EST)` <= "2021-05-25" ~ "Dry",
`as.Date(Datetime_EST)` >= "2021-05-26" & `as.Date(Datetime_EST)` <= "2021-10-15" ~ "Wet",
`as.Date(Datetime_EST)` >= "2021-10-16" ~ "Dry")) %>%
group_by(site, season) %>%
summarise(sample_size = n(), mean_daily_variability = mean(daily_variability), sd_variability = sd(daily_variability), range = (max(daily_variability)-min(daily_variability))) %>%
write_csv("summarystats_dailyvariability.csv")
library(dbplyr)
library(tidyverse)
library(readr)
library(stringr)
# library(gridExtra)
# library(grid)
library(ggplot2)
# library(lattice)
# library(Rmisc)
library(doBy)
library(devtools)
#devtools::install_github("ricardo-bion/ggradar", dependencies = TRUE)
library(ggradar)
#library(ggiraphExtra)
library(tidyverse)
#library(scales)
library(tidyr)
library(readxl)
library(zoo)
library(ggpubr)
cures_frame_tilt_temp <- read_excel("raw_data/Oct2020_Jan2022_1901102_urban-2020-10_(0)_Temperature.xlsx", sheet = "1901102_urban-2020-10_(0)_Tempe")
#logged every 15 min
#edit cures frame time
cures_frame_tilt_temp$Datetime <- as.POSIXct(cures_frame_tilt_temp$Datetime, tz="UTC")
cures_frame_tilt_temp$Datetime_EST <- with_tz(cures_frame_tilt_temp$Datetime, "America/New_York")
# Filter the data to select time points at 2-hour intervals
cures_frame_tilt_temp <- cures_frame_tilt_temp %>%
filter(minute(Datetime_EST) == 0 & (hour(Datetime_EST) %% 2 == 0))
#add cures frame site
cures_frame_tilt_temp %>%
mutate(site = "CURES_tilt") %>%
dplyr::select(!Date:Datetime) %>%
dplyr::rename(Temperature = `Temperature (C)`) -> cures_frame_tilt_temp
max(cures_frame_tilt_temp$Datetime_EST) #"2022-02-01 12:00:00 EST"
min(cures_frame_tilt_temp$Datetime_EST) #"2020-10-12 20:00:00 EDT"
ggplot(cures_frame_tilt_temp, aes(x=Datetime_EST, y=Temperature)) +
geom_point()
#filter out first two days because it was logging very high (abnormal) numbers
cures_frame_tilt_temp %>%
filter(Datetime_EST >= "2020-10-13 14:00:00") -> cures_frame_tilt_temp
cures_frame_tilt_temp %>%
group_by(Datetime_EST) %>%
dplyr::mutate(Temperature = mean(Temperature)) %>%
distinct() -> cures_frame_tilt_temp
#temps after this date start looking off and like the tiltmeter is mis-reading it
cures_frame_tilt_temp %>%
filter(as.Date(Datetime_EST) <= "2021-12-07")  -> cures_frame_tilt_temp
str(cures_frame_tilt_temp)
#Temperature
#Datetime_EST (ymd_hms)
#site
# Define the window size (e.g., for a couple of days, window_size = 2)
window_size <- 3
# Calculate the rolling maximum temperature within the specified range
cures_data<- cures_frame_tilt_temp %>%
drop_na(Temperature) %>%
separate(Datetime_EST, into = c("Date", "Time"), sep = " ") %>%
mutate(Time = hms(Time)) %>%
mutate(Time_of_day = case_when(Time >= "7 H" & Time <= "18 H" ~ "Day",
TRUE ~ "Night")) %>%
dplyr::group_by(Date, Time_of_day) %>%
dplyr::mutate(mean_temp_day = mean(Temperature)) %>%
arrange(Date) %>%
mutate(RollingMax = rollmax(mean_temp_day, window_size, fill = NA, align = "right"),
RollingMin = rollapply(mean_temp_day, window_size, min, fill = NA, align = "right"),
MaxThreshold = RollingMax + 1,
MinThreshold = RollingMin - 1)
# Filter out temperatures exceeding the threshold (+3 degrees from the rolling max)
filtered_cures_data <- cures_data %>%
filter(Temperature <= MaxThreshold & Temperature >= MinThreshold)
filtered_cures_data %>%
ggplot(., aes(x=as.Date(Date), y=Temperature, color=site)) +
geom_point()
#ok this looks better
filtered_cures_data$Date <- ymd(filtered_cures_data$Date)
rows_to_replace <- grepl("0S", filtered_cures_data$Time) & !grepl("H|M", filtered_cures_data$Time)
filtered_cures_data$Time <- as.character(filtered_cures_data$Time)
filtered_cures_data$Time[rows_to_replace] <- gsub("0S", "00:00:00", filtered_cures_data$Time[rows_to_replace])
filtered_cures_data %>%
unite(Datetime_EST, Date, Time, sep = " ") %>%
mutate(Datetime_EST = ymd_hms(Datetime_EST)) -> filtered_cures_data
CCC_hobo <- read_csv("raw_data/CCC_HOBO.csv", skip = 1)
convertFtoC <- function(F) {
C <- (F - 32) * 5/9
return(C)
}
CCC_hobo %>%
rename(Temperature = `Temp, °F (LGR S/N: 20261765, SEN S/N: 20261765)`) %>%
rename(Date_GMT = `Date Time, GMT-04:00`) %>%
select(Date_GMT, Temperature) %>%
mutate(site = "CCC_HOBO") %>%
mutate(Datetime_EST=with_tz(mdy_hms(Date_GMT, tz = "Etc/GMT+4"), tzone = "Etc/GMT+4")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
mutate(Temperature=convertFtoC(Temperature)) -> CCC_hobo
ggplot(CCC_hobo, aes(x=Datetime_EST, y=Temperature)) +
geom_point()
#HOBO logs every two hours
KB_01092018<-read_csv("raw_data/KBNursery_2018_01_09.csv", skip = 1)
convertFtoC <- function(F) {
C <- (F - 32) * 5/9
return(C)
}
KB_01092018  %>%
dplyr::select(!`#`) %>%
mutate(Datetime_EST=with_tz(mdy_hms(`Date Time, GMT-05:00`, tz = "Etc/GMT+5"), tzone = "Etc/GMT+5")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
dplyr::rename(Temperature = `Temp, °F (LGR S/N: 20194578, SEN S/N: 20194578)`) %>%
dplyr::rename(Light = `Intensity, lum/ft² (LGR S/N: 20194578, SEN S/N: 20194578)`) %>%
dplyr::select(Temperature, Light, Datetime_EST) %>%
mutate(Temperature=convertFtoC(Temperature)) -> KB_01092018
KB_07092019<-read_csv("raw_data/KBNursery_2019_07_09.csv", skip = 1)
KB_07092019  %>%
dplyr::select(!`#`) %>%
mutate(Datetime_EST=with_tz(mdy_hms(`Date Time, GMT-04:00`, tz = "Etc/GMT+4"), tzone = "Etc/GMT+4")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
dplyr::rename(Temperature = `Temp, °C (LGR S/N: 10795158, SEN S/N: 10795158)`) %>%
dplyr::rename(Light = `Intensity, lum/ft² (LGR S/N: 10795158, SEN S/N: 10795158)`) %>%
dplyr::select(Temperature, Light, Datetime_EST) -> KB_07092019
KB_10152019<-read_csv("raw_data/KBNursery_2019_10_15.csv", skip = 1)
KB_10152019 %>%
dplyr::select(!`#`) %>%
mutate(Datetime_EST=with_tz(mdy_hms(`Date Time, GMT-04:00`, tz = "Etc/GMT+4"), tzone = "Etc/GMT+4")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
dplyr::rename(Temperature = `Temp, °C (LGR S/N: 20518526, SEN S/N: 20518526)`) %>%
dplyr::rename(Light = `Intensity, lum/ft² (LGR S/N: 20518526, SEN S/N: 20518526)`) %>%
dplyr::select(Temperature, Light, Datetime_EST) -> KB_10152019
KB_01162020<-read_csv("raw_data/KBNursery_2020_01_16.csv", skip = 1)
KB_01162020 %>%
dplyr::select(!`#`) %>%
mutate(Datetime_EST=with_tz(mdy_hms(`Date Time, GMT-05:00`, tz = "Etc/GMT+5"), tzone = "Etc/GMT+5")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
dplyr::rename(Temperature = `Temp, °C (LGR S/N: 20473194, SEN S/N: 20473194)`) %>%
dplyr::rename(Light = `Intensity, lum/ft² (LGR S/N: 20473194, SEN S/N: 20473194)`) %>%
dplyr::select(Temperature, Light, Datetime_EST) -> KB_01162020
KB_03062020<-read_csv("raw_data/KBNursery_2020_03_06.csv", skip = 1)
KB_03062020 %>%
mutate(Datetime_EST=with_tz(mdy_hms(`Date Time, GMT-05:00`, tz = "Etc/GMT+5"), tzone = "Etc/GMT+5")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
dplyr::rename(Temperature = `Temp, °C (LGR S/N: 20685544, SEN S/N: 20685544)`) %>%
dplyr::rename(Light = `Intensity, lum/ft² (LGR S/N: 20685544, SEN S/N: 20685544)`) %>%
dplyr::select(Temperature, Light, Datetime_EST) -> KB_03062020
KB_05012020<-read_csv("raw_data/KBNursery_2020_05_01.csv", skip = 1)
KB_05012020 %>%
mutate(Datetime_EST=with_tz(mdy_hms(`Date Time, GMT-04:00`, tz = "Etc/GMT+4"), tzone = "Etc/GMT+4")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
dplyr::rename(Temperature = `Temp, °C (LGR S/N: 20685559, SEN S/N: 20685559)`) %>%
dplyr::rename(Light = `Intensity, lum/ft² (LGR S/N: 20685559, SEN S/N: 20685559)`) %>%
dplyr::select(Temperature, Light, Datetime_EST) -> KB_05012020
KB_09112020<-read_csv("raw_data/KBNursery_2020_09_11.csv", skip = 1)
KB_09112020 %>%
mutate(Datetime_EST=with_tz(mdy_hm(`Date Time, GMT-04:00`, tz = "Etc/GMT+4"), tzone = "Etc/GMT+4")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
dplyr::rename(Temperature = `Temp, °C (LGR S/N: 20597589, SEN S/N: 20597589)`) %>%
dplyr::rename(Light = `Intensity, lum/ft² (LGR S/N: 20597589, SEN S/N: 20597589)`) %>%
dplyr::select(Temperature, Light, Datetime_EST) -> KB_09112020
KB_02102021 <- read_csv("raw_data/KBNursery_2021_02_10.csv", skip = 1)
KB_02102021 %>%
mutate(Datetime_EST=with_tz(mdy_hms(`Date Time, GMT-05:00`, tz = "Etc/GMT+5"), tzone = "Etc/GMT+5")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
dplyr::rename(Temperature = `Temp, °C (LGR S/N: 20976501, SEN S/N: 20976501)`) %>%
dplyr::rename(Light = `Intensity, lum/ft² (LGR S/N: 20976501, SEN S/N: 20976501)`) %>%
dplyr::select(Temperature, Light, Datetime_EST) -> KB_02102021
KB_05282021 <- read_csv("raw_data/KBNursery_2021_05_28.csv", skip = 1)
KB_05282021 %>%
mutate(Datetime_EST=with_tz(mdy_hms(`Date Time, GMT-04:00`, tz = "Etc/GMT+4"), tzone = "Etc/GMT+4")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
dplyr::rename(Temperature = `Temp, °C (LGR S/N: 21085862, SEN S/N: 21085862)`) %>%
dplyr::select(Temperature, Datetime_EST) %>%
mutate(Light = NA) -> KB_05282021
KB_08112021 <- read_csv("raw_data/KBNursery_2021_08_11.csv", skip = 1)
KB_08112021 %>%
mutate(Datetime_EST=with_tz(mdy_hm(`Date Time, GMT-04:00`, tz = "Etc/GMT+4"), tzone = "Etc/GMT+4")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
dplyr::rename(Temperature = `Temp, °C (LGR S/N: 20831178, SEN S/N: 20831178)`) %>%
dplyr::rename(Light = `Intensity, lum/ft² (LGR S/N: 20831178, SEN S/N: 20831178)`) %>%
dplyr::select(Temperature, Light, Datetime_EST) -> KB_08112021
KB_120821 <- read_csv("raw_data/KBNursery_2021_12_08.csv", skip = 1)
KB_120821%>%
mutate(Datetime_EST=with_tz(mdy_hm(`Date Time, GMT-05:00`, tz = "Etc/GMT+5"), tzone = "Etc/GMT+5")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
dplyr::rename(Temperature = `Temp, °C (LGR S/N: 21236769, SEN S/N: 21236769)`) %>%
dplyr::rename(Light = `Intensity, lum/ft² (LGR S/N: 21236769, SEN S/N: 21236769)`) %>%
dplyr::select(Temperature, Light, Datetime_EST) -> KB_120821
rbind(KB_01092018, KB_07092019, KB_10152019, KB_01162020, KB_03062020, KB_05012020, KB_09112020, KB_02102021, KB_05282021, KB_08112021, KB_120821) -> all_KB_data
all_KB_data %>%
mutate(site = "Nursery") -> all_KB_data
all_KB_data$Temperature <- as.numeric(all_KB_data$Temperature)
ggplot(all_KB_data, aes(x=Datetime_EST, y=Temperature, color = site)) +
geom_point() +
theme_bw() +
scale_x_datetime(date_labels = "%b %Y",  # Customize the date format
date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
full_join(all_KB_data, vkbuoydata) %>%
filter(as.Date(Datetime_EST) > "2021-06-23" & as.Date(Datetime_EST) < "2021-12-01") %>%
ggplot(., aes(x=Datetime_EST, y=Temperature, color = site)) +
geom_point() +
theme_bw() +
scale_x_datetime(date_labels = "%b %Y",  # Customize the date format
date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
cures_frame_tilt_temp <- read_excel("raw_data/Oct2020_Jan2022_1901102_urban-2020-10_(0)_Temperature.xlsx", sheet = "1901102_urban-2020-10_(0)_Tempe")
#logged every 15 min
#edit cures frame time
cures_frame_tilt_temp$Datetime <- as.POSIXct(cures_frame_tilt_temp$Datetime, tz="UTC")
cures_frame_tilt_temp$Datetime_EST <- with_tz(cures_frame_tilt_temp$Datetime, "America/New_York")
# Filter the data to select time points at 2-hour intervals
cures_frame_tilt_temp <- cures_frame_tilt_temp %>%
filter(minute(Datetime_EST) == 0 & (hour(Datetime_EST) %% 2 == 0))
#add cures frame site
cures_frame_tilt_temp %>%
mutate(site = "CCC") %>%
dplyr::select(!Date:Datetime) %>%
dplyr::rename(Temperature = `Temperature (C)`) -> cures_frame_tilt_temp
max(cures_frame_tilt_temp$Datetime_EST) #"2022-02-01 12:00:00 EST"
min(cures_frame_tilt_temp$Datetime_EST) #"2020-10-12 20:00:00 EDT"
cures_frame_tilt_temp %>%
filter(as.Date(Datetime_EST) < "2020-11-01") %>%
ggplot(., aes(x=Datetime_EST, y=Temperature)) +
geom_point()
# remove first day of data because the range is not real
cures_frame_tilt_temp %>%
filter(as.Date(Datetime_EST) > "2020-10-13") %>%
ggplot(., aes(x=Datetime_EST, y=Temperature)) +
geom_point()
cures_frame_tilt_temp %>%
filter(as.Date(Datetime_EST) > "2020-10-13") -> CCC_temp_filtered
CCC_temp_filtered %>%
filter(as.Date(Datetime_EST) < "2020-12-06" & as.Date(Datetime_EST) > "2020-12-03") %>%
filter(Temperature > 21 & Temperature < 25) %>%
ggplot(., aes(x=Datetime_EST, y=Temperature, color = site)) +
geom_point(alpha = 0.7) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
CCC_temp_filtered %>%
filter(as.Date(Datetime_EST) < "2020-12-06" & as.Date(Datetime_EST) > "2020-12-03") %>%
filter(Temperature > 21 & Temperature < 25) -> dec2020_CCCfiltered
CCC_hobo <- read_csv("raw_data/CCC_HOBO.csv", skip = 1)
convertFtoC <- function(F) {
C <- (F - 32) * 5/9
return(C)
}
CCC_hobo %>%
rename(Temperature = `Temp, °F (LGR S/N: 20261765, SEN S/N: 20261765)`) %>%
rename(Date_GMT = `Date Time, GMT-04:00`) %>%
select(Date_GMT, Temperature) %>%
mutate(site = "CCC_HOBO") %>%
mutate(Datetime_EST=with_tz(mdy_hms(Date_GMT, tz = "Etc/GMT+4"), tzone = "Etc/GMT+4")) %>%
mutate(Datetime_EST=with_tz(Datetime_EST, tzone = "America/New_York")) %>%
mutate(Temperature=convertFtoC(Temperature)) -> CCC_hobo
file_paths <- c("raw_data/virginiakeybuoy/vakf1h2020.txt", "raw_data/virginiakeybuoy/vakf1h2021.txt", "raw_data/virginiakeybuoy/vakf1h2022.txt")
process_file <- function(file_path) {
data <- read.table(file_path, header = FALSE, sep = "", comment.char = "#", stringsAsFactors = FALSE)
# Read the first two lines to get the column names
lines <- read_lines(file_path, n_max = 2)
# Extract column names from the second line
column_names <- strsplit(lines[1], "\\s+")[[1]]
# Assign the column names to the data frame
colnames(data) <- column_names
data %>%
rename(Temperature = WTMP) %>%
select(`#YY`:mm,Temperature) -> data
data$Datetime <- ymd_hm(paste(data$`#YY`, data$MM, data$DD, data$hh, data$mm))
data$Datetime <- as.POSIXct(data$Datetime, tz="UTC")
data$Datetime_EST <- with_tz(data$Datetime, "America/New_York")
return(data)
}
# Initialize an empty list to store the processed data frames
all_data <- list()
# Loop over the file paths and process each file
for (file_path in file_paths) {
data <- process_file(file_path)
all_data[[file_path]] <- data
}
# Optionally, combine all data frames into one, if needed
combined_data <- do.call(rbind, all_data)
# View the combined data
print(combined_data)
combined_data %>%
select(Temperature, Datetime_EST) %>%
mutate(site = "VK_Buoy") -> vkbuoydata
rownames(vkbuoydata) <- NULL
#VK_Buoy data gets written as "999" if there is no available data for that time point, so filter that out
vkbuoydata %>%
filter(Temperature < 999) -> vkbuoydata
# Filter the data to select time points at 2-hour intervals
vkbuoydata <- vkbuoydata %>%
filter(minute(Datetime_EST) == 0 & (hour(Datetime_EST) %% 2 == 0))
tidy_KB_data <- read_csv("tidy_KB_CCC_data.csv")
tidy_KB_data
vkbuoydata %>%
select(Temperature, Datetime_EST)
tidy_KB_data
vkbuoydata %>%
select(Temperature, Datetime_EST) %>%
mutate(site = "VK Buoy")
vkbuoydata %>%
select(Temperature, Datetime_EST) %>%
mutate(site = "VK Buoy") -> vkbuoydata_subset
CCC_hobo
full_join(CCC_hobo, tidy_KB_data)
full_join(CCC_hobo, tidy_KB_data) %>%
full_join(., vkbuoydata_subset)
full_join(CCC_hobo, tidy_KB_data) %>%
full_join(., vkbuoydata_subset) %>%
select(!Date_GMT)
full_join(CCC_hobo, tidy_KB_data) %>%
full_join(., vkbuoydata_subset) %>%
select(!Date_GMT) %>%
ggplot(., aes(x=Datetime_EST, y=Temperature, color = site)) +
geom_point()
full_join(CCC_hobo, tidy_KB_data) %>%
full_join(., vkbuoydata_subset) %>%
select(!Date_GMT) %>%
filter(as.Date(Datetime_EST) < "2021-12-01" & as.Date(Datetime_EST) > "2021-06-20") %>%
ggplot(., aes(x=Datetime_EST, y=Temperature, color = site)) +
geom_point()
full_join(CCC_hobo, tidy_KB_data) %>%
full_join(., vkbuoydata_subset) %>%
select(!Date_GMT) %>%
filter(as.Date(Datetime_EST) < "2021-12-01" & as.Date(Datetime_EST) > "2021-06-20") %>%
ggplot(., aes(x=Datetime_EST, y=Temperature, color = site)) +
geom_point() +
geom_line() +
theme_classic()
full_join(CCC_hobo, tidy_KB_data) %>%
full_join(., vkbuoydata_subset) %>%
select(!Date_GMT) %>%
filter(as.Date(Datetime_EST) < "2021-12-01" & as.Date(Datetime_EST) > "2021-06-20") %>%
ggplot(., aes(x=Datetime_EST, y=Temperature, color = site)) +
geom_line() +
theme_classic()
full_join(CCC_hobo, tidy_KB_data) %>%
full_join(., vkbuoydata_subset) %>%
select(!Date_GMT) %>%
filter(as.Date(Datetime_EST) < "2021-12-01" & as.Date(Datetime_EST) > "2021-06-20") %>%
ggplot(., aes(x=Datetime_EST, y=Temperature, color = site)) +
geom_line() +
theme_classic() +
labs(x="Date")
ggsave("plot_withCCCHOBO.png")
