MWU_result_MF_TreatedvUntreated <- read.csv("MWU_MF_Treated_vs_Untreated_fc.csv", sep = "")
MWU_result_MF_TreatedvUntreated %>%
filter(p.adj <0.05)
MWU_result_MF_TreatedvUntreated %>%
filter(p.adj <0.05) %>%  #10 GO terms
mutate(GO_category = "MF") -> MWU_result_MF_TreatedvUntreated_sig
MWU_result_BP_TreatedvUntreated <- read.csv("MWU_BP_Treated_vs_Untreated_fc.csv", sep = "")
MWU_result_BP_TreatedvUntreated %>%
filter(p.adj <0.05)
MWU_result_BP_TreatedvUntreated %>%
filter(p.adj <0.05) %>%  #114 GO terms
mutate(GO_category = "BP") -> MWU_result_BP_TreatedvUntreated_sig
full_join(MWU_result_CC_TreatedvUntreated_sig, MWU_result_MF_TreatedvUntreated_sig) %>%
full_join(., MWU_result_BP_TreatedvUntreated_sig) %>%
write_csv("TreatedvsUntreated_GOMWU_sigterms.csv")
MWU_result_CC_UntreatedvInitial <- read.csv("MWU_CC_Untreated_vs_Initial_fc.csv", sep = "")
MWU_result_CC_UntreatedvInitial %>%
filter(p.adj <0.05)
MWU_result_CC_UntreatedvInitial %>%
filter(p.adj <0.05) %>%  #104 GO terms
mutate(GO_category = "CC") -> MWU_result_CC_UntreatedvInitial_sig
MWU_result_MF_UntreatedvInitial <- read.csv("MWU_MF_Untreated_vs_Initial_fc.csv", sep = "")
MWU_result_MF_UntreatedvInitial %>%
filter(p.adj <0.05)
MWU_result_MF_UntreatedvInitial %>%
filter(p.adj <0.05) %>%  #70 GO terms
mutate(GO_category = "MF") -> MWU_result_MF_UntreatedvInitial_sig
MWU_result_BP_UntreatedvInitial <- read.csv("MWU_BP_Untreated_vs_Initial_fc.csv", sep = "")
MWU_result_BP_UntreatedvInitial <- read.csv("MWU_BP_Untreated_vs_Initial_fc.csv", sep = "")
MWU_result_BP_UntreatedvInitial %>%
filter(p.adj <0.05)
MWU_result_BP_UntreatedvInitial %>%
filter(p.adj <0.05) %>%  #432 GO terms
mutate(GO_category = "BP") -> MWU_result_BP_UntreatedvInitial_sig
full_join(MWU_result_CC_UntreatedvInitial_sig, MWU_result_MF_UntreatedvInitial_sig) %>%
full_join(., MWU_result_BP_UntreatedvInitial_sig) %>%
write_csv("UntreatedvsInitial_GOMWU_sigterms.csv")
source("gomwu.functions.R")
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goAnnotations="Acropora_iso2go.tab"
input="CCC_vs_nursery_fc.csv"
goDivision="MF" # either MF, or BP, or CC
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
absValue=1,
#absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
# level1=0.1,
level1=0.05,
# level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
level2=0.01,
# level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
write.csv(results, file = "MF_fc_05.csv")
goDivision="CC" # either MF, or BP, or CC
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
absValue=1,
#absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
# level1=0.1,
level1=0.05,
# level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
level2=0.01,
# level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
write.csv(results, file = "CC_fc_05.csv")
treated_vs_initial=read.csv("CCC_vs_nursery_lpv.csv")
CCC_vs_nursery=read.csv("CCC_vs_nursery_lpv.csv")
CCC_vs_nursery %>%
mutate(lpv = case_when(abs(lpv) > 1.3 ~ 1,
abs(lpv) <= 1.3 ~ 0)) -> CCC_vs_nursery
library(tidyverse)
View(CCC_vs_nursery)
CCC_vs_nursery %>%
mutate(lpv = case_when(abs(lpv) > 1.3 ~ 1,
abs(lpv) <= 1.3 ~ 0)) -> CCC_vs_nursery
CCC_vs_nursery %>%
group_by(lpv) %>%
summarise(count = n()) #5736 genes = this matches results yay
CCC_vs_nursery %>%
write_csv("CCC_vs_nursery_lpv_fisher.csv")
input="CCC_vs_nursery_lpv_fisher.csv"
goDivision="MF" # either MF, or BP, or CC
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
#absValue=1,
absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level1=0.1,
#level1=0.05,
level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
#level2=0.01,
level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
#level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5 # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
#absValue=1,
absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level1=0.1,
#level1=0.05,
level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
#level2=0.01,
level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
#level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5 # height of the hierarchical clustering tree
colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
#absValue=1,
absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level1=0.1,
#level1=0.05,
level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
#level2=0.01,
level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
#level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
#absValue=1,
absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level1=0.1,
#level1=0.05,
#level2=0.1, # FDR cutoff to print in regular (not italic) font.
level2=0.05,
#level2=0.01,
#level3=0.05, # FDR cutoff to print in large bold font.
level3=0.01,
#level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
#goDivision="MF" # either MF, or BP, or CC
goDivision="CC" # either MF, or BP, or CC
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
#absValue=1,
absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level1=0.1,
#level1=0.05,
level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
#level2=0.01,
level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
#level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
knitr::opts_chunk$set(echo = TRUE)
library(KEGGREST)
library(tidyverse)
library(pathview)
library(clusterProfiler)
library(enrichplot)
library(cowplot)
library(KEGGREST)
library(tidyverse)
library(pathview)
library(clusterProfiler)
library(enrichplot)
library(cowplot)
kegg.list <- read.table("bioinformatics/Acervicornis_iso2kegg.tab")
colnames(kegg.list) <- c("TranscriptID","KO")
dim(kegg.list)
kegg.list %>%
mutate(gene = str_replace(TranscriptID, "Acervicornis", "Acropora_")) %>%
select(!TranscriptID) -> kegg.list
load("RData_files/Location_CCC_vs_nursery_fc_lfcshrink.RData")
View(Location_CCC_vs_nursery.fc)
brown2_genes <- read_csv("WGCNA/brown2.csv") #819 genes
load(file = "RData_files/networkdata_signed.RData")
# eigengene-heatmap plot (sanity check - is the whole module driven by just one crazy sample?)
# note: this part does not make much sense for unsigned modules
load(file = "Rdata_files/networkdata_signed.RData")
load(file = "Rdata_files/wgcnaData.RData");
setwd("~/Library/CloudStorage/OneDrive-UniversityofMiami/GitHub/Ch2_AcerCCC/gene_expression")
# eigengene-heatmap plot (sanity check - is the whole module driven by just one crazy sample?)
# note: this part does not make much sense for unsigned modules
load(file = "Rdata_files/networkdata_signed.RData")
load(file = "Rdata_files/wgcnaData.RData");
View(geneTree)
View(MEs)
View(traits_n_temp)
# run for each of these statements individually
which.module="brown2"
datME=MEs
datExpr=datt
quartz()
ME=datME[, paste("ME",which.module, sep="")]
par(mfrow=c(2,1), mar=c(0.3, 5.5, 3, 2))
plotMat(t(scale(datExpr[,moduleColors==which.module ]) ),
nrgcols=30,rlabels=F,rcols=which.module,
main=which.module, cex.main=2)
# saving selected modules for GO and KOG analysis (two-parts: Fisher test, MWU test within-module)
library(WGCNA)
ME=datME[, paste("ME",which.module, sep="")]
par(mfrow=c(2,1), mar=c(0.3, 5.5, 3, 2))
plotMat(t(scale(datExpr[,moduleColors==which.module ]) ),
nrgcols=30,rlabels=F,rcols=which.module,
main=which.module, cex.main=2)
par(mar=c(5, 4.2, 0, 0.7))
barplot(ME, col=which.module, main="", cex.main=2,
ylab="eigengene expression",xlab="sample")
length(datExpr[1,moduleColors==which.module ]) # number of genes in chosen module
datExpr[1,moduleColors==which.module ]
as.data.frame(datExpr[1,moduleColors==which.module ])
as.data.frame(datExpr[1,moduleColors==which.module ]) %>%
view()
as.data.frame(datExpr[1,moduleColors==which.module ]) %>%
view() %>%
rownames_to_column(var="gene")
as.data.frame(datExpr[1,moduleColors==which.module ])  %>%
rownames_to_column(var="gene")
as.data.frame(datExpr[1,moduleColors==which.module ])  %>%
rownames_to_column(var="gene") %>%
write_csv("brown2_genelist.csv")
which.module="magenta3"
datME=MEs
datExpr=datt
quartz()
ME=datME[, paste("ME",which.module, sep="")]
par(mfrow=c(2,1), mar=c(0.3, 5.5, 3, 2))
plotMat(t(scale(datExpr[,moduleColors==which.module ]) ),
nrgcols=30,rlabels=F,rcols=which.module,
main=which.module, cex.main=2)
par(mar=c(5, 4.2, 0, 0.7))
barplot(ME, col=which.module, main="", cex.main=2,
ylab="eigengene expression",xlab="sample")
length(datExpr[1,moduleColors==which.module ]) # brown2 = 482 genes
as.data.frame(datExpr[1,moduleColors==which.module ])  %>%
rownames_to_column(var="gene") %>%
write_csv("magenta3_genelist.csv")
brown2_genes <- read_csv("WGCNA/brown2_genelist.csv") #819 genes
Location_CCC_vs_nursery.fc %>% right_join(kegg.list, by = "gene")
load("RData_files/Location_CCC_vs_nursery_fc_lfcshrink.RData")
kegg.list <- read.table("bioinformatics/Acervicornis_iso2kegg.tab")
colnames(kegg.list) <- c("TranscriptID","KO")
dim(kegg.list)
kegg.list %>%
mutate(gene = str_replace(TranscriptID, "Acervicornis", "Acropora_")) %>%
select(!TranscriptID) -> kegg.list
Location_CCC_vs_nursery.fc %>% right_join(kegg.list, by = "gene")
Location_CCC_vs_nursery.fc %>% right_join(kegg.list, by = "gene") %>%
right_join(., brown2_genes, by = "gene")
Location_CCC_vs_nursery.fc %>% right_join(kegg.list, by = "gene") %>%
right_join(., brown2_genes, by = "gene") %>%  #narrow down to only the DGEs
select(lfc, KO) %>%
na.omit()
Location_CCC_vs_nursery.fc %>% right_join(kegg.list, by = "gene") %>%
right_join(., brown2_genes, by = "gene") %>%  #narrow down to only the DGEs
select(lfc, KO) %>%
na.omit() %>% #246 genes
distinct(KO, .keep_all = TRUE)
Location_CCC_vs_nursery.fc %>% right_join(kegg.list, by = "gene") %>%
right_join(., brown2_genes, by = "gene") %>%  #narrow down to only the DGEs
select(lfc, KO) %>%
na.omit() %>% #246 genes
distinct(KO, .keep_all = TRUE) %>% #228 distinct KEGG terms
column_to_rownames(var = "KO") -> brown2_KEGG
KEGG_enrich_brown2 <- enrichKEGG(
gene = rownames(brown2_KEGG),
organism = "ko",
keyType = "kegg",
pvalueCutoff = 0.05,
pAdjustMethod = "fdr",
universe = kegg.list$KO
)
dotplot(KEGG_enrich_brown2)
length(unique(KEGG_enrich_brown2@result$Description)) #284 unique KEGG terms
KEGG_enrich_brown2@result$geneID
pathway_ids <- rownames(KEGG_enrich_brown2@result)
# Retrieve information for each pathway
pathway_info <- lapply(pathway_ids, keggGet)
# Extract pathway names and categories
pathway_details <- sapply(pathway_info, function(x) {
pathway_name <- x[[1]]$NAME
pathway_category <- x[[1]]$CLASS
return(c(Name = pathway_name, Category = pathway_category))
})
# Display the pathway names and categories
print(pathway_details)
pathway_categories_df <- tibble(
Pathway_ID = names(pathway_details),
Details = pathway_details
)
pathway_categories_df <- pathway_categories_df %>%
mutate(Description = sapply(Details, function(x) x[1]),
Category = sapply(Details, function(x) x[2])) %>%
select(-Details)
KEGG_enrich_brown2_categories <- left_join(KEGG_enrich_brown2@result, pathway_categories_df, by = "Description")
length(unique(KEGG_enrich_brown2_categories$Category)) #44 unique categories
KEGG_enrich_brown2 %>%
filter(p.adjust<0.1)
KEGG_enrich_brown2_categories %>%
filter(p.adjust<0.1)
# Define a color ramp from blue to red
blue_to_red <- colorRampPalette(c("blue", "red"))
# Generate n colors from this palette
n_colors <- blue_to_red(2)
map_id <- "04080" #Neuroactive ligand-receptor interaction
# run pathview on a specific path
pv_path <- pathview(
gene.data = brown2_KEGG,
pathway.id = map_id,
species = "ko",
out.suffix = "Neuroactive ligand-receptor interaction",
limit = list(
gene = c(-1, 1), # upper and lower range of log2foldchange values
cpd = c(-4, 4)),
discrete = list(
gene = FALSE, # set this to true when working with discrete data
cpd = FALSE),
low = n_colors[1],
mid = n_colors[4],
high = n_colors[2],
kegg.native = T # T: outputs a traditional KEGG pathway map, F: outputs a different map style
)
magenta3_genes <- read_csv("WGCNA/magenta3_genelist.csv") #482 genes
Location_CCC_vs_nursery.fc %>% right_join(kegg.list, by = "gene") %>%
right_join(., magenta3_genes, by = "gene") %>%  #narrow down to only the DGEs
select(lfc, KO) %>%
na.omit()
Location_CCC_vs_nursery.fc %>% right_join(kegg.list, by = "gene") %>%
right_join(., magenta3_genes, by = "gene") %>%  #narrow down to only the DGEs
select(lfc, KO) %>%
na.omit() %>% #290 genes
distinct(KO, .keep_all = TRUE)
Location_CCC_vs_nursery.fc %>% right_join(kegg.list, by = "gene") %>%
right_join(., magenta3_genes, by = "gene") %>%  #narrow down to only the DGEs
select(lfc, KO) %>%
na.omit() %>% #290 genes
distinct(KO, .keep_all = TRUE) %>% #263 distinct KEGG terms
column_to_rownames(var = "KO") -> magenta3_KEGG
KEGG_enrich_magenta3 <- enrichKEGG(
gene = rownames(magenta3_KEGG),
organism = "ko",
keyType = "kegg",
pvalueCutoff = 0.05,
pAdjustMethod = "fdr",
universe = kegg.list$KO
)
dotplot(KEGG_enrich_magenta3) #1 kegg term: neuroactive ligand-receptor interaction
View(magenta3_genes)
setwd("~/Library/CloudStorage/OneDrive-UniversityofMiami/GitHub/Ch2_AcerCCC/gene_expression/GO-MWU")
source("gomwu.functions.R")
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goAnnotations="Acropora_iso2go.tab"
input="brown2.csv"
goDivision="MF" # either MF, or BP, or CC
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
goDivision="CC" # either MF, or BP, or CC
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
input="magenta3.csv"
goDivision="MF" # either MF, or BP, or CC
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
goDivision="CC" # either MF, or BP, or CC
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
