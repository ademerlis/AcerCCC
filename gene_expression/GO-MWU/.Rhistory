MWU_result_BP_TreatedvUntreated %>%
filter(p.adj < 0.05) -> MWU_result_BP_TreatedvUntreated_05
View(MWU_result_BP_TreatedvUntreated_05)
MWU_result_BP_UntreatedvInitial=read.csv("MWU_BP_Untreated_vs_Initial_fc.csv", sep = "")
MWU_result_BP_UntreatedvInitial %>%
filter(p.adj < 0.05) -> MWU_result_BP_UntreatedvInitial_05
pairwise=list("Untreated_vs_Initial"=MWU_result_BP_UntreatedvInitial_05, "Treated_vs_Initial"=MWU_result_BP_TreatedvInitial_05,"Treated_vs_Untreated"=MWU_result_BP_TreatedvUntreated_05)
find_common_elements_df <- function(lst, column_index = 1) {
# Initialize common_elements with the column of interest from the first data frame
common_elements <- lst[[1]][, column_index]
# Loop through the rest of the list
for (df in lst[-1]) {
# Extract the column of interest from the current data frame
vec <- df[, column_index]
# Find the intersection with the current common_elements
common_elements <- intersect(common_elements, vec)
}
return(common_elements)
}
View(pairwise)
# Find common elements
common_elements <- find_common_elements_df(pairwise)
str(common_elements) #344 genes
View(MWU_result_BP_TreatedvInitial)
find_common_elements_df <- function(lst, column_index = 5) {
# Initialize common_elements with the column of interest from the first data frame
common_elements <- lst[[1]][, column_index]
# Loop through the rest of the list
for (df in lst[-1]) {
# Extract the column of interest from the current data frame
vec <- df[, column_index]
# Find the intersection with the current common_elements
common_elements <- intersect(common_elements, vec)
}
return(common_elements)
}
# Find common elements
common_elements <- find_common_elements_df(pairwise)
str(common_elements) #344 genes
find_common_elements_df <- function(lst, column_index = 6) {
# Initialize common_elements with the column of interest from the first data frame
common_elements <- lst[[1]][, column_index]
# Loop through the rest of the list
for (df in lst[-1]) {
# Extract the column of interest from the current data frame
vec <- df[, column_index]
# Find the intersection with the current common_elements
common_elements <- intersect(common_elements, vec)
}
return(common_elements)
}
# Find common elements
common_elements <- find_common_elements_df(pairwise)
str(common_elements) #344 genes
common_elements %>%
as.data.frame() %>% view()
find_common_elements_df <- function(lst, column_index = [5,6]) {
find_common_elements_df <- function(lst, column_index = c(5,6)) {
# Initialize common_elements with the column of interest from the first data frame
common_elements <- lst[[1]][, column_index]
# Loop through the rest of the list
for (df in lst[-1]) {
# Extract the column of interest from the current data frame
vec <- df[, column_index]
# Find the intersection with the current common_elements
common_elements <- intersect(common_elements, vec)
}
return(common_elements)
}
# Find common elements
common_elements <- find_common_elements_df(pairwise)
View(find_common_elements_df)
View(common_elements)
unique_Untreated_vs_Initial <- anti_join(MWU_result_BP_UntreatedvInitial_05, MWU_result_BP_TreatedvInitial_05)
View(unique_Untreated_vs_Initial)
unique_Untreated_vs_Initial <- anti_join(MWU_result_BP_UntreatedvInitial_05, MWU_result_BP_TreatedvInitial_05, by = "term")
unique_Untreated_vs_Initial <- anti_join(MWU_result_BP_UntreatedvInitial_05, MWU_result_BP_TreatedvUntreated_05, by = "term")
View(unique_Untreated_vs_Initial)
ggvenn(pairwise) +
scale_fill_manual(values = c("#ca0020", "#0571b0", "#f4a582"))
library(ggvenn)
ggvenn(pairwise) +
scale_fill_manual(values = c("#ca0020", "#0571b0", "#f4a582"))
View(pairwise)
MWU_result_BP_TreatedvInitial$name -> MWU_result_BP_TreatedvInitial_names
MWU_result_BP_TreatedvInitial_05$name -> MWU_result_BP_TreatedvInitial_names
MWU_result_BP_TreatedvUntreated_05$name -> MWU_result_BP_TreatedvUntreated_names
MWU_result_BP_UntreatedvInitial_05$name -> MWU_result_BP_UntreatedvInitial_names
pairwise_names=list("Untreated_vs_Initial"=MWU_result_BP_UntreatedvInitial_names, "Treated_vs_Initial"=MWU_result_BP_TreatedvInitial_names,"Treated_vs_Untreated"=MWU_result_BP_TreatedvUntreated_names)
ggvenn(pairwise_names) +
scale_fill_manual(values = c("#ca0020", "#0571b0", "#f4a582"))
unique_Untreated_vs_Initial
unique_Untreated_vs_Initial <- anti_join(MWU_result_BP_UntreatedvInitial_05, MWU_result_BP_TreatedvInitial_05, by = "name")
unique_Untreated_vs_Initial <- anti_join(MWU_result_BP_UntreatedvInitial_05, MWU_result_BP_TreatedvUntreated_05, by = "name") #387 out of 432 are unique
unique_Untreated_vs_Initial <- anti_join(MWU_result_BP_UntreatedvInitial_05, MWU_result_BP_TreatedvInitial_05, by = "name")
unique_Untreated_vs_Initial <- anti_join(MWU_result_BP_UntreatedvInitial_05, MWU_result_BP_TreatedvUntreated_05, by = "name") #387 out of 432 are unique
unique_Untreated_vs_Initial <- anti_join(MWU_result_BP_UntreatedvInitial_05, MWU_result_BP_TreatedvInitial_05, by = "name")
unique_Untreated_vs_Initial <- anti_join(MWU_result_BP_UntreatedvInitial_05, MWU_result_BP_TreatedvInitial_05, by = "name")
unique_Untreated_vs_Initial <- anti_join(unique_Untreated_vs_Initial, MWU_result_BP_TreatedvUntreated_05, by = "name") #387 out of 432 are unique
View(unique_Untreated_vs_Initial)
unique_Treated_vs_Initial <- anti_join(MWU_result_BP_TreatedvInitial_05, MWU_result_BP_UntreatedvInitial_05)
unique_Treated_vs_Initial <- anti_join(MWU_result_BP_TreatedvInitial_05, MWU_result_BP_UntreatedvInitial_05, by = "name")
unique_Treated_vs_Initial <- anti_join(unique_Treated_vs_Initial, MWU_result_BP_TreatedvUntreated_05, by = "name")
View(unique_Treated_vs_Initial)
ggvenn(pairwise_names) +
scale_fill_manual(values = c("#ca0020", "#0571b0", "#f4a582"))
ggsave("GOterms_BP_Acer_venndiagram.pdf")
MWU_result_MF_TreatedvInitial=read.csv("MWU_MF_Treated_vs_Initial_fc.csv", sep = "")
MWU_result_MF_TreatedvInitial %>%
filter(p.adj < 0.05) -> MWU_result_MF_TreatedvInitial_05
MWU_result_MF_TreatedvInitial_05$name -> MWU_result_MF_TreatedvInitial_names
MWU_result_MF_TreatedvUntreated=read.csv("MWU_MF_Treated_vs_Untreated_fc.csv", sep = "")
MWU_result_MF_TreatedvUntreated %>%
filter(p.adj < 0.05) -> MWU_result_MF_TreatedvUntreated_05
MWU_result_MF_TreatedvUntreated_05$name -> MWU_result_MF_TreatedvUntreated_names
MWU_result_MF_UntreatedvInitial=read.csv("MWU_MF_Untreated_vs_Initial_fc.csv", sep = "")
MWU_result_MF_UntreatedvInitial %>%
filter(p.adj < 0.05) -> MWU_result_MF_UntreatedvInitial_05
MWU_result_MF_UntreatedvInitial_05$name -> MWU_result_MF_UntreatedvInitial_names
pairwise=list("Untreated_vs_Initial"=MWU_result_MF_UntreatedvInitial_05, "Treated_vs_Initial"=MWU_result_MF_TreatedvInitial_05,"Treated_vs_Untreated"=MWU_result_MF_TreatedvUntreated_05)
find_common_elements_df <- function(lst, column_index = c(5,6)) {
# Initialize common_elements with the column of interest from the first data frame
common_elements <- lst[[1]][, column_index]
# Loop through the rest of the list
for (df in lst[-1]) {
# Extract the column of interest from the current data frame
vec <- df[, column_index]
# Find the intersection with the current common_elements
common_elements <- intersect(common_elements, vec)
}
return(common_elements)
}
# Find common elements
common_elements <- find_common_elements_df(pairwise)
str(common_elements) #18 GO categories shared between all
unique_Untreated_vs_Initial <- anti_join(MWU_result_MF_UntreatedvInitial_05, MWU_result_MF_TreatedvInitial_05, by = "name")
unique_Untreated_vs_Initial <- anti_join(unique_Untreated_vs_Initial, MWU_result_MF_TreatedvUntreated_05, by = "name") #108 unique
View(unique_Treated_vs_Initial)
unique_Treated_vs_Initial <- anti_join(MWU_result_MF_TreatedvInitial_05, MWU_result_MF_UntreatedvInitial_05, by = "name")
unique_Treated_vs_Initial <- anti_join(unique_Treated_vs_Initial, MWU_result_MF_TreatedvUntreated_05, by = "name") #237 unique
unique_Treated_vs_Untreated <- anti_join(MWU_result_MF_TreatedvUntreated_05, MWU_result_MF_UntreatedvInitial_05, by = "name")
unique_Treated_vs_Untreated <- anti_join(MWU_result_MF_TreatedvUntreated_05, MWU_result_MF_UntreatedvInitial_05, by = "name")
unique_Treated_vs_Untreated <- anti_join(unique_Treated_vs_Untreated, MWU_result_MF_TreatedvInitial_05)
pairwise_names=list("Untreated_vs_Initial"=MWU_result_MF_UntreatedvInitial_names, "Treated_vs_Initial"=MWU_result_MF_TreatedvInitial_names,"Treated_vs_Untreated"=MWU_result_MF_TreatedvUntreated_names)
ggvenn(pairwise_names) +
scale_fill_manual(values = c("#ca0020", "#0571b0", "#f4a582"))
ggsave("GOterms_MF_Acer_venndiagram.pdf")
MWU_result_BP_TreatedvInitial=read.csv("MWU_BP_Treated_vs_Initial_fc.csv", sep = "")
MWU_result_BP_TreatedvInitial %>%
filter(p.adj < 0.05) -> MWU_result_BP_TreatedvInitial_05
MWU_result_BP_TreatedvInitial_05$name -> MWU_result_BP_TreatedvInitial_names
MWU_result_BP_TreatedvUntreated=read.csv("MWU_BP_Treated_vs_Untreated_fc.csv", sep = "")
MWU_result_BP_TreatedvUntreated %>%
filter(p.adj < 0.05) -> MWU_result_BP_TreatedvUntreated_05
MWU_result_BP_TreatedvUntreated_05$name -> MWU_result_BP_TreatedvUntreated_names
MWU_result_BP_UntreatedvInitial=read.csv("MWU_BP_Untreated_vs_Initial_fc.csv", sep = "")
MWU_result_BP_UntreatedvInitial %>%
filter(p.adj < 0.05) -> MWU_result_BP_UntreatedvInitial_05
MWU_result_BP_UntreatedvInitial_05$name -> MWU_result_BP_UntreatedvInitial_names
pairwise=list("Untreated_vs_Initial"=MWU_result_BP_UntreatedvInitial_05, "Treated_vs_Initial"=MWU_result_BP_TreatedvInitial_05,"Treated_vs_Untreated"=MWU_result_BP_TreatedvUntreated_05)
find_common_elements_df <- function(lst, column_index = c(5,6)) {
# Initialize common_elements with the column of interest from the first data frame
common_elements <- lst[[1]][, column_index]
# Loop through the rest of the list
for (df in lst[-1]) {
# Extract the column of interest from the current data frame
vec <- df[, column_index]
# Find the intersection with the current common_elements
common_elements <- intersect(common_elements, vec)
}
return(common_elements)
}
# Find common elements
common_elements <- find_common_elements_df(pairwise)
str(common_elements) #18 GO categories shared between all
unique_Treated_vs_Untreated <- anti_join(MWU_result_BP_TreatedvUntreated_05, MWU_result_BP_UntreatedvInitial_05, by = "name")
unique_Treated_vs_Untreated <- anti_join(unique_Treated_vs_Untreated, MWU_result_BP_TreatedvInitial_05) # 5 unique
pairwise_names=list("Untreated_vs_Initial"=MWU_result_BP_UntreatedvInitial_names, "Treated_vs_Initial"=MWU_result_BP_TreatedvInitial_names,"Treated_vs_Untreated"=MWU_result_BP_TreatedvUntreated_names)
ggvenn(pairwise_names) +
scale_fill_manual(values = c("#ca0020", "#0571b0", "#f4a582"))
unique_Treated_vs_Untreated <- anti_join(MWU_result_BP_TreatedvUntreated_05, MWU_result_BP_UntreatedvInitial_05, by = "name")
unique_Treated_vs_Untreated <- anti_join(unique_Treated_vs_Untreated, MWU_result_BP_TreatedvInitial_05) # 69 unique
unique_Treated_vs_Untreated <- anti_join(unique_Treated_vs_Untreated, MWU_result_BP_TreatedvInitial_05,  by = "name") # 69 unique
View(unique_Treated_vs_Untreated)
View(common_elements)
unique_Untreated_vs_Initial <- anti_join(MWU_result_BP_UntreatedvInitial_05, MWU_result_BP_TreatedvInitial_05, by = "name")
unique_Untreated_vs_Initial <- anti_join(unique_Untreated_vs_Initial, MWU_result_BP_TreatedvUntreated_05, by = "name") #108 unique
unique_Treated_vs_Initial <- anti_join(MWU_result_BP_TreatedvInitial_05, MWU_result_BP_UntreatedvInitial_05, by = "name")
unique_Treated_vs_Initial <- anti_join(unique_Treated_vs_Initial, MWU_result_BP_TreatedvUntreated_05, by = "name") #237 unique
allgenes_BP_UntreatedvTreated=read.csv("BP_Treated_vs_Untreated_fc.csv", sep="")
MWU_result_BP_TreatedvUntreated_05 %>%
left_join(., allgenes_BP_TreatedvInitial, by = c("name", "term")) %>% view()
MWU_result_BP_TreatedvUntreated_05 %>%
left_join(., allgenes_BP_UntreatedvTreated, by = c("name", "term")) %>% view()
MWU_result_BP_TreatedvUntreated_05 %>%
left_join(., allgenes_BP_UntreatedvTreated, by = c("name", "term")) %>%
filter(term == "phagocytosis")
MWU_result_BP_TreatedvUntreated_05 %>%
left_join(., allgenes_BP_UntreatedvTreated, by = c("name", "term")) %>%
filter(namex == "phagocytosis")
MWU_result_BP_TreatedvUntreated_05 %>%
left_join(., allgenes_BP_UntreatedvTreated, by = c("name", "term")) %>%
filter(name == "phagocytosis")
MWU_result_BP_TreatedvUntreated_05 %>%
left_join(., allgenes_BP_UntreatedvTreated, by = c("name", "term")) %>%
filter(name == "phagocytosis") %>%
arrange(value)
library(tidyverse)
cc_TreatedvInitial <- read.csv("CC_Treated_vs_Initial_fc.csv", sep = "")
cc_TreatedvInitial %>%
rename(lfc = value) %>%
rename (level = lev) -> cc_TreatedvInitial
MWU_result_CC_TreatedvInitial <- read.csv("MWU_CC_Treated_vs_Initial_fc.csv", sep = "")
full_join(cc_TreatedvInitial, MWU_result_CC_TreatedvInitial, by = c("level", "term", "name")) %>% view()
filter(p.adj < 0.05) %>%
distinct(seq)
cc_TreatedvInitial
MWU_result_CC_TreatedvInitial
MWU_result_CC_TreatedvInitial <- read.csv("MWU_CC_Treated_vs_Initial_fc.csv", sep = "")
MWU_result_CC_TreatedvInitial
MWU_result_MF_TreatedvInitial <- read.csv("MWU_MF_Treated_vs_Initial_fc.csv", sep = "")
MWU_result_MF_TreatedvInitial
MWU_result_BP_TreatedvInitial <- read.csv("MWU_BP_Treated_vs_Initial_fc.csv", sep = "")
str(MWU_result_CC_TreatedvInitial)
str(MWU_result_MF_TreatedvInitial)
MWU_result_CC_TreatedvInitial %>%
filter(p.adj <0.05)
MWU_result_CC_TreatedvInitial %>%
filter(p.adj <0.05) %>%  #111 GO terms
mutate(GO_category = "CC")
MWU_result_CC_TreatedvInitial %>%
filter(p.adj <0.05) %>%  #111 GO terms
mutate(GO_category = "CC") -> MWU_result_CC_TreatedvInitial_sig
MWU_result_MF_TreatedvInitial %>%
filter(p.adj <0.05)
MWU_result_MF_TreatedvInitial %>%
filter(p.adj <0.05) %>%  #94 GO terms
mutate(GO_category = "MF") -> MWU_result_MF_TreatedvInitial_sig
MWU_result_BP_TreatedvInitial %>%
filter(p.adj <0.05)
MWU_result_BP_TreatedvInitial %>%
filter(p.adj <0.05) %>%  #543 GO terms
mutate(GO_category = "BP") -> MWU_result_BP_TreatedvInitial_sig
full_join(MWU_result_CC_TreatedvInitial_sig, MWU_result_MF_TreatedvInitial_sig)
full_join(MWU_result_CC_TreatedvInitial_sig, MWU_result_MF_TreatedvInitial_sig) %>%
full_join(., MWU_result_BP_TreatedvInitial_sig)
full_join(MWU_result_CC_TreatedvInitial_sig, MWU_result_MF_TreatedvInitial_sig) %>%
full_join(., MWU_result_BP_TreatedvInitial_sig) %>%
write_csv("TreatedvsInitial_GOMWU_sigterms.csv")
MWU_result_CC_TreatedvUntreated <- read.csv("MWU_CC_Treated_vs_Untreated_fc.csv", sep = "")
MWU_result_CC_TreatedvUntreated %>%
filter(p.adj <0.05)
MWU_result_CC_TreatedvUntreated %>%
filter(p.adj <0.05) %>%  #74 GO terms
mutate(GO_category = "CC") -> MWU_result_CC_TreatedvUntreated_sig
MWU_result_MF_TreatedvUntreated <- read.csv("MWU_MF_Treated_vs_Untreated_fc.csv", sep = "")
MWU_result_MF_TreatedvUntreated %>%
filter(p.adj <0.05)
MWU_result_MF_TreatedvUntreated %>%
filter(p.adj <0.05) %>%  #10 GO terms
mutate(GO_category = "MF") -> MWU_result_MF_TreatedvUntreated_sig
MWU_result_BP_TreatedvUntreated <- read.csv("MWU_BP_Treated_vs_Untreated_fc.csv", sep = "")
MWU_result_BP_TreatedvUntreated %>%
filter(p.adj <0.05)
MWU_result_BP_TreatedvUntreated %>%
filter(p.adj <0.05) %>%  #114 GO terms
mutate(GO_category = "BP") -> MWU_result_BP_TreatedvUntreated_sig
full_join(MWU_result_CC_TreatedvUntreated_sig, MWU_result_MF_TreatedvUntreated_sig) %>%
full_join(., MWU_result_BP_TreatedvUntreated_sig) %>%
write_csv("TreatedvsUntreated_GOMWU_sigterms.csv")
MWU_result_CC_UntreatedvInitial <- read.csv("MWU_CC_Untreated_vs_Initial_fc.csv", sep = "")
MWU_result_CC_UntreatedvInitial %>%
filter(p.adj <0.05)
MWU_result_CC_UntreatedvInitial %>%
filter(p.adj <0.05) %>%  #104 GO terms
mutate(GO_category = "CC") -> MWU_result_CC_UntreatedvInitial_sig
MWU_result_MF_UntreatedvInitial <- read.csv("MWU_MF_Untreated_vs_Initial_fc.csv", sep = "")
MWU_result_MF_UntreatedvInitial %>%
filter(p.adj <0.05)
MWU_result_MF_UntreatedvInitial %>%
filter(p.adj <0.05) %>%  #70 GO terms
mutate(GO_category = "MF") -> MWU_result_MF_UntreatedvInitial_sig
MWU_result_BP_UntreatedvInitial <- read.csv("MWU_BP_Untreated_vs_Initial_fc.csv", sep = "")
MWU_result_BP_UntreatedvInitial <- read.csv("MWU_BP_Untreated_vs_Initial_fc.csv", sep = "")
MWU_result_BP_UntreatedvInitial %>%
filter(p.adj <0.05)
MWU_result_BP_UntreatedvInitial %>%
filter(p.adj <0.05) %>%  #432 GO terms
mutate(GO_category = "BP") -> MWU_result_BP_UntreatedvInitial_sig
full_join(MWU_result_CC_UntreatedvInitial_sig, MWU_result_MF_UntreatedvInitial_sig) %>%
full_join(., MWU_result_BP_UntreatedvInitial_sig) %>%
write_csv("UntreatedvsInitial_GOMWU_sigterms.csv")
source("gomwu.functions.R")
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goAnnotations="Acropora_iso2go.tab"
input="CCC_vs_nursery_fc.csv"
goDivision="MF" # either MF, or BP, or CC
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
absValue=1,
#absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
# level1=0.1,
level1=0.05,
# level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
level2=0.01,
# level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
write.csv(results, file = "MF_fc_05.csv")
goDivision="CC" # either MF, or BP, or CC
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
absValue=1,
#absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
# level1=0.1,
level1=0.05,
# level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
level2=0.01,
# level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
write.csv(results, file = "CC_fc_05.csv")
treated_vs_initial=read.csv("CCC_vs_nursery_lpv.csv")
CCC_vs_nursery=read.csv("CCC_vs_nursery_lpv.csv")
CCC_vs_nursery %>%
mutate(lpv = case_when(abs(lpv) > 1.3 ~ 1,
abs(lpv) <= 1.3 ~ 0)) -> CCC_vs_nursery
library(tidyverse)
View(CCC_vs_nursery)
CCC_vs_nursery %>%
mutate(lpv = case_when(abs(lpv) > 1.3 ~ 1,
abs(lpv) <= 1.3 ~ 0)) -> CCC_vs_nursery
CCC_vs_nursery %>%
group_by(lpv) %>%
summarise(count = n()) #5736 genes = this matches results yay
CCC_vs_nursery %>%
write_csv("CCC_vs_nursery_lpv_fisher.csv")
input="CCC_vs_nursery_lpv_fisher.csv"
goDivision="MF" # either MF, or BP, or CC
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
#absValue=1,
absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level1=0.1,
#level1=0.05,
level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
#level2=0.01,
level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
#level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5 # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
#absValue=1,
absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level1=0.1,
#level1=0.05,
level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
#level2=0.01,
level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
#level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5 # height of the hierarchical clustering tree
colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
#absValue=1,
absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level1=0.1,
#level1=0.05,
level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
#level2=0.01,
level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
#level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
#absValue=1,
absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level1=0.1,
#level1=0.05,
#level2=0.1, # FDR cutoff to print in regular (not italic) font.
level2=0.05,
#level2=0.01,
#level3=0.05, # FDR cutoff to print in large bold font.
level3=0.01,
#level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
#goDivision="MF" # either MF, or BP, or CC
goDivision="CC" # either MF, or BP, or CC
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
#absValue=1,
absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level1=0.1,
#level1=0.05,
level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
#level2=0.01,
level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
#level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
