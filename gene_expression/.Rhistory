filter(annot == "heat shock") %>%
ggplot(., aes(x=Location, y=norm_expression, fill=Location)) +
geom_boxplot() +
labs(y = "Normalized Expression Level", title = "Acropora_010472: heat shock") +
theme(text = element_text(size = 15)) +
theme_classic() +
scale_fill_manual(values = c("CCC" = "orange", "nursery" = "darkblue")) +
theme(legend.position = "none")
# Cytochrome P450, family 21, subfamily A, polypeptide 2
p6<-darkmagentagenes_annot_counts %>%
filter(annot == "Cytochrome P450, family 21, subfamily A, polypeptide 2") %>%
ggplot(., aes(x=Location, y=norm_expression, fill=Location)) +
geom_boxplot() +
labs(y = "Normalized Expression Level", title = "Acropora_013946: Cytochrome P450") +
theme(text = element_text(size = 15)) +
theme_classic() +
scale_fill_manual(values = c("CCC" = "orange", "nursery" = "darkblue")) +
theme(legend.position = "none")
#	apoptotic process
p7<-darkmagentagenes_annot_counts %>%
filter(annot == "apoptotic process") %>%
ggplot(., aes(x=Location, y=norm_expression, fill=Location)) +
geom_boxplot() +
labs(y = "Normalized Expression Level", title = "Acropora_010993: apoptotic process") +
theme(text = element_text(size = 15)) +
theme_classic() +
scale_fill_manual(values = c("CCC" = "orange", "nursery" = "darkblue")) +
theme(legend.position = "none")
plot_grid(p1,p2,p3,p4,p5,p6,p7,nrow=2)
#ggsave("darkmagentagenes.pdf", width = 12, height = 7)
ggsave("darkmagentagenes.pdf", width = 12, height = 7)
mediumpurple3 <- read_csv("WGCNA/mediumpurple3_genelist.csv")
mediumpurple3 %>%
select(gene) %>%
distinct() -> mediumpurple3genes
mediumpurple3genes %>%
left_join(., gene_annot, by = "gene") %>%
drop_na(annot) %>%
left_join(., vst_normalized_counts) %>%
left_join(allgenesl2fc, by = "gene") %>%
left_join(., design, by = c("Sample_ID", "Location")) -> mediumpurple3genes_annot_counts
mediumpurple3genes_annot_counts
write_csv(mediumpurple3genes_annot_counts, "mediumpurple3genes_annot_counts_vstnormalized.csv")
m1<-mediumpurple3genes_annot_counts %>%
filter(annot == "PIH1 domain-containing protein") %>%
ggplot(., aes(x=Location, y=norm_expression, fill=Location)) +
geom_boxplot() +
labs(y = "Normalized Expression Level", title = "Acropora_023565: PIH1 domain-containing protein") +
theme(text = element_text(size = 15)) +
theme_classic() +
scale_fill_manual(values = c("CCC" = "orange", "nursery" = "darkblue")) +
theme(legend.position = "none")
# assists the folding of proteins upon ATP hydrolysis
m2<-mediumpurple3genes_annot_counts %>%
filter(annot == "assists the folding of proteins upon ATP hydrolysis") %>%
ggplot(., aes(x=Location, y=norm_expression, fill=Location)) +
geom_boxplot() +
labs(y = "Normalized Expression Level", title = "Acropora_015651: assists the folding of proteins upon ATP hydrolysis") +
theme(text = element_text(size = 15)) +
theme_classic() +
scale_fill_manual(values = c("CCC" = "orange", "nursery" = "darkblue")) +
theme(legend.position = "none")
# Matrix metalloproteinase-28
m3<-mediumpurple3genes_annot_counts %>%
filter(annot == "Matrix metalloproteinase-28") %>%
ggplot(., aes(x=Location, y=norm_expression, fill=Location)) +
geom_boxplot() +
labs(y = "Normalized Expression Level", title = "Acropora_006280: Matrix metalloproteinase-28") +
theme(text = element_text(size = 15)) +
theme_classic() +
scale_fill_manual(values = c("CCC" = "orange", "nursery" = "darkblue")) +
theme(legend.position = "none")
# C-type lectin (CTL) or carbohydrate-recognition domain (CRD)
m4<-mediumpurple3genes_annot_counts %>%
filter(annot == "C-type lectin (CTL) or carbohydrate-recognition domain (CRD)") %>%
ggplot(., aes(x=Location, y=norm_expression, fill=Location)) +
geom_boxplot() +
labs(y = "Normalized Expression Level", title = "Acropora_013375: C-type lectin (CTL) or carbohydrate-recognition domain (CRD)") +
theme(text = element_text(size = 15)) +
theme_classic() +
scale_fill_manual(values = c("CCC" = "orange", "nursery" = "darkblue")) +
theme(legend.position = "none")
plot_grid(m1,m2,m3,m4,nrow=1)
ggsave("mediumpurple3genes.pdf", width = 12, height = 7)
library(tidyverse)
library(readxl)
library(plotrix) # for std.err function
library(sf)
library(mapview)
library(lme4)
library(multcomp)
outplant_monitoring <- read_xlsx("../Data/FromBillSharpe/alldata_FWC/DEP_RT_OUTPLANT_5_24.xlsx", sheet = "RT_OUTPLANT_CORRECTED_4_25")
# Analyzing Monitoring Intervals (MI) 0-25, not including 7.5 or 16.5 (these were additional monitoring time points by BNP team at Region 3, sites 3-4 only)
#fix dates that were read in from Excel wrong
outplant_monitoring %>%
mutate(SURVEY_MONTH = as.numeric(SURVEY_MONTH)) %>%
mutate(MI_Timepoint_date = as.Date(SURVEY_MONTH, origin = "1899-12-30")) %>%
filter(MI_CORRECTED != 7.5 & MI_CORRECTED != 16.5) %>%
select(MI_CORRECTED, SURVEY_MONTH, MI_Timepoint_date) %>%
mutate(MI_CORRECTED = as.factor(MI_CORRECTED)) -> monitoring_interval_dates
library(tidyverse)
library(dplyr)
library(ggplot2)
library(reshape2)
library(topGO)
library(plyr)
library(tidyr)
library(scales)
library(clusterProfiler)
library(GOplot)
library(stringr)
load("Rdata_files/initial_fullddsdesigncountsVsdcounts.RData")
load("Rdata_files/realModels_Acer.RData")
load("Rdata_files/vsd.RData")
load("Rdata_files/pvals.RData")
geneID2GO <- readMappings(file = "~/OneDrive - University of Miami/PhD/NOAA AOML Coral Program/chapter2_UrbanCorals/Acropora_iso2go.tab")
length(geneID2GO)
# Background = all genes from the mapping
allgenes <- names(geneID2GO)
darkmagenta <- read_csv("4_WGCNA/module_gene_lists/darkmagenta_genelist.csv")
darkmagenta %>%
select(gene) %>%
distinct() -> darkmagentagenes
# Module genes (must be character vector!)
darkmagentagenes <- as.character(darkmagentagenes$gene)
darkmagentagenes
geneList <- factor(as.integer(allgenes %in% darkmagentagenes),
levels = c(0,1))  # force both 0 and 1 levels
names(geneList) <- allgenes
is.factor(geneList)          # should be TRUE
head(geneList)               # should show 0s and 1s with gene names
length(geneList)             # should equal length(allgenes)
any(names(geneList) == "")   # should be FALSE
table(geneList)              # should show counts of 0s and 1s
GOdata <- new("topGOdata",
description = "DarkMagenta module",
ontology = "BP",
allGenes = geneList,
annot = annFUN.gene2GO,
gene2GO = geneID2GO)
darkmagentagenes[1:5]                # module genes
head(names(geneID2GO))               # IDs in mapping file
sum(darkmagentagenes %in% names(geneID2GO))
geneID2GO
# How many of your background genes (allgenes) are in gene2GO?
sum(names(geneList) %in% names(geneID2GO))
# Show one gene that is in both lists
intersect(names(geneList), names(geneID2GO))[1]
# What GO terms are linked to that gene?
geneID2GO[[ intersect(names(geneList), names(geneID2GO))[1] ]]
geneID2GO <- read.delim("~/OneDrive - University of Miami/PhD/NOAA AOML Coral Program/chapter2_UrbanCorals/Acropora_iso2go.tab", header = FALSE, stringsAsFactors = FALSE)
colnames(geneID2GO) <- c("gene", "GO")
# Split on semicolon
geneID2GO <- setNames(strsplit(geneID2GO$GO, ";"), geneID2GO$gene)
View(geneID2GO)
length(geneID2GO)
# Background = all genes from the mapping
allgenes <- names(geneID2GO)
GOdata <- new("topGOdata",
description = "DarkMagenta module",
ontology = "BP",
allGenes = geneList,
annot = annFUN.gene2GO,
gene2GO = geneID2GO)
resultTopGO.BP <- runTest(GOdata_BP, algorithm = "classic", statistic = "fisher")
resultTopGO.BP <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
allBPGO = genesInTerm(GOdata)
BP_ANOTATION = lapply(allBPGO,function(x) x[x %in% darkmagentagenes])
BP_ANOTATION
#Transform data and save into csv
BP_Res <- GenTable(GOdata, classicFisher = resultTopGO.BP,  topNodes = 20)
BP_Res$Class = "Biological_Process"
for (x in 1:nrow(BP_Res)){
BP_Res[x,8] <- str_c(BP_ANOTATION[[BP_Res[x,1]]],collapse = ",")
}
GOdata_BP <- new("topGOdata",
description = "DarkMagenta module",
ontology = "BP",
allGenes = geneList,
annot = annFUN.gene2GO,
gene2GO = geneID2GO)
GOdata_MF <- new("topGOdata",
description = "DarkMagenta module",
ontology = "MF",
allGenes = geneList,
annot = annFUN.gene2GO,
gene2GO = geneID2GO)
GOdata_CC <- new("topGOdata",
description = "DarkMagenta module",
ontology = "CC",
allGenes = geneList,
annot = annFUN.gene2GO,
gene2GO = geneID2GO)
# Path to your folder containing the CSV files
module_gene_lists_subfolder <- "4_WGCNA/module_gene_lists/"
# List all files ending with "_genelist.csv" in the folder
file_list <- list.files(path = folder_path,
pattern = "_genelist\\.csv$",
full.names = TRUE)
# List all files ending with "_genelist.csv" in the folder
file_list <- list.files(path = module_gene_lists_subfolder,
pattern = "_genelist\\.csv$",
full.names = TRUE)
file_list
# Path to your folder containing the CSV files
module_gene_lists_subfolder <- "4_WGCNA/module_gene_lists"
# List all files ending with "_genelist.csv" in the folder
file_list <- list.files(path = module_gene_lists_subfolder,
pattern = "_genelist\\.csv$",
full.names = TRUE)
file_list
# Read all files and add a 'module' column with the file name
all_genes <- file_list %>%
set_names() %>%                    # name the list with full paths
map_dfr(~ read_csv(.x) %>%        # read each CSV
mutate(module = tools::file_path_sans_ext(basename(.x))),
.id = NULL)                # no extra list ID column
all_genes
# Read all files and add a 'module' column with the file name
all_genes <- file_list %>%
set_names() %>%                    # name the list with full paths
map_dfr(~ read_csv(.x) %>%
mutate(module = str_remove(tools::file_path_sans_ext(basename(.x)),
"_genelist$")),
.id = NULL)
all_genes
# Check result
head(all_genes)
all_genes %>%
select(gene, module)
all_genes %>%
select(gene, module) -> all_genes
### for module enrichement
module_colors <- data.frame(color = unique(all_genes$module))
for (i in 1:nrow(module_colors)){
myInterestingGenes <- MOdule_clean[MOdule_clean$module == module_colors[i,1],1]
geneList <- factor(as.integer(geneNames %in% myInterestingGenes))
names(geneList) <- geneNames
#Build the topGOdata matrix for each ontology categories
GOdata_BP <- new("topGOdata", ontology = "BP", allGenes = geneList,
annot = annFUN.gene2GO, gene2GO = geneID2GO,nodeSize=5)
GOdata_CC <- new("topGOdata", ontology = "CC", allGenes = geneList,
annot = annFUN.gene2GO, gene2GO = geneID2GO,nodeSize=5)
GOdata_MF <- new("topGOdata", ontology = "MF", allGenes = geneList,
annot = annFUN.gene2GO, gene2GO = geneID2GO, nodeSize=5)
#Perform enrichemnt analysis
resultTopGO.BP <- runTest(GOdata_BP, algorithm = "classic", statistic = "fisher")
resultTopGO.CC <- runTest(GOdata_CC, algorithm = "classic", statistic = "fisher" )
resultTopGO.MF <- runTest(GOdata_MF, algorithm = "classic", statistic = "fisher" )
allBPGO = genesInTerm(GOdata_BP)
allCCGO = genesInTerm(GOdata_CC)
allMFGO = genesInTerm(GOdata_MF)
### Load function for extracting genes associated with a GO ID
BP_ANOTATION = lapply(allBPGO,function(x) x[x %in% myInterestingGenes])
CC_ANOTATION = lapply(allCCGO,function(x) x[x %in% myInterestingGenes])
MF_ANOTATION = lapply(allMFGO,function(x) x[x %in% myInterestingGenes])
#Transform data and save into csv
BP_Res <- GenTable(GOdata_BP, classicFisher = resultTopGO.BP,  topNodes = 20)
BP_Res$Class = "Biological_Process"
for (x in 1:nrow(BP_Res)){
BP_Res[x,8] <- str_c(BP_ANOTATION[[BP_Res[x,1]]],collapse = ",")
}
CC_Res <- GenTable(GOdata_CC, classicFisher = resultTopGO.CC,  topNodes =  20)
CC_Res$Class = "Cellular_component"
for (x in 1:nrow(CC_Res)){
CC_Res[x,8] <- str_c(CC_ANOTATION[[CC_Res[x,1]]],collapse = ",")
}
MF_Res <- GenTable(GOdata_MF, classicFisher = resultTopGO.MF,  topNodes =  20)
MF_Res$Class = "Molecular_function"
for (x in 1:nrow(MF_Res)){
MF_Res[x,8] <- str_c(MF_ANOTATION[[MF_Res[x,1]]],collapse = ",")
}
#Combine three types of GO for output
GO_combine <- rbind(MF_Res,CC_Res,BP_Res)
GO_combine$classicFisher <- as.numeric(GO_combine$classicFisher)
### filter enriched term using adjusted P-value
GO_combine <- GO_combine[GO_combine$classicFisher < 0.05 ,]
names(GO_combine)[8] = "GeneList"
write.csv(GO_combine,
paste0("/Users/Leon/OneDrive - Cornell University/Projects/9_Sorghum/8_GO/vsd100/GO_vsd100_",module_colors[i,1],".csv"), sep ="\t",
quote = F, row.names = F)
#write.csv(GO_combine,
#paste0("/Users/Leon/OneDrive - Cornell University/Projects/9_Sorghum/16_AME/",module_colors[i,1],"peak_GO.csv"), sep ="\t",
#quote = F, row.names = F)
#write.csv(GO_combine,
#paste0("/Users/Leon/OneDrive - Cornell University/Projects/9_Sorghum/11_MODs_profile/MODs_GO/",module_colors[i,1],"specific_GO.csv"), sep ="\t",
#quote = F, row.names = F)
}
for (i in 1:nrow(module_colors)){
myInterestingGenes <- all_genes[all_genes$module == module_colors[i,1],1]
geneList <- factor(as.integer(allgenes %in% myInterestingGenes))
names(geneList) <- geneNames
#Build the topGOdata matrix for each ontology categories
GOdata_BP <- new("topGOdata", ontology = "BP", allGenes = geneList,
annot = annFUN.gene2GO, gene2GO = geneID2GO,nodeSize=5)
GOdata_CC <- new("topGOdata", ontology = "CC", allGenes = geneList,
annot = annFUN.gene2GO, gene2GO = geneID2GO,nodeSize=5)
GOdata_MF <- new("topGOdata", ontology = "MF", allGenes = geneList,
annot = annFUN.gene2GO, gene2GO = geneID2GO, nodeSize=5)
#Perform enrichemnt analysis
resultTopGO.BP <- runTest(GOdata_BP, algorithm = "classic", statistic = "fisher")
resultTopGO.CC <- runTest(GOdata_CC, algorithm = "classic", statistic = "fisher" )
resultTopGO.MF <- runTest(GOdata_MF, algorithm = "classic", statistic = "fisher" )
allBPGO = genesInTerm(GOdata_BP)
allCCGO = genesInTerm(GOdata_CC)
allMFGO = genesInTerm(GOdata_MF)
### Load function for extracting genes associated with a GO ID
BP_ANOTATION = lapply(allBPGO,function(x) x[x %in% myInterestingGenes])
CC_ANOTATION = lapply(allCCGO,function(x) x[x %in% myInterestingGenes])
MF_ANOTATION = lapply(allMFGO,function(x) x[x %in% myInterestingGenes])
#Transform data and save into csv
BP_Res <- GenTable(GOdata_BP, classicFisher = resultTopGO.BP,  topNodes = 20)
BP_Res$Class = "Biological_Process"
for (x in 1:nrow(BP_Res)){
BP_Res[x,8] <- str_c(BP_ANOTATION[[BP_Res[x,1]]],collapse = ",")
}
CC_Res <- GenTable(GOdata_CC, classicFisher = resultTopGO.CC,  topNodes =  20)
CC_Res$Class = "Cellular_component"
for (x in 1:nrow(CC_Res)){
CC_Res[x,8] <- str_c(CC_ANOTATION[[CC_Res[x,1]]],collapse = ",")
}
MF_Res <- GenTable(GOdata_MF, classicFisher = resultTopGO.MF,  topNodes =  20)
MF_Res$Class = "Molecular_function"
for (x in 1:nrow(MF_Res)){
MF_Res[x,8] <- str_c(MF_ANOTATION[[MF_Res[x,1]]],collapse = ",")
}
#Combine three types of GO for output
GO_combine <- rbind(MF_Res,CC_Res,BP_Res)
GO_combine$classicFisher <- as.numeric(GO_combine$classicFisher)
### filter enriched term using adjusted P-value
GO_combine <- GO_combine[GO_combine$classicFisher < 0.05 ,]
names(GO_combine)[8] = "GeneList"
write.csv(GO_combine,
paste0("/Users/Leon/OneDrive - Cornell University/Projects/9_Sorghum/8_GO/vsd100/GO_vsd100_",module_colors[i,1],".csv"), sep ="\t",
quote = F, row.names = F)
#write.csv(GO_combine,
#paste0("/Users/Leon/OneDrive - Cornell University/Projects/9_Sorghum/16_AME/",module_colors[i,1],"peak_GO.csv"), sep ="\t",
#quote = F, row.names = F)
#write.csv(GO_combine,
#paste0("/Users/Leon/OneDrive - Cornell University/Projects/9_Sorghum/11_MODs_profile/MODs_GO/",module_colors[i,1],"specific_GO.csv"), sep ="\t",
#quote = F, row.names = F)
}
for (i in 1:nrow(module_colors)){
myInterestingGenes <- all_genes[all_genes$module == module_colors[i,1],1]
geneList <- factor(as.integer(allgenes %in% myInterestingGenes))
names(geneList) <- allgenes
#Build the topGOdata matrix for each ontology categories
GOdata_BP <- new("topGOdata", ontology = "BP", allGenes = geneList,
annot = annFUN.gene2GO, gene2GO = geneID2GO,nodeSize=5)
GOdata_CC <- new("topGOdata", ontology = "CC", allGenes = geneList,
annot = annFUN.gene2GO, gene2GO = geneID2GO,nodeSize=5)
GOdata_MF <- new("topGOdata", ontology = "MF", allGenes = geneList,
annot = annFUN.gene2GO, gene2GO = geneID2GO, nodeSize=5)
#Perform enrichemnt analysis
resultTopGO.BP <- runTest(GOdata_BP, algorithm = "classic", statistic = "fisher")
resultTopGO.CC <- runTest(GOdata_CC, algorithm = "classic", statistic = "fisher" )
resultTopGO.MF <- runTest(GOdata_MF, algorithm = "classic", statistic = "fisher" )
allBPGO = genesInTerm(GOdata_BP)
allCCGO = genesInTerm(GOdata_CC)
allMFGO = genesInTerm(GOdata_MF)
### Load function for extracting genes associated with a GO ID
BP_ANOTATION = lapply(allBPGO,function(x) x[x %in% myInterestingGenes])
CC_ANOTATION = lapply(allCCGO,function(x) x[x %in% myInterestingGenes])
MF_ANOTATION = lapply(allMFGO,function(x) x[x %in% myInterestingGenes])
#Transform data and save into csv
BP_Res <- GenTable(GOdata_BP, classicFisher = resultTopGO.BP,  topNodes = 20)
BP_Res$Class = "Biological_Process"
for (x in 1:nrow(BP_Res)){
BP_Res[x,8] <- str_c(BP_ANOTATION[[BP_Res[x,1]]],collapse = ",")
}
CC_Res <- GenTable(GOdata_CC, classicFisher = resultTopGO.CC,  topNodes =  20)
CC_Res$Class = "Cellular_component"
for (x in 1:nrow(CC_Res)){
CC_Res[x,8] <- str_c(CC_ANOTATION[[CC_Res[x,1]]],collapse = ",")
}
MF_Res <- GenTable(GOdata_MF, classicFisher = resultTopGO.MF,  topNodes =  20)
MF_Res$Class = "Molecular_function"
for (x in 1:nrow(MF_Res)){
MF_Res[x,8] <- str_c(MF_ANOTATION[[MF_Res[x,1]]],collapse = ",")
}
#Combine three types of GO for output
GO_combine <- rbind(MF_Res,CC_Res,BP_Res)
GO_combine$classicFisher <- as.numeric(GO_combine$classicFisher)
### filter enriched term using adjusted P-value
GO_combine <- GO_combine[GO_combine$classicFisher < 0.05 ,]
names(GO_combine)[8] = "GeneList"
write.csv(GO_combine,
paste0("/Users/Leon/OneDrive - Cornell University/Projects/9_Sorghum/8_GO/vsd100/GO_vsd100_",module_colors[i,1],".csv"), sep ="\t",
quote = F, row.names = F)
#write.csv(GO_combine,
#paste0("/Users/Leon/OneDrive - Cornell University/Projects/9_Sorghum/16_AME/",module_colors[i,1],"peak_GO.csv"), sep ="\t",
#quote = F, row.names = F)
#write.csv(GO_combine,
#paste0("/Users/Leon/OneDrive - Cornell University/Projects/9_Sorghum/11_MODs_profile/MODs_GO/",module_colors[i,1],"specific_GO.csv"), sep ="\t",
#quote = F, row.names = F)
}
# Background = all genes from the mapping
allgenes <- names(geneID2GO)
allgenes
all_genes
# Background universe: all unique genes across all modules
allgenes <- unique(all_genes$genes)
allgenes
all_genes
# Background universe: all unique genes across all modules
allgenes <- unique(all_genes$gene)
allgenes
# List of modules to iterate over
modules <- unique(all_genes$module)
modules
# Loop through each module
for(mod in modules) {
# Genes in this specific module
module_genes <- all_genes$genes[all_genes$module == mod]
# Build geneList for topGO (0/1 factor)
geneList <- factor(as.integer(allgenes %in% module_genes),
levels = c(0,1))
names(geneList) <- allgenes
#Build the topGOdata matrix for each ontology categories
GOdata_BP <- new("topGOdata", ontology = "BP", allGenes = geneList,
annot = annFUN.gene2GO, gene2GO = geneID2GO,nodeSize=5)
GOdata_CC <- new("topGOdata", ontology = "CC", allGenes = geneList,
annot = annFUN.gene2GO, gene2GO = geneID2GO,nodeSize=5)
GOdata_MF <- new("topGOdata", ontology = "MF", allGenes = geneList,
annot = annFUN.gene2GO, gene2GO = geneID2GO, nodeSize=5)
#Perform enrichemnt analysis
resultTopGO.BP <- runTest(GOdata_BP, algorithm = "classic", statistic = "fisher")
resultTopGO.CC <- runTest(GOdata_CC, algorithm = "classic", statistic = "fisher" )
resultTopGO.MF <- runTest(GOdata_MF, algorithm = "classic", statistic = "fisher" )
allBPGO = genesInTerm(GOdata_BP)
allCCGO = genesInTerm(GOdata_CC)
allMFGO = genesInTerm(GOdata_MF)
### Load function for extracting genes associated with a GO ID
BP_ANOTATION = lapply(allBPGO,function(x) x[x %in% myInterestingGenes])
CC_ANOTATION = lapply(allCCGO,function(x) x[x %in% myInterestingGenes])
MF_ANOTATION = lapply(allMFGO,function(x) x[x %in% myInterestingGenes])
#Transform data and save into csv
BP_Res <- GenTable(GOdata_BP, classicFisher = resultTopGO.BP,  topNodes = 20)
BP_Res$Class = "Biological_Process"
for (x in 1:nrow(BP_Res)){
BP_Res[x,8] <- str_c(BP_ANOTATION[[BP_Res[x,1]]],collapse = ",")
}
CC_Res <- GenTable(GOdata_CC, classicFisher = resultTopGO.CC,  topNodes =  20)
CC_Res$Class = "Cellular_component"
for (x in 1:nrow(CC_Res)){
CC_Res[x,8] <- str_c(CC_ANOTATION[[CC_Res[x,1]]],collapse = ",")
}
MF_Res <- GenTable(GOdata_MF, classicFisher = resultTopGO.MF,  topNodes =  20)
MF_Res$Class = "Molecular_function"
for (x in 1:nrow(MF_Res)){
MF_Res[x,8] <- str_c(MF_ANOTATION[[MF_Res[x,1]]],collapse = ",")
}
#Combine three types of GO for output
GO_combine <- rbind(MF_Res,CC_Res,BP_Res)
GO_combine$classicFisher <- as.numeric(GO_combine$classicFisher)
### filter enriched term using adjusted P-value
GO_combine <- GO_combine[GO_combine$classicFisher < 0.05 ,]
names(GO_combine)[8] = "GeneList"
write.csv(GO_combine,
module_colors[i,1],".csv")
}
names(GO_combine)[8] = "GeneList"
# Loop through each module
for(mod in modules) {
# Genes in this specific module
module_genes <- all_genes$genes[all_genes$module == mod]
# Build geneList for topGO (0/1 factor)
geneList <- factor(as.integer(allgenes %in% module_genes),
levels = c(0,1))
names(geneList) <- allgenes
#Build the topGOdata matrix for each ontology categories
GOdata_BP <- new("topGOdata", ontology = "BP", allGenes = geneList,
annot = annFUN.gene2GO, gene2GO = geneID2GO,nodeSize=5)
GOdata_CC <- new("topGOdata", ontology = "CC", allGenes = geneList,
annot = annFUN.gene2GO, gene2GO = geneID2GO,nodeSize=5)
GOdata_MF <- new("topGOdata", ontology = "MF", allGenes = geneList,
annot = annFUN.gene2GO, gene2GO = geneID2GO, nodeSize=5)
#Perform enrichemnt analysis
resultTopGO.BP <- runTest(GOdata_BP, algorithm = "classic", statistic = "fisher")
resultTopGO.CC <- runTest(GOdata_CC, algorithm = "classic", statistic = "fisher" )
resultTopGO.MF <- runTest(GOdata_MF, algorithm = "classic", statistic = "fisher" )
allBPGO = genesInTerm(GOdata_BP)
allCCGO = genesInTerm(GOdata_CC)
allMFGO = genesInTerm(GOdata_MF)
### Load function for extracting genes associated with a GO ID
BP_ANOTATION = lapply(allBPGO,function(x) x[x %in% module_genes])
CC_ANOTATION = lapply(allCCGO,function(x) x[x %in% module_genes])
MF_ANOTATION = lapply(allMFGO,function(x) x[x %in% module_genes])
#Transform data and save into csv
BP_Res <- GenTable(GOdata_BP, classicFisher = resultTopGO.BP,  topNodes = 20)
BP_Res$Class = "Biological_Process"
for (x in 1:nrow(BP_Res)){
BP_Res[x,8] <- str_c(BP_ANOTATION[[BP_Res[x,1]]],collapse = ",")
}
CC_Res <- GenTable(GOdata_CC, classicFisher = resultTopGO.CC,  topNodes =  20)
CC_Res$Class = "Cellular_component"
for (x in 1:nrow(CC_Res)){
CC_Res[x,8] <- str_c(CC_ANOTATION[[CC_Res[x,1]]],collapse = ",")
}
MF_Res <- GenTable(GOdata_MF, classicFisher = resultTopGO.MF,  topNodes =  20)
MF_Res$Class = "Molecular_function"
for (x in 1:nrow(MF_Res)){
MF_Res[x,8] <- str_c(MF_ANOTATION[[MF_Res[x,1]]],collapse = ",")
}
#Combine three types of GO for output
GO_combine <- rbind(MF_Res,CC_Res,BP_Res)
GO_combine$classicFisher <- as.numeric(GO_combine$classicFisher)
### filter enriched term using adjusted P-value
GO_combine <- GO_combine[GO_combine$classicFisher < 0.05 ,]
names(GO_combine)[8] = "GeneList"
}
View(resultTopGO.MF)
