)
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
#absValue=1,
absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level1=0.1,
#level1=0.05,
level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
#level2=0.01,
level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
#level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5 # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
#absValue=1,
absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level1=0.1,
#level1=0.05,
level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
#level2=0.01,
level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
#level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5 # height of the hierarchical clustering tree
colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
#absValue=1,
absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level1=0.1,
#level1=0.05,
level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
#level2=0.01,
level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
#level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
#absValue=1,
absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level1=0.1,
#level1=0.05,
#level2=0.1, # FDR cutoff to print in regular (not italic) font.
level2=0.05,
#level2=0.01,
#level3=0.05, # FDR cutoff to print in large bold font.
level3=0.01,
#level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
#goDivision="MF" # either MF, or BP, or CC
goDivision="CC" # either MF, or BP, or CC
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
#absValue=1,
absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level1=0.1,
#level1=0.05,
level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
#level2=0.01,
level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
#level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# scatterplots of gene significance (correlation-based) vs kME
load(file = "RData_files/networkdata_signed.RData")
setwd("~/Library/CloudStorage/OneDrive-UniversityofMiami/GitHub/Ch2_AcerCCC/gene_expression")
# scatterplots of gene significance (correlation-based) vs kME
load(file = "RData_files/networkdata_signed.RData")
load(file = "RData_files/wgcnaData.RData");
traits
traits_n_temp
table(moduleColors)
# names (colors) of the modules
modNames = substring(names(MEs), 3)
geneModuleMembership = as.data.frame(signedKME(datt, MEs));
# always run these before running any of the following script chunks
library(tidyverse)
library(WGCNA)
library(flashClust)
library(ape)
geneModuleMembership = as.data.frame(signedKME(datt, MEs));
geneModuleMembership = as.data.frame(cor(datt, MEs, use = "p"));
geneModuleMembership
geneModuleMembership = as.data.frame(signedKME(datt, MEs));
geneModuleMembership
signedKME(datt, MEs)
View(geneModuleMembership)
geneModuleMembership1 = as.data.frame(signedKME(datt, MEs));
geneModuleMembership2 = as.data.frame(cor(datt, MEs, use = "p"));
identical(geneModuleMembership1, geneModuleMembership2)
all.equal(geneModuleMembership1, geneModuleMembership2)
geneModuleMembership1
View(geneModuleMembership1)
View(geneModuleMembership2)
geneModuleMembership = as.data.frame(signedKME(datt, MEs));
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
nGenes = ncol(datt);
nSamples = nrow(datt);
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");
# run for each of these statements individually
whichTrait="CCC"
geneTraitSignificance = as.data.frame(cor(datt, whichTrait, use = "p"));
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));
geneTraitSignificance = as.data.frame(cor(datt, whichTrait, use = "p"));
View(datt)
nGenes
whichTrait
selTrait = as.data.frame(traits_n_temp[,whichTrait]);
names(selTrait) = whichTrait
whichTrait
geneTraitSignificance = as.data.frame(cor(datt, selTrait, use = "p"));
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));
names(geneTraitSignificance) = paste("GS.", names(selTrait), sep="");
names(GSPvalue) = paste("p.GS.", names(selTrait), sep="");
rownames_to_column(geneTraitSignificance, var="Locus") -> geneTraitSignificance
geneTraitSignificance
rownames_to_column(geneModuleMembership, var="Locus") -> geneModuleMembership
merged_GS_MM <- inner_join(geneTraitSignificance, geneModuleMembership, by = "Locus")
View(merged_GS_MM)
merged_GS_MM %>%
tidyr::gather(module, module_membership, MMgreen4:MMgrey)
merged_GS_MM %>%
tidyr::gather(module, module_membership, MMgreen4:MMgrey) %>%
filter(module== "MMbrown2" | module == "MMmagenta3") %>%
ggplot(aes(module_membership, GS.CCC, color = module)) +
geom_point(size = 2, alpha = 1/100) +
geom_smooth(color="black", method = lm, se = T, fill = "grey") +
theme_classic() +
ylim(c(-1,1)) +
xlim(c(-1,1)) +
facet_wrap(~module, scales = "free") +
scale_color_manual(values = c("brown2", "magenta3")) +
theme(legend.position = "none") +
labs(x="Module Membership",
y="Gene Significance for Coral City Camera")
ggsave("MM_GS_CCC.png")
rownames(module_eigengenes)
MEs
View(traits_n_temp)
load("Rdata_files/initial_fullddsdesigncountsVsdcounts.RData")
View(design)
design %>%
rownames_to_column(var="Sample_ID") %>%
filter(!Sample_ID == "Acer_1099") -> design
all.equal(design$Sample_ID, rownames(MEs))
# Create the design matrix from the `time_point` variable
des_mat <- model.matrix(~ design$Location)
des_mat
# lmFit() needs a transposed version of the matrix
fit <- limma::lmFit(t(MEs), design = des_mat)
# Apply empirical Bayes to smooth standard errors
fit <- limma::eBayes(fit)
# Apply multiple testing correction and obtain stats
stats_df <- limma::topTable(fit, number = ncol(MEs)) %>%
tibble::rownames_to_column("module")
stats_df
MEs %>%
tibble::rownames_to_column("accession_code")
module_brown2 <- MEs %>%
tibble::rownames_to_column("accession_code") %>%
# Here we are performing an inner join with a subset of metadata
dplyr::inner_join(design %>%
dplyr::select(Sample_ID, Location),
by = c("accession_code" = "Sample_ID")
)
View(module_brown2)
View(MEs)
ggplot(
module_brown2,
aes(
x = Location,
y = MMbrown2,
color = Loation
)
) +
# a boxplot with outlier points hidden (they will be in the sina plot)
geom_boxplot(width = 0.2, outlier.shape = NA) +
# A sina plot to show all of the individual data points
ggforce::geom_sina(maxwidth = 0.3) +
theme_classic()
ggplot(
module_brown2,
aes(
x = Location,
y = MEbrown2,
color = Loation
)
) +
# a boxplot with outlier points hidden (they will be in the sina plot)
geom_boxplot(width = 0.2, outlier.shape = NA) +
# A sina plot to show all of the individual data points
ggforce::geom_sina(maxwidth = 0.3) +
theme_classic()
ggplot(
module_brown2,
aes(
x = Location,
y = MEbrown2,
color = Location
)
) +
# a boxplot with outlier points hidden (they will be in the sina plot)
geom_boxplot(width = 0.2, outlier.shape = NA) +
# A sina plot to show all of the individual data points
ggforce::geom_sina(maxwidth = 0.3) +
theme_classic()
ggplot(module_brown2,aes(x = Location, y = MEbrown2,color = Location)) +
geom_boxplot(width = 0.2) +
theme_classic()
MEs %>%
tibble::rownames_to_column("accession_code") %>%
dplyr::inner_join(design %>%
dplyr::select(Sample_ID, Location),
by = c("accession_code" = "Sample_ID")) %>%
ggplot(.,aes(x = Location, y = MEbrown2,color = Location)) +
geom_boxplot(width = 0.2) +
theme_classic() +
scale_color_manual(values = c("darkblue", "orange"))
MEs %>%
tibble::rownames_to_column("accession_code") %>%
dplyr::inner_join(design %>%
dplyr::select(Sample_ID, Location),
by = c("accession_code" = "Sample_ID")) %>%
ggplot(.,aes(x = Location, y = MEbrown2,fill = Location)) +
geom_boxplot(width = 0.2) +
theme_classic() +
scale_fill_manual(values = c("darkblue", "orange"))
MEs %>%
tibble::rownames_to_column("accession_code") %>%
dplyr::inner_join(design %>%
dplyr::select(Sample_ID, Location),
by = c("accession_code" = "Sample_ID"))
MEs %>%
tibble::rownames_to_column("accession_code") %>%
dplyr::inner_join(design %>%
dplyr::select(Sample_ID, Location),
by = c("accession_code" = "Sample_ID")) %>%
select(accession_code, MEbrown2, MEdarkseagreen2, MEmagenta3, Location) %>%
pivot_longer(MEbrown2:MEmagenta3, names_to = "module", values_to = "collective_expression_level") %>%
ggplot(.,aes(x = Location, y = collective_expression_level,fill = Location)) +
geom_boxplot(width = 0.2) +
facet_wrap(~module) +
theme_classic() +
scale_fill_manual(values = c("darkblue", "orange"))
MEs %>%
tibble::rownames_to_column("accession_code") %>%
dplyr::inner_join(design %>%
dplyr::select(Sample_ID, Location),
by = c("accession_code" = "Sample_ID")) %>%
select(accession_code, MEbrown2, MEmagenta3, Location) %>%
pivot_longer(MEbrown2:MEmagenta3, names_to = "module", values_to = "collective_expression_level") %>%
ggplot(.,aes(x = Location, y = collective_expression_level,fill = Location)) +
geom_boxplot(width = 0.2) +
facet_wrap(~module) +
theme_classic() +
scale_fill_manual(values = c("darkblue", "orange"))
ggsave("ME_expression_location.pdf")
View(traits_n_temp)
temp_data <- read_csv("results/temp_DHW_summary.csv")
temp_data %>%
mutate(site = case_when(DHW >=5 ~ "CCC",
DHW < 4 ~ "Nursery")) -> temp_data
temp_data
traits
all.equal(colnames(vsd.wg), rownames(design)) #TRUE
#change Location to be binary (0 = FALSE, 1 = TRUE)
CCC = as.numeric(design$Location=="CCC")
Nursery = as.numeric(design$Location == "nursery")
traits <- data.frame(cbind(CCC, Nursery))
rownames(traits) <- rownames(design)
traits
traits %>%
rownames_to_column(var = "Sample_ID")  -> traits
traits
rownames(design)
design
temp_data <- read_csv("results/temp_DHW_summary.csv")
temp_data %>%
mutate(site = case_when(DHW >=5 ~ "CCC",
DHW < 4 ~ "Nursery")) -> temp_data
temp_data
full_join(design, traits, by = "site")
design
design %>%
rename(site = Location)
design %>%
dplyr::rename(site = Location)
design %>%
dplyr::rename(site = Location) -> design
full_join(design, traits, by = "site")
traits
full_join(design, temp_data, by = "site")
temp_data %>%
mutate(site = case_when(site == "Nursery" ~ "nursery",
site == "CCC" ~ "CCC"))
temp_data %>%
mutate(site = case_when(site == "Nursery" ~ "nursery",
site == "CCC" ~ "CCC")) -> temp_data
full_join(design, temp_data, by = "site")
full_join(design, temp_data, by = "site") -> sample_data_temp
MEs %>%
tibble::rownames_to_column("accession_code") %>%
dplyr::inner_join(sample_data_temp %>%
dplyr::select(Sample_ID, site, Max:DHW),
by = c("accession_code" = "Sample_ID"))
MEs %>%
tibble::rownames_to_column("accession_code") %>%
dplyr::inner_join(sample_data_temp %>%
dplyr::select(Sample_ID, site, Max:DHW),
by = c("accession_code" = "Sample_ID")) %>%
select(accession_code, MEbrown2, MEmagenta3, site:DHW) %>%
pivot_longer(MEbrown2:MEmagenta3, names_to = "module", values_to = "collective_expression_level")
MEs %>%
tibble::rownames_to_column("accession_code") %>%
dplyr::inner_join(sample_data_temp %>%
dplyr::select(Sample_ID, site, Max:DHW),
by = c("accession_code" = "Sample_ID")) %>%
select(accession_code, MEbrown2, MEmagenta3, site:DHW) %>%
pivot_longer(MEbrown2:MEmagenta3, names_to = "module", values_to = "collective_expression_level") %>%
pivot_longer(Max:DHW, names_to = "temp_variable", values_to = "value")
MEs %>%
tibble::rownames_to_column("accession_code") %>%
dplyr::inner_join(sample_data_temp %>%
dplyr::select(Sample_ID, site, Max:DHW),
by = c("accession_code" = "Sample_ID")) %>%
select(accession_code, MEbrown2, MEmagenta3, site:DHW) %>%
pivot_longer(MEbrown2:MEmagenta3, names_to = "module", values_to = "collective_expression_level")
MEs %>%
tibble::rownames_to_column("accession_code") %>%
dplyr::inner_join(sample_data_temp %>%
dplyr::select(Sample_ID, site, Max:DHW),
by = c("accession_code" = "Sample_ID")) %>%
select(accession_code, MEbrown2, MEmagenta3, site:DHW) %>%
pivot_longer(MEbrown2:MEmagenta3, names_to = "module", values_to = "collective_expression_level") %>%
ggplot(.,aes(x = DHW, y = collective_expression_level,fill = Location)) +
geom_boxplot(width = 0.2) +
facet_wrap(~module) +
theme_classic() +
scale_fill_manual(values = c("darkblue", "orange"))
MEs %>%
tibble::rownames_to_column("accession_code") %>%
dplyr::inner_join(sample_data_temp %>%
dplyr::select(Sample_ID, site, Max:DHW),
by = c("accession_code" = "Sample_ID")) %>%
select(accession_code, MEbrown2, MEmagenta3, site:DHW) %>%
pivot_longer(MEbrown2:MEmagenta3, names_to = "module", values_to = "collective_expression_level") %>%
ggplot(.,aes(x = DHW, y = collective_expression_level,fill = site)) +
geom_boxplot(width = 0.2) +
facet_wrap(~module) +
theme_classic() +
scale_fill_manual(values = c("darkblue", "orange"))
MEs %>%
tibble::rownames_to_column("accession_code") %>%
dplyr::inner_join(sample_data_temp %>%
dplyr::select(Sample_ID, site, Max:DHW),
by = c("accession_code" = "Sample_ID")) %>%
select(accession_code, MEbrown2, MEmagenta3, site:DHW) %>%
pivot_longer(MEbrown2:MEmagenta3, names_to = "module", values_to = "collective_expression_level") %>%
ggplot(.,aes(x = Max, y = collective_expression_level,fill = site)) +
geom_boxplot(width = 0.2) +
facet_wrap(~module) +
theme_classic() +
scale_fill_manual(values = c("darkblue", "orange"))
MEs %>%
tibble::rownames_to_column("accession_code") %>%
dplyr::inner_join(sample_data_temp %>%
dplyr::select(Sample_ID, site, Max:DHW),
by = c("accession_code" = "Sample_ID")) %>%
select(accession_code, MEbrown2, MEmagenta3, site:DHW) %>%
pivot_longer(MEbrown2:MEmagenta3, names_to = "module", values_to = "collective_expression_level") %>%
ggplot(.,aes(x = Min, y = collective_expression_level,fill = site)) +
geom_boxplot(width = 0.2) +
facet_wrap(~module) +
theme_classic() +
scale_fill_manual(values = c("darkblue", "orange"))
Max
MEs %>%
tibble::rownames_to_column("accession_code") %>%
dplyr::inner_join(sample_data_temp %>%
dplyr::select(Sample_ID, site, Max:DHW),
by = c("accession_code" = "Sample_ID")) %>%
select(accession_code, MEbrown2, MEmagenta3, site:DHW) %>%
pivot_longer(MEbrown2:MEmagenta3, names_to = "module", values_to = "collective_expression_level") %>%
ggplot(.,aes(x = Max, y = collective_expression_level,fill = site)) +
geom_boxplot(width = 0.2) +
facet_wrap(~module) +
theme_classic() +
scale_fill_manual(values = c("darkblue", "orange"))
MEs %>%
tibble::rownames_to_column("accession_code") %>%
dplyr::inner_join(sample_data_temp %>%
dplyr::select(Sample_ID, site, Max:DHW),
by = c("accession_code" = "Sample_ID")) %>%
select(accession_code, MEbrown2, MEmagenta3, site:DHW) %>%
pivot_longer(MEbrown2:MEmagenta3, names_to = "module", values_to = "collective_expression_level") %>%
ggplot(.,aes(x = Max, y = collective_expression_level,fill = site)) +
geom_boxplot(width = 0.2) +
facet_wrap(~module) +
theme_classic() +
scale_fill_manual(values = c("orange", "darkblue",))
MEs %>%
tibble::rownames_to_column("accession_code") %>%
dplyr::inner_join(sample_data_temp %>%
dplyr::select(Sample_ID, site, Max:DHW),
by = c("accession_code" = "Sample_ID")) %>%
select(accession_code, MEbrown2, MEmagenta3, site:DHW) %>%
pivot_longer(MEbrown2:MEmagenta3, names_to = "module", values_to = "collective_expression_level") %>%
ggplot(.,aes(x = Max, y = collective_expression_level,fill = site)) +
geom_boxplot(width = 0.2) +
facet_wrap(~module) +
theme_classic() +
scale_fill_manual(values = c("orange", "darkblue"))
MEs %>%
tibble::rownames_to_column("accession_code") %>%
dplyr::inner_join(design %>%
dplyr::select(Sample_ID, Location),
by = c("accession_code" = "Sample_ID")) %>%
select(accession_code, MEbrown2, MEmagenta3, Location) %>%
pivot_longer(MEbrown2:MEmagenta3, names_to = "module", values_to = "collective_expression_level") %>%
ggplot(.,aes(x = Location, y = collective_expression_level,fill = Location)) +
geom_boxplot(width = 0.2) +
facet_wrap(~module) +
theme_classic() +
scale_fill_manual(values = c("darkblue", "orange"))
MEs %>%
tibble::rownames_to_column("accession_code") %>%
dplyr::inner_join(sample_data_temp %>%
dplyr::select(Sample_ID, site, Max:DHW),
by = c("accession_code" = "Sample_ID")) %>%
select(accession_code, MEbrown2, MEmagenta3, site:DHW) %>%
pivot_longer(MEbrown2:MEmagenta3, names_to = "module", values_to = "collective_expression_level") %>%
ggplot(.,aes(x = Seasonal, y = collective_expression_level,fill = site)) +
geom_boxplot(width = 0.2) +
facet_wrap(~module) +
theme_classic() +
scale_fill_manual(values = c("orange", "darkblue"))
merged_GS_MM %>%
tidyr::gather(module, module_membership, MMgreen4:MMgrey) %>%
filter(module== "MMbrown2" | module == "MMmagenta3") %>%
ggplot(aes(module_membership, GS.CCC, color = module)) +
geom_point(size = 2, alpha = 1/100) +
geom_smooth(color="black", method = lm, se = T, fill = "grey") +
theme_classic() +
ylim(c(-1,1)) +
xlim(c(-1,1)) +
facet_wrap(~module, scales = "free") +
scale_color_manual(values = c("brown2", "magenta3")) +
theme(legend.position = "none") +
labs(x="Module Membership",
y="Gene Significance for Coral City Camera")
ggsave("MM_GS_CCC.pdf")
