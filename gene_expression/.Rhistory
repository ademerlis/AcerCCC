Class == "Molecular_Function" ~ "MF",
Class == "Cellular_Component" ~ "CC"
)) -> GO_results
#change Class types to ontology so it matches GOslim
GO_results %>%
mutate(Ontology = case_when(
Class == "Biological_Process" ~ "BP",
Class == "Molecular_Function" ~ "MF",
Class == "Cellular_Component" ~ "CC"
)) -> GO_results
GOTERM <- getAnnMap("TERM", "GO")
# Helper function: map slim → detailed terms → genes
goWide <- function(slim, genes, GO_ontology) {
GOTERM <- getAnnMap("TERM", "GO")
terms <- mget(slim_ids, GOTERM, ifnotfound = NA)
terms <- terms[vapply(terms, Ontology, character(1)) == GO_ontology]
slim_ids_o <- names(terms)
OFFSPRING <- switch(GO_ontology,
MF = getAnnMap("MFOFFSPRING", "GO"),
BP = getAnnMap("BPOFFSPRING", "GO"),
CC = getAnnMap("CCOFFSPRING", "GO"),
stop("GO_ontology must be 'MF', 'BP', or 'CC'")
)
slim_to_gene <- mget(slim_ids_o, OFFSPRING, ifnotfound = NA)
slim_to_gene <- slim_to_gene[!is.na(slim_to_gene)]
gene_to_slim <- revmap(slim_to_gene)[genes]
gene_to_slim <- gene_to_slim[!vapply(gene_to_slim, is.null, logical(1))]
if (length(gene_to_slim) == 0) {
return(c())
}
return(names(gene_to_slim)[sapply(gene_to_slim, function(x) any(grepl(slim, unlist(x))))])
}
all_slim_results <- list()
# Loop through modules in GO_results
for (mod in unique(GO_results$module)) {
message("Processing module: ", mod)
# Subset one module’s enriched GO terms
module_df <- GO_results %>% filter(module == mod)
GO_IDs <- module_df$GO.ID
# Wrap in GOCollection
collection <- GOCollection(GO_IDs)
# Run GOslim for each ontology
for (ontology in c("BP", "MF", "CC")) {
tmp <- goSlim(GOCollection(module_df$GO.ID), slim, ontology) %>%
rownames_to_column("GO") %>%
mutate(
module = mod,
Ontology = ontology
) %>%
filter(Count > 0)
all_slim_results[[paste(mod, ontology, sep = "_")]] <- tmp
}
}
all_slim_results
# Combine everything into one tibble
all_slim_results <- bind_rows(all_slim_results)
all_slim_results
# Loop through modules in GO_results
for (mod in unique(GO_results$module)) {
message("Processing module: ", mod)
# Subset one module’s enriched GO terms
module_df <- GO_results %>% filter(module == mod)
GO_IDs <- module_df$GO.ID
# Wrap in GOCollection
collection <- GOCollection(GO_IDs)
# Run GOslim for each ontology
for (ontology in c("BP", "MF", "CC")) {
tmp <- goSlim(GOCollection(module_df$GO.ID), slim, ontology) %>%
rownames_to_column("GO") %>%
mutate(
module = mod,
Ontology = ontology
) %>%
rowwise() %>%
mutate(GOTerms = paste(goWide(GO, GO_IDs, ontology), collapse = ", ")) %>% # adding new column for the GO terms
filter(Count > 0)
all_slim_results[[paste(mod, ontology, sep = "_")]] <- tmp
}
}
all_slim_results <- list()
# Loop through modules in GO_results
for (mod in unique(GO_results$module)) {
message("Processing module: ", mod)
# Subset one module’s enriched GO terms
module_df <- GO_results %>% filter(module == mod)
GO_IDs <- module_df$GO.ID
# Wrap in GOCollection
collection <- GOCollection(GO_IDs)
# Run GOslim for each ontology
for (ontology in c("BP", "MF", "CC")) {
tmp <- goSlim(GOCollection(module_df$GO.ID), slim, ontology) %>%
rownames_to_column("GO") %>%
mutate(
module = mod,
Ontology = ontology
) %>%
rowwise() %>%
mutate(GOTerms = paste(goWide(GO, GO_IDs, ontology), collapse = ", ")) %>% # adding new column for the GO terms
filter(Count > 0)
all_slim_results[[paste(mod, ontology, sep = "_")]] <- tmp
}
}
# Combine everything into one tibble
all_slim_results <- bind_rows(all_slim_results)
all_slim_results
# save to csv
write_csv(all_slim_results, "4_WGCNA/GOslim_enrichment_all_modules.csv")
View(all_slim_results)
GO_results
all_slim_results
GO_child_term <- module_df$Term
# Loop through modules in GO_results
for (mod in unique(GO_results$module)) {
message("Processing module: ", mod)
# Subset one module’s enriched GO terms
module_df <- GO_results %>% filter(module == mod)
GO_IDs <- module_df$GO.ID
GO_child_term <- module_df$Term
# Wrap in GOCollection
collection <- GOCollection(GO_IDs)
# Run GOslim for each ontology
for (ontology in c("BP", "MF", "CC")) {
tmp <- goSlim(GOCollection(module_df$GO.ID), slim, ontology) %>%
rownames_to_column("GO") %>%
mutate(
module = mod,
Ontology = ontology
) %>%
rowwise() %>%
mutate(GOTerms = paste(goWide(GO, GO_IDs, GO_child_term, ontology), collapse = ", ")) %>% # adding new column for the GO terms
filter(Count > 0)
all_slim_results[[paste(mod, ontology, sep = "_")]] <- tmp
}
}
all_slim_results
GO_results
all_slim_results
# BiocManager::install("Rgraphviz")
# BiocManager::install("topGO")
# BiocManager::install("clusterProfiler")
# BiocManager::install("GOplot")
# BiocManager::install("GSEABase")
# BiocManager::install("GO.db")
remotes::install_github("thomasp85/vvgo")
BiocManager::install("rrvgo")
library(rrvgo)
bp_treemap_df <- all_slim_results %>%
filter(Ontology == "BP") %>%
separate_rows(GOTerms, sep = ",\\s*") %>%
mutate(
id = GOTerms,
term = GOTerms,
parent = Term,
value = 1,
module = module
)
bp_treemap_df
all_slim_results %>%
filter(Ontology == "BP")
vvgo(bp_treemap_df$id,
term = bp_treemap_df$term,
parent = bp_treemap_df$parent,
value = bp_treemap_df$value,
fill = bp_treemap_df$module,
show_label = TRUE)
treemap::treemap(bp_treemap_df$id,
term = bp_treemap_df$term,
parent = bp_treemap_df$parent,
value = bp_treemap_df$value,
fill = bp_treemap_df$module,
show_label = TRUE)
vvrgo(bp_treemap_df$id,
term = bp_treemap_df$term,
parent = bp_treemap_df$parent,
value = bp_treemap_df$value,
fill = bp_treemap_df$module,
show_label = TRUE)
library(rrvgo)
vvgo_tree(bp_treemap_df)
# Example for BP ontology
bp_df <- all_slim_results %>%
filter(Ontology == "BP") %>%
select(GO, Term, Count, GOTerms) %>%
mutate(Count = as.numeric(Count))
bp_df
# Expand GOTerms into one row per child GO term
bp_treemap_df <- bp_df %>%
separate_rows(GOTerms, sep = ",\\s*") %>%
mutate(
id = GOTerms,
term = GOTerms,  # Optionally, map to full term names using Term() from GO.db
parent = Term,
value = 1  # Or use Count if you want weighted sizes
)
bp_treemap_df
treemapPlot(bp_treemap_df)
# Expand GOTerms into one row per child GO term
bp_treemap_df <- bp_df %>%
separate_rows(GOTerms, sep = ",\\s*") %>%
mutate(
id = GOTerms,
term = GOTerms,  # Optionally, map to full term names using Term() from GO.db
parentTerm = Term,
value = 1  # Or use Count if you want weighted sizes
)
treemapPlot(bp_treemap_df)
# Expand GOTerms into one row per child GO term
bp_treemap_df <- bp_df %>%
separate_rows(GOTerms, sep = ",\\s*") %>%
mutate(
id = GOTerms,
term = GOTerms,  # Optionally, map to full term names using Term() from GO.db
parentTerm = Term,
vSize = 1  # Or use Count if you want weighted sizes
)
treemapPlot(bp_treemap_df)
bp_treemap_df
# Expand GOTerms into one row per child GO term
bp_treemap_df <- bp_df %>%
separate_rows(GOTerms, sep = ",\\s*") %>%
mutate(
id = GOTerms,
term = GOTerms,  # Optionally, map to full term names using Term() from GO.db
parentTerm = Term,
vSize = Count  # Or use Count if you want weighted sizes
)
treemapPlot(bp_treemap_df)
bp_treemap_df$termName <- Term(bp_treemap_df$term)
bp_treemap_df
treemap(bp_treemap_df)
# Expand GOTerms into one row per child GO term
bp_treemap_df <- bp_df %>%
separate_rows(GOTerms, sep = ",\\s*") %>%
mutate(
id = GOTerms,
term = GOTerms,  # Optionally, map to full term names using Term() from GO.db
parentTerm = Term,
vSize = Count  # Or use Count if you want weighted sizes
)
bp_treemap_df
bp_df
all_slim_results
# Example for BP ontology
bp_df <- all_slim_results %>%
filter(Ontology == "BP") %>%
mutate(Count = as.numeric(Count))
bp_df
# Expand GOTerms into one row per child GO term
bp_treemap_df <- bp_df %>%
separate_rows(GOTerms, sep = ",\\s*") %>%
mutate(
id = GOTerms,
term = GOTerms,  # Optionally, map to full term names using Term() from GO.db
parentTerm = Term,
vSize = Count  # Or use Count if you want weighted sizes
)
bp_treemap_df$termName <- GO.db::Term(bp_treemap_df$term) #gets child GO term names again
bp_treemap_df$termName <- =Term(bp_treemap_df$term) #gets child GO term names again
bp_treemap_df$termName <- Term(bp_treemap_df$term) #gets child GO term names again
bp_treemap_df
treemapPlot(bp_treemap_df,
title = "GO Enrichment Treemap - Biological Process",
vSize = "Significant",                      #Size of boxes based on the "Significant Annotated" count
vColor = "module",                     #Color boxes by VAR
type = "categorical",
font.size.title = 16,
font.size.labels = 12)
treemapPlot(bp_treemap_df,
title = "GO Enrichment Treemap - Biological Process",
vColor = "module",                     #Color boxes by VAR
type = "categorical",
font.size.title = 16,
font.size.labels = 12)
treemapPlot(bp_treemap_df,
title = "GO Enrichment Treemap - Biological Process",
vColor = "module",
font.size.title = 16,
font.size.labels = 12)
bp_treemap_df
all_slim_results
# Expand GOTerms into one row per child GO term
bp_treemap_df <- bp_df %>%
separate_rows(GOTerms, sep = ",\\s*") %>%
mutate(
id = GOTerms,
term = GOTerms,  # Optionally, map to full term names using Term() from GO.db
parentTerm = Term,
vSize = Percent
)
bp_treemap_df$termName <- Term(bp_treemap_df$term) #gets child GO term names again
treemapPlot(bp_treemap_df,
title = "GO Enrichment Treemap - Biological Process",
vColor = "module",
font.size.title = 16,
font.size.labels = 12)
bp_treemap_df
# Expand GOTerms into one row per child GO term
bp_treemap_df <- bp_df %>%
separate_rows(GOTerms, sep = ",\\s*") %>%
mutate(
id = GOTerms,
term = GOTerms,  # Optionally, map to full term names using Term() from GO.db
parentTerm = Term
)
bp_treemap_df$termName <- Term(bp_treemap_df$term) #gets child GO term names again
treemapPlot(bp_treemap_df,
title = "GO Enrichment Treemap - Biological Process",
vColor = "module",
font.size.title = 16,
font.size.labels = 12)
treemapPlot(bp_treemap_df,
title = "GO Enrichment Treemap - Biological Process",
vColor = "module",
vSize = 1,
font.size.title = 16,
font.size.labels = 12)
bp_treemap_df
View(BP_Res)
View(bp_treemap_df)
# Expand GOTerms into one row per child GO term
bp_treemap_df <- bp_df %>%
# If GOTerms is NA or empty, use the GO Slim term itself
mutate(GOTerms = ifelse(is.na(GOTerms) | GOTerms == "", GO, GOTerms)) %>%
separate_rows(GOTerms, sep = ",\\s*") %>%
mutate(
id = GOTerms,
term = GOTerms,  # Optionally, map to full term names using Term() from GO.db
parentTerm = Term
)
bp_treemap_df$termName <- Term(bp_treemap_df$term) #gets child GO term names again
treemapPlot(bp_treemap_df,
title = "GO Enrichment Treemap - Biological Process",
vColor = "module",
vSize = 1,
font.size.title = 16,
font.size.labels = 12)
# Expand GOTerms into one row per child GO term
bp_treemap_df <- bp_df %>%
# If GOTerms is NA or empty, use the GO Slim term itself
mutate(GOTerms = ifelse(is.na(GOTerms) | GOTerms == "", GO, GOTerms)) %>%
separate_rows(GOTerms, sep = ",\\s*") %>%
mutate(
id = GOTerms,
term = GOTerms,  # Optionally, map to full term names using Term() from GO.db
parentTerm = Term,
vSize = 1
)
treemapPlot(bp_treemap_df,
title = "GO Enrichment Treemap - Biological Process",
vColor = "module",
vSize = 1,
font.size.title = 16,
font.size.labels = 12)
treemapPlot(bp_treemap_df %>% select(term = termLabel, parentTerm, vSize, module),
fill = "module")
treemapPlot(bp_treemap_df) %>% select(term = termLabel, parentTerm, vSize, module),
treemapPlot(bp_treemap_df)
# Expand GOTerms into one row per child GO term
bp_treemap_df <- bp_df %>%
# If GOTerms is NA or empty, use the GO Slim term itself
mutate(GOTerms = ifelse(is.na(GOTerms) | GOTerms == "", GO, GOTerms)) %>%
separate_rows(GOTerms, sep = ",\\s*") %>%
mutate(
id = GOTerms,
term = GOTerms,  # Optionally, map to full term names using Term() from GO.db
parentTerm = Term
)
treemapPlot(bp_treemap_df)
bp_treemap_df
treemapPlot(bp_treemap_df)
# Expand GOTerms into one row per child GO term
bp_treemap_df <- bp_df %>%
# If GOTerms is NA or empty, use the GO Slim term itself
mutate(GOTerms = ifelse(is.na(GOTerms) | GOTerms == "", GO, GOTerms)) %>%
separate_rows(GOTerms, sep = ",\\s*") %>%
mutate(
id = GOTerms,
term = GOTerms,  # Optionally, map to full term names using Term() from GO.db
parentTerm = Term,
size = Count
)
bp_treemap_df$termName <- Term(bp_treemap_df$term) #gets child GO term names again
treemapPlot(bp_treemap_df)
# importing data generated from DESeq2 script
lnames=load("RData_files/data4wgcna.RData")
View(vsd.wg)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(reshape2)
library(topGO)
library(plyr)
library(tidyr)
library(scales)
library(stringr)
library(GSEABase)
library(rrvgo)
load("Rdata_files/initial_fullddsdesigncountsVsdcounts.RData")
load("Rdata_files/realModels_Acer.RData")
load("Rdata_files/vsd.RData")
load("Rdata_files/pvals.RData")
geneID2GO <- read.delim("~/OneDrive - University of Miami/PhD/NOAA AOML Coral Program/chapter2_UrbanCorals/Acropora_iso2go.tab", header = FALSE, stringsAsFactors = FALSE)
colnames(geneID2GO) <- c("gene", "GO")
length(geneID2GO) #7995
# Split on semicolon
geneID2GO <- setNames(strsplit(geneID2GO$GO, ";"), geneID2GO$gene)
# Background = all genes from the mapping
allgenes <- names(geneID2GO)
GO_results <- read_csv("4_WGCNA/GO_enrichment_all_modules_allterms.csv")
GO_slim <- read_csv("4_WGCNA/GOslim_enrichment_all_modules.csv")
GO_results <- read_csv("4_WGCNA/GO_enrichment_all_modules_allterms.csv")
GO_slim <- read_csv("4_WGCNA/GOslim_enrichment_all_modules.csv")
# Merge GO_results with GO_slim to add GOTerms column
merged_results <- GO_results %>%
left_join(GO_slim %>% select(GO, GOTerms), by = c("GO.ID" = "GO"))
# Merge GO_results with GO_slim to add GOTerms column
merged_results <- GO_results %>%
left_join(GO_slim %>% dplyr::select(GO, GOTerms), by = c("GO.ID" = "GO"))
merged_results
GO_results
GO_slim
GO_slim %>%
separate(GOTerms, into = paste0("GOTerm", 1:20), sep = ", ", fill = "right")
GO_slim
GO_slim %>%
rename(ParentTerm = GO)
GO_slim %>%
dplyr::rename(ParentTerm = GO)
GO_slim %>%
dplyr::rename(ParentTerm = GO) %>%
separate_rows(GOTerms, sep = ",\\s*") %>%
dplyr::rename(ChildTerm = GOTerms)
GO_slim %>%
dplyr::rename(ParentTerm = GO) %>%
mutate(GOTerms = ifelse(is.na(GOTerms) | GOTerms == "", GO, GOTerms)) %>%
separate_rows(GOTerms, sep = ",\\s*") %>%
dplyr::rename(ChildTerm = GOTerms)
GO_slim %>%
dplyr::rename(ParentTerm = GO) %>%
separate_rows(GOTerms, sep = ",\\s*") %>%
mutate(GOTerms = ifelse(is.na(GOTerms) | GOTerms == "", GO, GOTerms)) %>%
dplyr::rename(ChildTerm = GOTerms)
GO_slim
GO_slim %>%
dplyr::rename(ParentTerm = GO) %>%
separate_rows(GOTerms, sep = ",\\s*") %>%
mutate(GOTerms = ifelse(is.na(GOTerms) | GOTerms == "", ParentTerm, GOTerms)) %>%
dplyr::rename(ChildTerm = GOTerms)
GO_slim %>%
dplyr::rename(ParentTerm = GO) %>%
separate_rows(GOTerms, sep = ",\\s*") %>%
mutate(GOTerms = ifelse(is.na(GOTerms) | GOTerms == "", ParentTerm, GOTerms)) %>%
dplyr::rename(ChildTerm = GOTerms) -> GO_slim_edited
GO_slim_edited
GO_results
GO_slim
GO_slim_edited
# Merge GO_results with GO_slim to add GOTerms column
merged_results <- GO_results %>%
full_join(GO_slim_edited %>% dplyr::select(ParentTerm, ChildTerm), by = c("GO.ID" = "ChildTerm"))
merged_results
View(merged_results)
merged_results %>%
dpylr::rename(GO_slim_term = ParentTerm)
merged_results %>%
dplyr::rename(GO_slim_term = ParentTerm)
GO_slim_edited
GO_slim_edited %>%
full_join(GO_results, by = c("GO.ID" = "ChildTerm"))
# Merge GO_results with GO_slim to add GOTerms column
GO_slim_edited %>%
full_join(GO_results, by = c("module", "Ontology" = "Class", "ChildTerm" = "GO.ID"))
GO_slim_edited
GO_results
GO_slim_edited
GO_results
# Merge GO_results with GO_slim to add GOTerms column
GO_slim_edited %>%
full_join(GO_results, by = c("module", "ChildTerm" = "GO.ID"))
# Merge GO_results with GO_slim to add GOTerms column
GO_slim_edited %>%
full_join(GO_results, by = c("module", "ChildTerm" = "GO.ID")) %>%
dplyr::rename(GO_slim_term = ParentTerm, GO_slim_term_description = Term.x, GO_child_term_description = Term.y)
# Merge GO_results with GO_slim to add GOTerms column
GO_slim_edited %>%
full_join(GO_results, by = c("module", "ChildTerm" = "GO.ID")) %>%
dplyr::rename(GO_slim_term = ParentTerm, GO_slim_term_description = Term.x, GO_child_term_description = Term.y) -> merged_results
write_csv(merged_results, "4_WGCNA/GO_enrichment_all_modules_allterms_withGOslim.csv")
library(tidyverse)
library(dplyr)
library(ggplot2)
library(reshape2)
library(topGO)
library(plyr)
library(tidyr)
library(scales)
library(stringr)
library(GSEABase)
library(rrvgo)
load("Rdata_files/initial_fullddsdesigncountsVsdcounts.RData")
load("Rdata_files/realModels_Acer.RData")
load("Rdata_files/vsd.RData")
load("Rdata_files/pvals.RData")
geneID2GO <- read.delim("~/OneDrive - University of Miami/PhD/NOAA AOML Coral Program/chapter2_UrbanCorals/Acropora_iso2go.tab", header = FALSE, stringsAsFactors = FALSE)
colnames(geneID2GO) <- c("gene", "GO")
length(geneID2GO) #7995
# Split on semicolon
geneID2GO <- setNames(strsplit(geneID2GO$GO, ";"), geneID2GO$gene)
# Background = all genes from the mapping
allgenes <- names(geneID2GO)
GO_results <- read_csv("4_WGCNA/GO_enrichment_all_modules_allterms.csv")
GO_slim <- read_csv("4_WGCNA/GOslim_enrichment_all_modules.csv")
