ggplot(., aes(x=Location, y=expression_level, fill=Location)) +
geom_boxplot() +
theme_classic() +
labs(y = "Normalized Expression Level", title = "Acropora_011526 = T cell activation ") +
theme(text = element_text(size = 15)) +
scale_fill_manual(values = c("CCC" = "orange", "nursery" = "darkblue"))
plot_grid(p1, p2, p3, p4, p5, ncol = 3)
cowplot::plot_grid(p1, p2, p3, p4, p5, ncol = 3)
ggsave("specificgeneexpression.pdf", width = 12, height = 7)
library(DESeq2)
library(tidyverse)
library(factoextra)
library(cowplot)
library(limma)
library(ggforce)
load("RData_files/initial_fullddsdesigncountsVsdcounts.RData")
pca <- prcomp(t(assay(Vsd)))
summary(pca)
fviz_eig(pca)
plotPCA(Vsd, intgroup = c("Location"))
plotPCA(Vsd, intgroup = c("Genotype"))
plotPCA(Vsd, intgroup = c("Location", "Genotype"))
vst_PCAdata <- plotPCA(Vsd, intgroup = c("Location", "Genotype"), returnData = TRUE)
percentVar <- round(100*attr(vst_PCAdata, "percentVar"))
ggplot(vst_PCAdata, aes(PC1, PC2, color=Location, shape=Genotype)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A.cervicornis") +
theme_classic() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())   +
scale_fill_manual(values = c("CCC" = "orange", "nursery" = "darkblue"))
#ggsave("PCA_allgenets.pdf")
ggplot(vst_PCAdata, aes(PC1, PC2, color=Location, shape=Genotype)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A.cervicornis") +
theme_classic() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())   +
scale_color_manual(values = c("CCC" = "orange", "nursery" = "darkblue"))
ggsave("PCA_allgenets.pdf")
ggplot(vst_PCAdata, aes(PC1, PC2, color=Location, shape=Genotype)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A.cervicornis") +
theme_classic() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())   +
scale_color_manual(values = c("CCC" = "orange", "nursery" = "darkblue"))+
stat_ellipse()
ggplot(vst_PCAdata, aes(PC1, PC2, color=Location)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A.cervicornis") +
theme_classic() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())   +
scale_color_manual(values = c("CCC" = "orange", "nursery" = "darkblue"))+
stat_ellipse()
ggsave("PCA_location_ellipse.pdf")
# heatmap and hierarchical clustering:
load("Rdata_files/vsd.RData")
library(vegan)
# library(rgl)
library(ape)
conditions=design
colnames(vsd)
rownames(conditions)
#while the names aren't equal, they are in the same order, so when doing the PCoA and using conditions it still should work
# creating a PCoA eigenvalue matrix
dds.pcoa=pcoa(dist(t(vsd),method="manhattan")/1000)
scores=dds.pcoa$vectors
# copy this table for % variation explained by each axis (Relative_eig column)
dds.pcoa$values
plot(scores[,1], scores[,2],col=c("red","blue")[as.numeric(as.factor(conditions$Location))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Genotype)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=F, col=c("red","blue"))
legend("topright", legend=c("CCC", "Nursery"), fill = c("red","blue"), bty="n")
par(mfrow=c(1,2))
plot(scores[,1], scores[,2],col=c("orange","darkblue")[as.numeric(as.factor(conditions$Location))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Genotype)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=F, col=c("orange","darkblue"))
legend("topright", legend=c("CCC", "Nursery"), fill = c("orange","darkblue"), bty="n")
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), pch=c(15,17,25), bty="n")
plot(scores[,1], scores[,2],col=c("orange","lightblue", "pink")[as.numeric(as.factor(conditions$Genotype))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Location)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Genotype")
ordispider(scores, conditions$Genotype, label=F, col=c("orange","darkblue", "magenta"))
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), fill = c("orange","darkblue", "magenta"), bty="n")
legend("topright", legend=c("CCC", "Nursery"), pch=c(15,17,25), bty="n")
dev.off()
par(mfrow=c(1,2))
plot(scores[,1], scores[,2],col=c("orange","darkblue")[as.numeric(as.factor(conditions$Location))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Genotype)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=F, col=c("orange","darkblue"))
legend("topright", legend=c("CCC", "Nursery"), fill = c("orange","darkblue"), bty="n")
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), pch=c(15,17,25), bty="n")
plot(scores[,1], scores[,2],col=c("orange","lightblue", "pink")[as.numeric(as.factor(conditions$Genotype))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Location)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Genotype")
ordispider(scores, conditions$Genotype, label=F, col=c("orange","darkblue", "magenta"))
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), fill = c("orange","darkblue", "magenta"), bty="n")
legend("topright", legend=c("CCC", "Nursery"), pch=c(15,17,25), bty="n")
plot(scores[,1], scores[,2],col=c("orange","darkblue")[as.numeric(as.factor(conditions$Location))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Genotype)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=F, col=c("orange","darkblue"))
legend("topright", legend=c("CCC", "Nursery"), fill = c("orange","darkblue"), bty="n")
dev.off()
plot(scores[,1], scores[,2],col=c("orange","darkblue")[as.numeric(as.factor(conditions$Location))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=F, col=c("orange","darkblue"))
legend("topleft", legend=c("CCC", "Nursery"), fill = c("orange","darkblue"), bty="n")
plot(scores[,1], scores[,2],col=c("orange","darkblue")[as.numeric(as.factor(conditions$Location))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=F, col=c("orange","darkblue"))
legend("topright", legend=c("CCC", "Nursery"), fill = c("orange","darkblue"), bty="n")
plot(scores[,1], scores[,2],col=c("orange","darkblue")[as.numeric(as.factor(conditions$Location))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Genotype)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=F, col=c("orange","darkblue"))
legend("topright", legend=c("CCC", "Nursery"), fill = c("orange","darkblue"), bty="n")
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), pch=c(15,17,25), bty="n")
plot(scores[,1], scores[,2],col=c("orange","lightblue", "pink")[as.numeric(as.factor(conditions$Genotype))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Location)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Genotype")
par(mfrow=c(1,2))
plot(scores[,1], scores[,2],col=c("orange","darkblue")[as.numeric(as.factor(conditions$Location))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Genotype)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=F, col=c("orange","darkblue"))
legend("topright", legend=c("CCC", "Nursery"), fill = c("orange","darkblue"), bty="n")
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), pch=c(15,17,25), bty="n")
plot(scores[,1], scores[,2],col=c("orange","lightblue", "pink")[as.numeric(as.factor(conditions$Genotype))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Location)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Genotype")
ordispider(scores, conditions$Genotype, label=F, col=c("orange","darkblue", "magenta"))
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), fill = c("orange","darkblue", "magenta"), bty="n")
legend("topright", legend=c("CCC", "Nursery"), pch=c(15,17,25), bty="n")
dev.off()
par(mfrow=c(1,2))
plot(scores[,1], scores[,2],col=c("orange","darkblue")[as.numeric(as.factor(conditions$Location))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Genotype)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=F, col=c("orange","darkblue"))
legend("topright", legend=c("CCC", "Nursery"), fill = c("orange","darkblue"), bty="n")
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), pch=c(15,17,25), bty="n")
plot(scores[,1], scores[,2],col=c("orange","lightblue", "pink")[as.numeric(as.factor(conditions$Genotype))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Location)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Genotype")
ordispider(scores, conditions$Genotype, label=F, col=c("orange","lightblue", "pink"))
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), fill = c("orange","lightblue", "pink"), bty="n")
legend("topright", legend=c("CCC", "Nursery"), pch=c(15,17,25), bty="n")
dev.off()
plot(scores[,1], scores[,2],col=c("orange","darkblue")[as.numeric(as.factor(conditions$Location))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Genotype)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Location")
ordispider(scores, conditions$Location, label=F, col=c("orange","darkblue"))
legend("topright", legend=c("CCC", "Nursery"), fill = c("orange","darkblue"), bty="n")
legend("topleft", legend=c("Cheetos_B", "MiamiBeach_C", "SunnyIsles_E"), pch=c(15,17,25), bty="n")
knitr::opts_chunk$set(echo = TRUE)
library(KEGGREST)
library(tidyverse)
library(pathview)
library(clusterProfiler)
library(enrichplot)
library(cowplot)
kegg.list <- read.table("bioinformatics/Acervicornis_iso2kegg.tab")
colnames(kegg.list) <- c("TranscriptID","KO")
dim(kegg.list)
kegg.list %>%
mutate(gene = str_replace(TranscriptID, "Acervicornis", "Acropora_")) %>%
select(!TranscriptID) -> kegg.list
load("RData_files/Location_CCC_vs_nursery_fc.RData")
CCC_vs_Nursery_DGEs <- read_csv("results/Location_CCC_vs_nursery_annotDGEs_padj05.csv") #828 genes
Location_CCC_vs_nursery.fc %>% right_join(kegg.list, by = "gene") %>%
right_join(., CCC_vs_Nursery_DGEs, by = "gene") %>%  #narrow down to only the DGEs
select(lfc, KO) %>%
na.omit() %>% #414 genes
distinct(KO, .keep_all = TRUE)
Location_CCC_vs_nursery.fc %>% right_join(kegg.list, by = "gene") %>%
right_join(., CCC_vs_Nursery_DGEs, by = "gene") %>%  #narrow down to only the DGEs
select(lfc, KO) %>%
na.omit() %>% #414 genes
distinct(KO, .keep_all = TRUE) %>% #365 distinct KEGG terms
column_to_rownames(var = "KO") -> CCCvsnursery_KEGG_DGEs
KEGG_enrich_CvN <- enrichKEGG(
gene = rownames(CCCvsnursery_KEGG_DGEs),
organism = "ko",
keyType = "kegg",
pvalueCutoff = 0.05,
pAdjustMethod = "fdr",
universe = kegg.list$KO
)
load("RData_files/realModels_Acer.RData")
load("RData_files/pvals.RData")
source=Location_CCC_vs_nursery[!is.na(Location_CCC_vs_nursery$padj),]
source=resLFC[!is.na(resLFC$padj),]
Location_CCC_vs_nursery.fc=data.frame("gene"=row.names(source))
Location_CCC_vs_nursery.fc$lfc=source[,"log2FoldChange"]
head(Location_CCC_vs_nursery.fc)
View(Location_CCC_vs_nursery.fc)
write.csv(Location_CCC_vs_nursery.fc,file="CCC_vs_nursery_fc_lfcshrink.csv",row.names=F,quote=F)
save(Location_CCC_vs_nursery.fc,file="Rdata_files/Location_CCC_vs_nursery_fc_lfcshrink.RData")
load("RData_files/Location_CCC_vs_nursery_fc.RData")
View(Location_CCC_vs_nursery.fc)
load("RData_files/Location_CCC_vs_nursery_fc_lfcshrink.RData")
CCC_vs_Nursery_DGEs <- read_csv("results/Location_CCC_vs_nursery_annotDGEs_padj05.csv") #819 genes
Location_CCC_vs_nursery.fc %>% right_join(kegg.list, by = "gene") %>%
right_join(., CCC_vs_Nursery_DGEs, by = "gene") %>%  #narrow down to only the DGEs
select(lfc, KO) %>%
na.omit() %>% #414 genes
distinct(KO, .keep_all = TRUE) %>% #365 distinct KEGG terms
column_to_rownames(var = "KO") -> CCCvsnursery_KEGG_DGEs
kegg.list <- read.table("bioinformatics/Acervicornis_iso2kegg.tab")
colnames(kegg.list) <- c("TranscriptID","KO")
dim(kegg.list)
kegg.list %>%
mutate(gene = str_replace(TranscriptID, "Acervicornis", "Acropora_")) %>%
select(!TranscriptID) -> kegg.list
Location_CCC_vs_nursery.fc %>% right_join(kegg.list, by = "gene") %>%
right_join(., CCC_vs_Nursery_DGEs, by = "gene") %>%  #narrow down to only the DGEs
select(lfc, KO) %>%
na.omit() %>% #414 genes
distinct(KO, .keep_all = TRUE) %>% #365 distinct KEGG terms
column_to_rownames(var = "KO") -> CCCvsnursery_KEGG_DGEs
View(CCCvsnursery_KEGG_DGEs)
View(CCC_vs_Nursery_DGEs)
CCC_vs_Nursery_DGEs <- read_csv("results/resLFCLocation_CCC_vs_nursery_annotDGEs_padj05.csv") #819 genes
View(CCCvsnursery_KEGG_DGEs)
View(CCC_vs_Nursery_DGEs)
Location_CCC_vs_nursery.fc %>% right_join(kegg.list, by = "gene") %>%
right_join(., CCC_vs_Nursery_DGEs, by = "gene") %>%  #narrow down to only the DGEs
select(lfc, KO) %>%
na.omit() %>% #414 genes
distinct(KO, .keep_all = TRUE) %>% #365 distinct KEGG terms
column_to_rownames(var = "KO") -> CCCvsnursery_KEGG_DGEs
View(CCC_vs_Nursery_DGEs)
CCCvsnursery_KEGG_DGEs
Location_CCC_vs_nursery.fc %>% right_join(kegg.list, by = "gene") %>%
right_join(., CCC_vs_Nursery_DGEs, by = "gene") %>%  #narrow down to only the DGEs
select(lfc, KO) %>%
na.omit() %>% #
Location_CCC_vs_nursery.fc %>% right_join(kegg.list, by = "gene") %>%
right_join(., CCC_vs_Nursery_DGEs, by = "gene") %>%  #narrow down to only the DGEs
select(lfc, KO) %>%
na.omit()
Location_CCC_vs_nursery.fc %>% right_join(kegg.list, by = "gene") %>%
right_join(., CCC_vs_Nursery_DGEs, by = "gene") %>%  #narrow down to only the DGEs
select(lfc, KO) %>%
na.omit() %>% #412 genes
distinct(KO, .keep_all = TRUE)
Location_CCC_vs_nursery.fc %>% right_join(kegg.list, by = "gene") %>%
right_join(., CCC_vs_Nursery_DGEs, by = "gene") %>%  #narrow down to only the DGEs
select(lfc, KO) %>%
na.omit() %>% #412 genes
distinct(KO, .keep_all = TRUE) %>% #365 distinct KEGG terms
column_to_rownames(var = "KO") -> CCCvsnursery_KEGG_DGEs
KEGG_enrich_CvN <- enrichKEGG(
gene = rownames(CCCvsnursery_KEGG_DGEs),
organism = "ko",
keyType = "kegg",
pvalueCutoff = 0.05,
pAdjustMethod = "fdr",
universe = kegg.list$KO
)
dotplot(KEGG_enrich_CvN)
length(unique(KEGG_enrich_CvN@result$Description)) #284 unique KEGG terms
KEGG_enrich_CvN@result$geneID
pathway_ids <- rownames(KEGG_enrich_CvN@result)
# Retrieve information for each pathway
pathway_info <- lapply(pathway_ids, keggGet)
# with multi-factor, multi-level design
load("Rdata_files/initial_fullddsdesigncountsVsdcounts.RData")
dds=DESeq(dds, parallel=TRUE)
# Calculate Cook's distances for all genes
cooks <- cooks.distance(dds)
# with multi-factor, multi-level design
load("Rdata_files/initial_fullddsdesigncountsVsdcounts.RData")
# Calculate Cook's distances for all genes
cooks <- cooks.distance(dds)
assays(dds)[["cooks"]]
dds=DESeq(dds, parallel=TRUE)
assays(dds)[["cooks"]]
# Calculate Cook's distances for all genes
cooks <- cooks.distance(dds)
cooks <- assays(dds)[["cooks"]]
# Inspect the Cook's distances
hist(cooks, breaks=100, main="Cook's distance")
# Inspect the Cook's distances
hist(cooks, breaks=1, main="Cook's distance")
# Inspect the Cook's distances
hist(cooks, breaks=10, main="Cook's distance")
pathway_details <- sapply(pathway_info, function(x) {
pathway_name <- x[[1]]$NAME
pathway_category <- x[[1]]$CLASS
return(c(Name = pathway_name, Category = pathway_category))
})
# Display the pathway names and categories
print(pathway_details)
pathway_categories_df <- tibble(
Pathway_ID = names(pathway_details),
Details = pathway_details
)
pathway_categories_df <- pathway_categories_df %>%
mutate(Description = sapply(Details, function(x) x[1]),
Category = sapply(Details, function(x) x[2])) %>%
select(-Details)
KEGG_enrich_CvN_categories <- left_join(KEGG_enrich_CvN@result, pathway_categories_df, by = "Description")
length(unique(KEGG_enrich_CvN_categories$Category)) #44 unique categories
filtered_KEGG_enrich_CvN <- KEGG_enrich_CvN_categories %>% filter(!grepl("Human Diseases", Category, ignore.case = TRUE))
str(filtered_KEGG_enrich_CvN) #200 KEGG terms
length(unique(filtered_KEGG_enrich_CvN$Category)) #33 categories
filtered_KEGG_enrich_CvN$GeneRatio <- sapply(filtered_KEGG_enrich_CvN$GeneRatio, function(x) {
eval(parse(text=x))
})
filtered_KEGG_enrich_CvN %>%
drop_na(Category) %>%
filter(p.adjust < 0.1) %>%
ggplot(., aes(x = reorder(Description, GeneRatio), y = GeneRatio)) +
geom_point(aes(size = Count, color = p.adjust)) +
theme_minimal() +
labs(x = "MAP Description", y = "Gene Ratio", title = "CCC vs. Nursery") +
coord_flip() +
scale_colour_gradient(low="blue", high="red") +
theme(plot.title = element_text(size=15),  # Increase plot title text size
axis.title = element_text(size=13),  # Increase axis titles text size
axis.text = element_text(size=12),
legend.text = element_text(size=12))
ggsave("CCCvsnursery_KEGGenrichment_p0.1.pdf")
filtered_KEGG_enrich_CvN %>%
filter(p.adjust<0.2)
# Define a color ramp from blue to red
blue_to_red <- colorRampPalette(c("blue", "red"))
# Generate n colors from this palette
n_colors <- blue_to_red(2)
# Set pathway of interest from above
filtered_KEGG_enrich_CvN %>%
drop_na(Category) %>%
filter(p.adjust < 0.05)
map_id <- "04915" #Estrogen signaling pathway
# run pathview on a specific path
pv_path <- pathview(
gene.data = CCCvsnursery_KEGG_DGEs,
pathway.id = map_id,
species = "ko",
out.suffix = "Estrogen signaling pathway",
limit = list(
gene = c(-1, 1), # upper and lower range of log2foldchange values
cpd = c(-4, 4)),
discrete = list(
gene = FALSE, # set this to true when working with discrete data
cpd = FALSE),
low = n_colors[1],
mid = n_colors[4],
high = n_colors[2],
kegg.native = T # T: outputs a traditional KEGG pathway map, F: outputs a different map style
)
map_id <- "04916"  #Melanogenesis
# run pathview on a specific path
pv_path <- pathview(
gene.data = CCCvsnursery_KEGG_DGEs,
pathway.id = map_id,
species = "ko",
out.suffix = "Melanogenesis",
limit = list(
gene = c(-1, 1), # upper and lower range of log2foldchange values
cpd = c(-4, 4)),
discrete = list(
gene = FALSE, # set this to true when working with discrete data
cpd = FALSE),
low = n_colors[1],
mid = n_colors[4],
high = n_colors[2],
kegg.native = T # T: outputs a traditional KEGG pathway map, F: outputs a different map style
)
map_id <- "04928" #Parathyroid hormone synthesis, secretion and action
# run pathview on a specific path
pv_path <- pathview(
gene.data = CCCvsnursery_KEGG_DGEs,
pathway.id = map_id,
species = "ko",
out.suffix = "Parathyroid hormone synthesis, secretion and action",
limit = list(
gene = c(-1, 1), # upper and lower range of log2foldchange values
cpd = c(-4, 4)),
discrete = list(
gene = FALSE, # set this to true when working with discrete data
cpd = FALSE),
low = n_colors[1],
mid = n_colors[4],
high = n_colors[2],
kegg.native = T # T: outputs a traditional KEGG pathway map, F: outputs a different map style
)
map_id <- "04657" #IL-17 signaling pathway (immune system)
# run pathview on a specific path
pv_path <- pathview(
gene.data = CCCvsnursery_KEGG_DGEs,
pathway.id = map_id,
species = "ko",
out.suffix = "IL-17 signaling pathway",
limit = list(
gene = c(-1, 1), # upper and lower range of log2foldchange values
cpd = c(-4, 4)),
discrete = list(
gene = FALSE, # set this to true when working with discrete data
cpd = FALSE),
low = n_colors[1],
mid = n_colors[4],
high = n_colors[2],
kegg.native = T # T: outputs a traditional KEGG pathway map, F: outputs a different map style
)
map_id <- "04626" #Plant-pathogen interaction (environmental adaptation) map04626
# run pathview on a specific path
pv_path <- pathview(
gene.data = CCCvsnursery_KEGG_DGEs,
pathway.id = map_id,
species = "ko",
out.suffix = "Plant-pathogen interaction",
limit = list(
gene = c(-1, 1), # upper and lower range of log2foldchange values
cpd = c(-4, 4)),
discrete = list(
gene = FALSE, # set this to true when working with discrete data
cpd = FALSE),
low = n_colors[1],
mid = n_colors[4],
high = n_colors[2],
kegg.native = T # T: outputs a traditional KEGG pathway map, F: outputs a different map style
)
map_id <- "04668" #TNF signaling pathway (Environmental Information Processing; Signal transduction) map04668
# run pathview on a specific path
pv_path <- pathview(
gene.data = CCCvsnursery_KEGG_DGEs,
pathway.id = map_id,
species = "ko",
out.suffix = "TNF signaling pathway",
limit = list(
gene = c(-1, 1), # upper and lower range of log2foldchange values
cpd = c(-4, 4)),
discrete = list(
gene = FALSE, # set this to true when working with discrete data
cpd = FALSE),
low = n_colors[1],
mid = n_colors[4],
high = n_colors[2],
kegg.native = T # T: outputs a traditional KEGG pathway map, F: outputs a different map style
)
map_id <- "04612" #Antigen processing and presentation (immune system) map04612
# run pathview on a specific path
pv_path <- pathview(
gene.data = CCCvsnursery_KEGG_DGEs,
pathway.id = map_id,
species = "ko",
out.suffix = "Antigen processing and presentation",
limit = list(
gene = c(-1, 1), # upper and lower range of log2foldchange values
cpd = c(-4, 4)),
discrete = list(
gene = FALSE, # set this to true when working with discrete data
cpd = FALSE),
low = n_colors[1],
mid = n_colors[4],
high = n_colors[2],
kegg.native = T # T: outputs a traditional KEGG pathway map, F: outputs a different map style
)
library(EnhancedVolcano)
library(tidyverse)
load("Rdata_files/pvals.RData")
keyvals <- ifelse(
resLFC_Location_CCC_vs_nursery_annotated$log2FoldChange < -1 & resLFC_Location_CCC_vs_nursery_annotated$padj < 0.05, 'darkblue',
ifelse(resLFC_Location_CCC_vs_nursery_annotated$log2FoldChange > 1 & resLFC_Location_CCC_vs_nursery_annotated$padj < 0.05, 'orange',
'grey'))
resLFC_Location_CCC_vs_nursery_annotated <- as.data.frame(resLFC) %>%
rownames_to_column(var="gene") %>%
left_join(read.table(file = "bioinformatics/Acervicornis_iso2geneName.tab",
sep = "\t",
quote="", fill=FALSE) %>%
mutate(gene = V1,
annot = V2) %>%
dplyr::select(-V1, -V2), by = c("gene" = "gene"))
str(resLFC_Location_CCC_vs_nursery_annotated) #21814 x 7
keyvals <- ifelse(
resLFC_Location_CCC_vs_nursery_annotated$log2FoldChange < -1 & resLFC_Location_CCC_vs_nursery_annotated$padj < 0.05, 'darkblue',
ifelse(resLFC_Location_CCC_vs_nursery_annotated$log2FoldChange > 1 & resLFC_Location_CCC_vs_nursery_annotated$padj < 0.05, 'orange',
'grey'))
keyvals[is.na(keyvals)] <- 'grey'
names(keyvals)[keyvals == 'orange'] <- 'upregulated in CCC (Lf2C>1,padj<0.05)'
names(keyvals)[keyvals == 'grey'] <- 'L2FC=0 and padj > 0.05'
names(keyvals)[keyvals == 'darkblue'] <- 'upregulated in Nursery (Lf2C<-1,padj<0.05)'
EnhancedVolcano(resLFC_Location_CCC_vs_nursery_annotated,
lab = NA,
title = "CCC vs. Nursery",
x = 'log2FoldChange',
y = 'padj',
ylab = bquote(~-Log[10]~ 'FDR P-adjusted'),
legendPosition = 'right',
pCutoff = 10e-2,
FCcutoff = 1,
legendIconSize = 5.0,
labSize = 6.0,
colCustom = keyvals,
colAlpha = 0.5)
pdf(file="volcanoplot_colorcoded.pdf", width = 12, height = 6)
EnhancedVolcano(resLFC_Location_CCC_vs_nursery_annotated,
lab = NA,
title = "CCC vs. Nursery",
x = 'log2FoldChange',
y = 'padj',
ylab = bquote(~-Log[10]~ 'FDR P-adjusted'),
legendPosition = 'right',
pCutoff = 10e-2,
FCcutoff = 1,
legendIconSize = 5.0,
labSize = 6.0,
colCustom = keyvals,
colAlpha = 0.5)
# heatmap and hierarchical clustering:
load("Rdata_files/vsd.RData")
# Principal coordinates analysis
library(vegan)
# library(rgl)
library(ape)
# creating a PCoA eigenvalue matrix
dds.pcoa=pcoa(dist(t(vsd),method="manhattan")/1000)
scores=dds.pcoa$vectors
# copy this table for % variation explained by each axis (Relative_eig column)
dds.pcoa$values
